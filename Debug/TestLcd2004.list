
TestLcd2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d2c  08007d2c  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  08007d2c  08007d2c  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d2c  08007d2c  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08007d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000298  08007fcc  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08007fcc  00020730  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aad  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002966  00000000  00000000  00033d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000374b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000435a  00000000  00000000  00038188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f51  00000000  00000000  0003c4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c59c  00000000  00000000  0004e433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da9cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  000daa24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	080075e4 	.word	0x080075e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	080075e4 	.word	0x080075e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <Impostazioni>:
 * nb. per abilitare sprintf abilitare questo flag :
 * -u _printf_float in Properties -> C/C++ Build -> Settings -> MCU GCC Linker -> Miscellaneous -> Linker flags
 *
 * */

void Impostazioni() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
	unsigned char previous = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]
	unsigned char next = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	737b      	strb	r3, [r7, #13]
	bool stay = true;
 8001042:	2301      	movs	r3, #1
 8001044:	733b      	strb	r3, [r7, #12]
	bool innerstay = true;
 8001046:	2301      	movs	r3, #1
 8001048:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 800104a:	f000 fe4f 	bl	8001cec <lcd_clear>
	lcd_cursor_pos(0, 2);
 800104e:	2102      	movs	r1, #2
 8001050:	2000      	movs	r0, #0
 8001052:	f000 feb5 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(">");
 8001056:	486a      	ldr	r0, [pc, #424]	; (8001200 <Impostazioni+0x1d0>)
 8001058:	f000 fe9c 	bl	8001d94 <lcd_send_string>
	lcd_cursor_pos(19, 2);
 800105c:	2102      	movs	r1, #2
 800105e:	2013      	movs	r0, #19
 8001060:	f000 feae 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_char('<');
 8001064:	203c      	movs	r0, #60	; 0x3c
 8001066:	f000 fed9 	bl	8001e1c <lcd_send_char>
	lcd_cursor_pos(0, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fea7 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[0]);
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <Impostazioni+0x1d4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fe8c 	bl	8001d94 <lcd_send_string>

	int oldMenuPosition = menuPosition;
 800107c:	4b62      	ldr	r3, [pc, #392]	; (8001208 <Impostazioni+0x1d8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	607b      	str	r3, [r7, #4]

	menuPosition = 1;
 8001082:	4b61      	ldr	r3, [pc, #388]	; (8001208 <Impostazioni+0x1d8>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

	while (stay) {
 8001088:	e0b0      	b.n	80011ec <Impostazioni+0x1bc>

		switch (current) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <Impostazioni+0x66>
 8001090:	2b13      	cmp	r3, #19
 8001092:	d003      	beq.n	800109c <Impostazioni+0x6c>
 8001094:	e005      	b.n	80010a2 <Impostazioni+0x72>
		case 0:
			current = 18;
 8001096:	2312      	movs	r3, #18
 8001098:	73fb      	strb	r3, [r7, #15]
			break;
 800109a:	e002      	b.n	80010a2 <Impostazioni+0x72>
		case 19:
			current = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
			break;
 80010a0:	bf00      	nop
		}
		previous = current - 1;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	73bb      	strb	r3, [r7, #14]
		next = current + 1;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3301      	adds	r3, #1
 80010ac:	737b      	strb	r3, [r7, #13]
		if (previous == 0)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <Impostazioni+0x88>
			previous = 18;
 80010b4:	2312      	movs	r3, #18
 80010b6:	73bb      	strb	r3, [r7, #14]
		if (next == 19)
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	2b13      	cmp	r3, #19
 80010bc:	d101      	bne.n	80010c2 <Impostazioni+0x92>
			next = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	737b      	strb	r3, [r7, #13]

		lcd_cursor_pos(1, 1);
 80010c2:	2101      	movs	r1, #1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fe7b 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                   ");
 80010ca:	4850      	ldr	r0, [pc, #320]	; (800120c <Impostazioni+0x1dc>)
 80010cc:	f000 fe62 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 1);
 80010d0:	2101      	movs	r1, #1
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fe74 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[previous]);
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <Impostazioni+0x1d4>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe57 	bl	8001d94 <lcd_send_string>

		lcd_cursor_pos(1, 2);
 80010e6:	2102      	movs	r1, #2
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fe69 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                   ");
 80010ee:	4847      	ldr	r0, [pc, #284]	; (800120c <Impostazioni+0x1dc>)
 80010f0:	f000 fe50 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 2);
 80010f4:	2102      	movs	r1, #2
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fe62 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[current]);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	4a41      	ldr	r2, [pc, #260]	; (8001204 <Impostazioni+0x1d4>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fe45 	bl	8001d94 <lcd_send_string>

		lcd_cursor_pos(1, 3);
 800110a:	2103      	movs	r1, #3
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fe57 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                   ");
 8001112:	483e      	ldr	r0, [pc, #248]	; (800120c <Impostazioni+0x1dc>)
 8001114:	f000 fe3e 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 3);
 8001118:	2103      	movs	r1, #3
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fe50 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[next]);
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	4a38      	ldr	r2, [pc, #224]	; (8001204 <Impostazioni+0x1d4>)
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fe33 	bl	8001d94 <lcd_send_string>

		innerstay = true;
 800112e:	2301      	movs	r3, #1
 8001130:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 8001132:	e054      	b.n	80011de <Impostazioni+0x1ae>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 8001134:	2120      	movs	r1, #32
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <Impostazioni+0x1e0>)
 8001138:	f001 ff0c 	bl	8002f54 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d122      	bne.n	8001188 <Impostazioni+0x158>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 8001142:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001146:	f001 fc4f 	bl	80029e8 <HAL_Delay>
				ImpostazioniCambiaValore(current);
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f863 	bl	8001218 <ImpostazioniCambiaValore>
				lcd_clear();
 8001152:	f000 fdcb 	bl	8001cec <lcd_clear>
				lcd_cursor_pos(0, 2);
 8001156:	2102      	movs	r1, #2
 8001158:	2000      	movs	r0, #0
 800115a:	f000 fe31 	bl	8001dc0 <lcd_cursor_pos>
				lcd_send_string(">");
 800115e:	4828      	ldr	r0, [pc, #160]	; (8001200 <Impostazioni+0x1d0>)
 8001160:	f000 fe18 	bl	8001d94 <lcd_send_string>
				lcd_cursor_pos(19, 2);
 8001164:	2102      	movs	r1, #2
 8001166:	2013      	movs	r0, #19
 8001168:	f000 fe2a 	bl	8001dc0 <lcd_cursor_pos>
				lcd_send_char('<');
 800116c:	203c      	movs	r0, #60	; 0x3c
 800116e:	f000 fe55 	bl	8001e1c <lcd_send_char>
				lcd_cursor_pos(0, 0);
 8001172:	2100      	movs	r1, #0
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fe23 	bl	8001dc0 <lcd_cursor_pos>
				lcd_send_string(MenuImpostazioni[0]);
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <Impostazioni+0x1d4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fe08 	bl	8001d94 <lcd_send_string>
				innerstay = false;
 8001184:	2300      	movs	r3, #0
 8001186:	72fb      	strb	r3, [r7, #11]

			}
			if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	4821      	ldr	r0, [pc, #132]	; (8001214 <Impostazioni+0x1e4>)
 800118e:	f001 fee1 	bl	8002f54 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10a      	bne.n	80011ae <Impostazioni+0x17e>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 8001198:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800119c:	f001 fc24 	bl	80029e8 <HAL_Delay>
				stay = false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	733b      	strb	r3, [r7, #12]
				innerstay = false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	72fb      	strb	r3, [r7, #11]
				menuPosition = oldMenuPosition;
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <Impostazioni+0x1d8>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
			}
			if (current != menuPosition) {
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <Impostazioni+0x1d8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d012      	beq.n	80011de <Impostazioni+0x1ae>
				if (menuPosition > 18)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <Impostazioni+0x1d8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	dd02      	ble.n	80011c6 <Impostazioni+0x196>
					menuPosition = 1;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <Impostazioni+0x1d8>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <Impostazioni+0x1d8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <Impostazioni+0x1a4>
					menuPosition = 18;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <Impostazioni+0x1d8>)
 80011d0:	2212      	movs	r2, #18
 80011d2:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <Impostazioni+0x1d8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	73fb      	strb	r3, [r7, #15]
				innerstay = false;
 80011da:	2300      	movs	r3, #0
 80011dc:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1a7      	bne.n	8001134 <Impostazioni+0x104>

			}
		}
		HAL_Delay(300);
 80011e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011e8:	f001 fbfe 	bl	80029e8 <HAL_Delay>
	while (stay) {
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f47f af4b 	bne.w	800108a <Impostazioni+0x5a>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800778c 	.word	0x0800778c
 8001204:	20000000 	.word	0x20000000
 8001208:	20000714 	.word	0x20000714
 800120c:	08007790 	.word	0x08007790
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40010800 	.word	0x40010800

08001218 <ImpostazioniCambiaValore>:

void ImpostazioniCambiaValore(unsigned char current) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

	int oldMenuPosition = menuPosition;
 8001222:	4ba9      	ldr	r3, [pc, #676]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	60fb      	str	r3, [r7, #12]
	menuPosition = 0;
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	int previousMenuPosition = menuPosition;
 800122e:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]
	int variation = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
	bool stay = true;
 8001238:	2301      	movs	r3, #1
 800123a:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 800123c:	f000 fd56 	bl	8001cec <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f000 fdbc 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[current]);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4aa0      	ldr	r2, [pc, #640]	; (80014cc <ImpostazioniCambiaValore+0x2b4>)
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fd9f 	bl	8001d94 <lcd_send_string>
	lcd_cursor_pos(0, 3);
 8001256:	2103      	movs	r1, #3
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fdb1 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string("SEL:OK");
 800125e:	489c      	ldr	r0, [pc, #624]	; (80014d0 <ImpostazioniCambiaValore+0x2b8>)
 8001260:	f000 fd98 	bl	8001d94 <lcd_send_string>
	lcd_cursor_pos(0, 1);
 8001264:	2101      	movs	r1, #1
 8001266:	2000      	movs	r0, #0
 8001268:	f000 fdaa 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa8c 	bl	800178c <ImpostazioniGetStringValueFromMenuIndex>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fd8c 	bl	8001d94 <lcd_send_string>

	while (stay) {
 800127c:	e271      	b.n	8001762 <ImpostazioniCambiaValore+0x54a>
		if (current == 18
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d12e      	bne.n	80012e2 <ImpostazioniCambiaValore+0xca>
				&& HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin)
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	4892      	ldr	r0, [pc, #584]	; (80014d4 <ImpostazioniCambiaValore+0x2bc>)
 800128a:	f001 fe63 	bl	8002f54 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d126      	bne.n	80012e2 <ImpostazioniCambiaValore+0xca>
						== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001298:	f001 fba6 	bl	80029e8 <HAL_Delay>
			lcd_clear();
 800129c:	f000 fd26 	bl	8001cec <lcd_clear>
			lcd_cursor_pos(0, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 fd8c 	bl	8001dc0 <lcd_cursor_pos>
			lcd_send_string(MenuImpostazioni[current]);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a88      	ldr	r2, [pc, #544]	; (80014cc <ImpostazioniCambiaValore+0x2b4>)
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fd6f 	bl	8001d94 <lcd_send_string>
			lcd_cursor_pos(0, 3);
 80012b6:	2103      	movs	r1, #3
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 fd81 	bl	8001dc0 <lcd_cursor_pos>
			lcd_send_string("....................");
 80012be:	4886      	ldr	r0, [pc, #536]	; (80014d8 <ImpostazioniCambiaValore+0x2c0>)
 80012c0:	f000 fd68 	bl	8001d94 <lcd_send_string>
			lcd_cursor_pos(0, 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 fd7a 	bl	8001dc0 <lcd_cursor_pos>
			lcd_send_string("Ripristino in corso");
 80012cc:	4883      	ldr	r0, [pc, #524]	; (80014dc <ImpostazioniCambiaValore+0x2c4>)
 80012ce:	f000 fd61 	bl	8001d94 <lcd_send_string>
			HAL_Delay(2000);
 80012d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012d6:	f001 fb87 	bl	80029e8 <HAL_Delay>
			menuPosition = oldMenuPosition;
 80012da:	4a7b      	ldr	r2, [pc, #492]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6013      	str	r3, [r2, #0]
			return;
 80012e0:	e243      	b.n	800176a <ImpostazioniCambiaValore+0x552>
		}
		if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 80012e2:	2120      	movs	r1, #32
 80012e4:	487b      	ldr	r0, [pc, #492]	; (80014d4 <ImpostazioniCambiaValore+0x2bc>)
 80012e6:	f001 fe35 	bl	8002f54 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <ImpostazioniCambiaValore+0xe8>
				== GPIO_PIN_RESET) {
			HAL_Delay(300);
 80012f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012f4:	f001 fb78 	bl	80029e8 <HAL_Delay>
			menuPosition = oldMenuPosition;
 80012f8:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6013      	str	r3, [r2, #0]
			return;
 80012fe:	e234      	b.n	800176a <ImpostazioniCambiaValore+0x552>

		}
		if (previousMenuPosition != menuPosition) {
 8001300:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	429a      	cmp	r2, r3
 8001308:	f000 822b 	beq.w	8001762 <ImpostazioniCambiaValore+0x54a>
			if (menuPosition < previousMenuPosition) {
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd03      	ble.n	800131e <ImpostazioniCambiaValore+0x106>
				variation = -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	e006      	b.n	800132c <ImpostazioniCambiaValore+0x114>
			} else if (menuPosition > previousMenuPosition) {
 800131e:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	da01      	bge.n	800132c <ImpostazioniCambiaValore+0x114>
				variation = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
			}
			previousMenuPosition = menuPosition;
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]

			switch (current) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3b01      	subs	r3, #1
 8001336:	2b10      	cmp	r3, #16
 8001338:	f200 81fc 	bhi.w	8001734 <ImpostazioniCambiaValore+0x51c>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <ImpostazioniCambiaValore+0x12c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001389 	.word	0x08001389
 8001348:	080013a5 	.word	0x080013a5
 800134c:	080013c1 	.word	0x080013c1
 8001350:	08001433 	.word	0x08001433
 8001354:	0800145f 	.word	0x0800145f
 8001358:	0800148b 	.word	0x0800148b
 800135c:	08001501 	.word	0x08001501
 8001360:	08001535 	.word	0x08001535
 8001364:	08001569 	.word	0x08001569
 8001368:	0800159d 	.word	0x0800159d
 800136c:	080015d1 	.word	0x080015d1
 8001370:	08001605 	.word	0x08001605
 8001374:	08001639 	.word	0x08001639
 8001378:	0800166b 	.word	0x0800166b
 800137c:	0800169d 	.word	0x0800169d
 8001380:	080016b7 	.word	0x080016b7
 8001384:	080016e5 	.word	0x080016e5
			case 1:
				if (one_turn_mandrel_steps + variation > 0)
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	f340 81b4 	ble.w	80016fe <ImpostazioniCambiaValore+0x4e6>
					one_turn_mandrel_steps += variation;
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4413      	add	r3, r2
 800139e:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 80013a0:	6013      	str	r3, [r2, #0]
				break;
 80013a2:	e1ac      	b.n	80016fe <ImpostazioniCambiaValore+0x4e6>
			case 2:
				if (one_turn_screw_steps + variation > 0)
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 81a8 	beq.w	8001702 <ImpostazioniCambiaValore+0x4ea>
					one_turn_screw_steps += variation;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013bc:	6013      	str	r3, [r2, #0]
				break;
 80013be:	e1a0      	b.n	8001702 <ImpostazioniCambiaValore+0x4ea>
			case 3:
				if ((((screw_pitch * 1000) + (variation)) / 1000) > 0)
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4949      	ldr	r1, [pc, #292]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc6c 	bl	8000ca4 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461c      	mov	r4, r3
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f7ff fc13 	bl	8000bfc <__aeabi_i2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fb5a 	bl	8000a94 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd11 	bl	8000e0c <__aeabi_fdiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe13 	bl	800101c <__aeabi_fcmpgt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d100      	bne.n	80013fe <ImpostazioniCambiaValore+0x1e6>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
				break;
 80013fc:	e19a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc4d 	bl	8000ca4 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	461c      	mov	r4, r3
 800140e:	6938      	ldr	r0, [r7, #16]
 8001410:	f7ff fbf4 	bl	8000bfc <__aeabi_i2f>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fb3b 	bl	8000a94 <__addsf3>
 800141e:	4603      	mov	r3, r0
 8001420:	4932      	ldr	r1, [pc, #200]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fcf2 	bl	8000e0c <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 800142e:	601a      	str	r2, [r3, #0]
				break;
 8001430:	e180      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
			case 4:
				if (AccelerationDelay + variation * 5 > 0)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 815f 	beq.w	8001706 <ImpostazioniCambiaValore+0x4ee>
					AccelerationDelay += (variation * 5);
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 800145a:	6013      	str	r3, [r2, #0]
				break;
 800145c:	e153      	b.n	8001706 <ImpostazioniCambiaValore+0x4ee>
			case 5:
				if (DecelerationDelay + variation * 5 > 0)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4413      	add	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 814b 	beq.w	800170a <ImpostazioniCambiaValore+0x4f2>
					DecelerationDelay += (variation * 5);
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 8001486:	6013      	str	r3, [r2, #0]
				break;
 8001488:	e13f      	b.n	800170a <ImpostazioniCambiaValore+0x4f2>
			case 6:
				CW = !(CW);
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <ImpostazioniCambiaValore+0x2e0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <ImpostazioniCambiaValore+0x2e0>)
 80014a6:	701a      	strb	r2, [r3, #0]
				CCW = !(CCW);
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <ImpostazioniCambiaValore+0x2e4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <ImpostazioniCambiaValore+0x2e4>)
 80014c4:	701a      	strb	r2, [r3, #0]
				break;
 80014c6:	e135      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
 80014c8:	20000714 	.word	0x20000714
 80014cc:	20000000 	.word	0x20000000
 80014d0:	080077a4 	.word	0x080077a4
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	080077ac 	.word	0x080077ac
 80014dc:	080077c4 	.word	0x080077c4
 80014e0:	20000080 	.word	0x20000080
 80014e4:	20000088 	.word	0x20000088
 80014e8:	20000084 	.word	0x20000084
 80014ec:	447a0000 	.word	0x447a0000
 80014f0:	2000008c 	.word	0x2000008c
 80014f4:	20000090 	.word	0x20000090
 80014f8:	20000094 	.word	0x20000094
 80014fc:	200002b8 	.word	0x200002b8
			case 7:
				if (av_carro[0] + variation / 5 > 0)
 8001500:	4b9b      	ldr	r3, [pc, #620]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	499b      	ldr	r1, [pc, #620]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001508:	fb81 0103 	smull	r0, r1, r1, r3
 800150c:	1049      	asrs	r1, r1, #1
 800150e:	17db      	asrs	r3, r3, #31
 8001510:	1acb      	subs	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80fa 	beq.w	800170e <ImpostazioniCambiaValore+0x4f6>
					av_carro[0] += (variation / 5);
 800151a:	4b95      	ldr	r3, [pc, #596]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4994      	ldr	r1, [pc, #592]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001522:	fb81 0103 	smull	r0, r1, r1, r3
 8001526:	1049      	asrs	r1, r1, #1
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1acb      	subs	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001530:	6013      	str	r3, [r2, #0]
				break;
 8001532:	e0ec      	b.n	800170e <ImpostazioniCambiaValore+0x4f6>
			case 8:
				if (av_trasv[0] + variation / 5 > 0)
 8001534:	4b90      	ldr	r3, [pc, #576]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	498e      	ldr	r1, [pc, #568]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800153c:	fb81 0103 	smull	r0, r1, r1, r3
 8001540:	1049      	asrs	r1, r1, #1
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1acb      	subs	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80e2 	beq.w	8001712 <ImpostazioniCambiaValore+0x4fa>
					av_trasv[0] += (variation / 5);
 800154e:	4b8a      	ldr	r3, [pc, #552]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4987      	ldr	r1, [pc, #540]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001556:	fb81 0103 	smull	r0, r1, r1, r3
 800155a:	1049      	asrs	r1, r1, #1
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	4a85      	ldr	r2, [pc, #532]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001564:	6013      	str	r3, [r2, #0]
				break;
 8001566:	e0d4      	b.n	8001712 <ImpostazioniCambiaValore+0x4fa>
			case 9:
				if (av_carro[1] + variation / 5 > 0)
 8001568:	4b81      	ldr	r3, [pc, #516]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4981      	ldr	r1, [pc, #516]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001570:	fb81 0103 	smull	r0, r1, r1, r3
 8001574:	1049      	asrs	r1, r1, #1
 8001576:	17db      	asrs	r3, r3, #31
 8001578:	1acb      	subs	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80ca 	beq.w	8001716 <ImpostazioniCambiaValore+0x4fe>
					av_carro[1] += (variation / 5);
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	497a      	ldr	r1, [pc, #488]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800158a:	fb81 0103 	smull	r0, r1, r1, r3
 800158e:	1049      	asrs	r1, r1, #1
 8001590:	17db      	asrs	r3, r3, #31
 8001592:	1acb      	subs	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	4a76      	ldr	r2, [pc, #472]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001598:	6053      	str	r3, [r2, #4]
				break;
 800159a:	e0bc      	b.n	8001716 <ImpostazioniCambiaValore+0x4fe>
			case 10:
				if (av_trasv[1] + variation / 5 > 0)
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4974      	ldr	r1, [pc, #464]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015a4:	fb81 0103 	smull	r0, r1, r1, r3
 80015a8:	1049      	asrs	r1, r1, #1
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80b2 	beq.w	800171a <ImpostazioniCambiaValore+0x502>
					av_trasv[1] += (variation / 5);
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	496d      	ldr	r1, [pc, #436]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015be:	fb81 0103 	smull	r0, r1, r1, r3
 80015c2:	1049      	asrs	r1, r1, #1
 80015c4:	17db      	asrs	r3, r3, #31
 80015c6:	1acb      	subs	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4a6b      	ldr	r2, [pc, #428]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 80015cc:	6053      	str	r3, [r2, #4]
				break;
 80015ce:	e0a4      	b.n	800171a <ImpostazioniCambiaValore+0x502>
			case 11:
				if (av_carro[2] + variation / 5 > 0)
 80015d0:	4b67      	ldr	r3, [pc, #412]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4967      	ldr	r1, [pc, #412]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015d8:	fb81 0103 	smull	r0, r1, r1, r3
 80015dc:	1049      	asrs	r1, r1, #1
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1acb      	subs	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 809a 	beq.w	800171e <ImpostazioniCambiaValore+0x506>
					av_carro[2] += (variation / 5);
 80015ea:	4b61      	ldr	r3, [pc, #388]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4960      	ldr	r1, [pc, #384]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015f2:	fb81 0103 	smull	r0, r1, r1, r3
 80015f6:	1049      	asrs	r1, r1, #1
 80015f8:	17db      	asrs	r3, r3, #31
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	4a5c      	ldr	r2, [pc, #368]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001600:	6093      	str	r3, [r2, #8]
				break;
 8001602:	e08c      	b.n	800171e <ImpostazioniCambiaValore+0x506>
			case 12:
				if (av_trasv[2] + variation / 5 > 0)
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	495a      	ldr	r1, [pc, #360]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800160c:	fb81 0103 	smull	r0, r1, r1, r3
 8001610:	1049      	asrs	r1, r1, #1
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1acb      	subs	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8082 	beq.w	8001722 <ImpostazioniCambiaValore+0x50a>
					av_trasv[2] += (variation / 5);
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4953      	ldr	r1, [pc, #332]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001626:	fb81 0103 	smull	r0, r1, r1, r3
 800162a:	1049      	asrs	r1, r1, #1
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	4a51      	ldr	r2, [pc, #324]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001634:	6093      	str	r3, [r2, #8]
				break;
 8001636:	e074      	b.n	8001722 <ImpostazioniCambiaValore+0x50a>
			case 13:
				if (av_carro[3] + variation / 5 > 0)
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	494d      	ldr	r1, [pc, #308]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001640:	fb81 0103 	smull	r0, r1, r1, r3
 8001644:	1049      	asrs	r1, r1, #1
 8001646:	17db      	asrs	r3, r3, #31
 8001648:	1acb      	subs	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06a      	beq.n	8001726 <ImpostazioniCambiaValore+0x50e>
					av_carro[3] += (variation / 5);
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4947      	ldr	r1, [pc, #284]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001658:	fb81 0103 	smull	r0, r1, r1, r3
 800165c:	1049      	asrs	r1, r1, #1
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	4a42      	ldr	r2, [pc, #264]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001666:	60d3      	str	r3, [r2, #12]
				break;
 8001668:	e05d      	b.n	8001726 <ImpostazioniCambiaValore+0x50e>
			case 14:
				if (av_trasv[3] + variation / 5 > 0)
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4940      	ldr	r1, [pc, #256]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001672:	fb81 0103 	smull	r0, r1, r1, r3
 8001676:	1049      	asrs	r1, r1, #1
 8001678:	17db      	asrs	r3, r3, #31
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d053      	beq.n	800172a <ImpostazioniCambiaValore+0x512>
					av_trasv[3] += (variation / 5);
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	493a      	ldr	r1, [pc, #232]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800168a:	fb81 0103 	smull	r0, r1, r1, r3
 800168e:	1049      	asrs	r1, r1, #1
 8001690:	17db      	asrs	r3, r3, #31
 8001692:	1acb      	subs	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001698:	60d3      	str	r3, [r2, #12]
				break;
 800169a:	e046      	b.n	800172a <ImpostazioniCambiaValore+0x512>
			case 15:
				if (thread_offset_steps + variation > 0)
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <ImpostazioniCambiaValore+0x564>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4413      	add	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dd42      	ble.n	800172e <ImpostazioniCambiaValore+0x516>
					thread_offset_steps += variation;
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <ImpostazioniCambiaValore+0x564>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <ImpostazioniCambiaValore+0x564>)
 80016b2:	6013      	str	r3, [r2, #0]
				break;
 80016b4:	e03b      	b.n	800172e <ImpostazioniCambiaValore+0x516>
			case 16:
				if (NORTON_gearbox + variation > 0)
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4413      	add	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dd07      	ble.n	80016d4 <ImpostazioniCambiaValore+0x4bc>
					NORTON_gearbox += variation;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016d2:	701a      	strb	r2, [r3, #0]
				if (NORTON_gearbox > 3)
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d92a      	bls.n	8001732 <ImpostazioniCambiaValore+0x51a>
					NORTON_gearbox = 3;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016de:	2203      	movs	r2, #3
 80016e0:	701a      	strb	r2, [r3, #0]
				break;
 80016e2:	e026      	b.n	8001732 <ImpostazioniCambiaValore+0x51a>
			case 17:
				if (MaxStepperSpeed + variation > 0)
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d021      	beq.n	8001734 <ImpostazioniCambiaValore+0x51c>
					MaxStepperSpeed += variation;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e01a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 80016fe:	bf00      	nop
 8001700:	e018      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001702:	bf00      	nop
 8001704:	e016      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001706:	bf00      	nop
 8001708:	e014      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800170a:	bf00      	nop
 800170c:	e012      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800170e:	bf00      	nop
 8001710:	e010      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001712:	bf00      	nop
 8001714:	e00e      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001716:	bf00      	nop
 8001718:	e00c      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800171a:	bf00      	nop
 800171c:	e00a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800171e:	bf00      	nop
 8001720:	e008      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001722:	bf00      	nop
 8001724:	e006      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001732:	bf00      	nop
			}
			lcd_cursor_pos(0, 1);
 8001734:	2101      	movs	r1, #1
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fb42 	bl	8001dc0 <lcd_cursor_pos>
			lcd_send_string("                    ");
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <ImpostazioniCambiaValore+0x570>)
 800173e:	f000 fb29 	bl	8001d94 <lcd_send_string>
			lcd_cursor_pos(0, 1);
 8001742:	2101      	movs	r1, #1
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fb3b 	bl	8001dc0 <lcd_cursor_pos>
			lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f81d 	bl	800178c <ImpostazioniGetStringValueFromMenuIndex>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fb1d 	bl	8001d94 <lcd_send_string>
			HAL_Delay(300);
 800175a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800175e:	f001 f943 	bl	80029e8 <HAL_Delay>
	while (stay) {
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f ad8a 	bne.w	800127e <ImpostazioniCambiaValore+0x66>
		}
	}
}
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	20000060 	.word	0x20000060
 8001774:	66666667 	.word	0x66666667
 8001778:	20000070 	.word	0x20000070
 800177c:	20000098 	.word	0x20000098
 8001780:	200002d4 	.word	0x200002d4
 8001784:	2000009c 	.word	0x2000009c
 8001788:	080077d8 	.word	0x080077d8

0800178c <ImpostazioniGetStringValueFromMenuIndex>:

char* ImpostazioniGetStringValueFromMenuIndex(unsigned char current) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	char *buff;
	buff = malloc(sizeof(char) * 20);
 8001796:	2014      	movs	r0, #20
 8001798:	f003 f884 	bl	80048a4 <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]

	switch (current) {
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	f200 80c5 	bhi.w	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <ImpostazioniGetStringValueFromMenuIndex+0x24>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017f9 	.word	0x080017f9
 80017b4:	08001809 	.word	0x08001809
 80017b8:	08001819 	.word	0x08001819
 80017bc:	08001831 	.word	0x08001831
 80017c0:	08001841 	.word	0x08001841
 80017c4:	08001851 	.word	0x08001851
 80017c8:	08001875 	.word	0x08001875
 80017cc:	08001885 	.word	0x08001885
 80017d0:	08001895 	.word	0x08001895
 80017d4:	080018a5 	.word	0x080018a5
 80017d8:	080018b5 	.word	0x080018b5
 80017dc:	080018c5 	.word	0x080018c5
 80017e0:	080018d5 	.word	0x080018d5
 80017e4:	080018e5 	.word	0x080018e5
 80017e8:	080018f5 	.word	0x080018f5
 80017ec:	08001905 	.word	0x08001905
 80017f0:	08001917 	.word	0x08001917
 80017f4:	08001927 	.word	0x08001927
	case 1:
		sprintf(buff, "%d", one_turn_mandrel_steps);
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <ImpostazioniGetStringValueFromMenuIndex+0x200>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4964      	ldr	r1, [pc, #400]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f003 fd8f 	bl	8005324 <siprintf>
		break;
 8001806:	e095      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 2:
		sprintf(buff, "%d", one_turn_screw_steps);
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <ImpostazioniGetStringValueFromMenuIndex+0x208>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4960      	ldr	r1, [pc, #384]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f003 fd87 	bl	8005324 <siprintf>
		break;
 8001816:	e08d      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 3:
		sprintf(buff, "%.3f", screw_pitch);
 8001818:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <ImpostazioniGetStringValueFromMenuIndex+0x20c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe03 	bl	8000428 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	495d      	ldr	r1, [pc, #372]	; (800199c <ImpostazioniGetStringValueFromMenuIndex+0x210>)
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f003 fd7b 	bl	8005324 <siprintf>
		break;
 800182e:	e081      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 4:
		sprintf(buff, "%d", AccelerationDelay);
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <ImpostazioniGetStringValueFromMenuIndex+0x214>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4956      	ldr	r1, [pc, #344]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f003 fd73 	bl	8005324 <siprintf>
		break;
 800183e:	e079      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 5:
		sprintf(buff, "%d", DecelerationDelay);
 8001840:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <ImpostazioniGetStringValueFromMenuIndex+0x218>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4952      	ldr	r1, [pc, #328]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f003 fd6b 	bl	8005324 <siprintf>
		break;
 800184e:	e071      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 6:
		if (CCW)
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <ImpostazioniGetStringValueFromMenuIndex+0x21c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <ImpostazioniGetStringValueFromMenuIndex+0xda>
			sprintf(buff, MenuImpostazioni[19]);
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4619      	mov	r1, r3
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f003 fd60 	bl	8005324 <siprintf>
		else
			sprintf(buff, MenuImpostazioni[20]);
		break;
 8001864:	e066      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
			sprintf(buff, MenuImpostazioni[20]);
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186a:	4619      	mov	r1, r3
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f003 fd59 	bl	8005324 <siprintf>
		break;
 8001872:	e05f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>

	case 7:
		sprintf(buff, "%d", av_carro[0]);
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4945      	ldr	r1, [pc, #276]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f003 fd51 	bl	8005324 <siprintf>
		break;
 8001882:	e057      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 8:
		sprintf(buff, "%d", av_trasv[0]);
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4941      	ldr	r1, [pc, #260]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f003 fd49 	bl	8005324 <siprintf>
		break;
 8001892:	e04f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 9:
		sprintf(buff, "%d", av_carro[1]);
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	461a      	mov	r2, r3
 800189a:	493d      	ldr	r1, [pc, #244]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f003 fd41 	bl	8005324 <siprintf>
		break;
 80018a2:	e047      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 10:
		sprintf(buff, "%d", av_trasv[1]);
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4939      	ldr	r1, [pc, #228]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f003 fd39 	bl	8005324 <siprintf>
		break;
 80018b2:	e03f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 11:
		sprintf(buff, "%d", av_carro[2]);
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4935      	ldr	r1, [pc, #212]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f003 fd31 	bl	8005324 <siprintf>
		break;
 80018c2:	e037      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 12:
		sprintf(buff, "%d", av_trasv[2]);
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4931      	ldr	r1, [pc, #196]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f003 fd29 	bl	8005324 <siprintf>
		break;
 80018d2:	e02f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 13:
		sprintf(buff, "%d", av_carro[3]);
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	461a      	mov	r2, r3
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	f003 fd21 	bl	8005324 <siprintf>
		break;
 80018e2:	e027      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 14:
		sprintf(buff, "%d", av_trasv[3]);
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4929      	ldr	r1, [pc, #164]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f003 fd19 	bl	8005324 <siprintf>
		break;
 80018f2:	e01f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 15:
		sprintf(buff, "%d", thread_offset_steps);
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <ImpostazioniGetStringValueFromMenuIndex+0x22c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4925      	ldr	r1, [pc, #148]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018fc:	68b8      	ldr	r0, [r7, #8]
 80018fe:	f003 fd11 	bl	8005324 <siprintf>
		break;
 8001902:	e017      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 16:
		sprintf(buff, "%d", NORTON_gearbox + 1);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <ImpostazioniGetStringValueFromMenuIndex+0x230>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	461a      	mov	r2, r3
 800190c:	4920      	ldr	r1, [pc, #128]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f003 fd08 	bl	8005324 <siprintf>
		break;
 8001914:	e00e      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 17:
		sprintf(buff, "%lu", MaxStepperSpeed);
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <ImpostazioniGetStringValueFromMenuIndex+0x234>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4929      	ldr	r1, [pc, #164]	; (80019c4 <ImpostazioniGetStringValueFromMenuIndex+0x238>)
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f003 fd00 	bl	8005324 <siprintf>
		break;
 8001924:	e006      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 18:
		sprintf(buff, MenuImpostazioni[21]);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	4619      	mov	r1, r3
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f003 fcf9 	bl	8005324 <siprintf>
		break;
 8001932:	bf00      	nop
	}

	//ltrim string
	int nhead = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]

	while (buff[nhead++] == ' ')
 8001938:	bf00      	nop
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60fa      	str	r2, [r7, #12]
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b20      	cmp	r3, #32
 800194a:	d0f6      	beq.n	800193a <ImpostazioniGetStringValueFromMenuIndex+0x1ae>
		;

	nhead--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3b01      	subs	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
	memmove(buff, &buff[nhead], strlen(buff) - (nhead));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7fe fbf9 	bl	8000150 <strlen>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4621      	mov	r1, r4
 8001968:	68b8      	ldr	r0, [r7, #8]
 800196a:	f002 ffa3 	bl	80048b4 <memmove>
	buff[strlen(buff) - (nhead)] = '\0';
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f7fe fbee 	bl	8000150 <strlen>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

	return buff;
 8001982:	68bb      	ldr	r3, [r7, #8]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	20000080 	.word	0x20000080
 8001990:	080077f0 	.word	0x080077f0
 8001994:	20000088 	.word	0x20000088
 8001998:	20000084 	.word	0x20000084
 800199c:	080077f4 	.word	0x080077f4
 80019a0:	2000008c 	.word	0x2000008c
 80019a4:	20000090 	.word	0x20000090
 80019a8:	200002b8 	.word	0x200002b8
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000060 	.word	0x20000060
 80019b4:	20000070 	.word	0x20000070
 80019b8:	20000098 	.word	0x20000098
 80019bc:	200002d4 	.word	0x200002d4
 80019c0:	2000009c 	.word	0x2000009c
 80019c4:	080077fc 	.word	0x080077fc

080019c8 <PosizioneAngolare>:
extern uint32_t steps;
extern uint32_t steps2;
extern volatile int giri;
extern TIM_HandleTypeDef htim4;

void PosizioneAngolare() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
	float Degrees = 0.00;                       //variable used to store degrees
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
	float old_Degrees = 0.01; //variable to check if the position is changed. Set different from Degrees to print LCD output on the first cycle
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <PosizioneAngolare+0x148>)
 80019d6:	60bb      	str	r3, [r7, #8]
	float AngularRatio = 360.0/(float)one_turn_mandrel_steps; //calculates the degrees per single mandrel encoder step
 80019d8:	4b4e      	ldr	r3, [pc, #312]	; (8001b14 <PosizioneAngolare+0x14c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f90d 	bl	8000bfc <__aeabi_i2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	484c      	ldr	r0, [pc, #304]	; (8001b18 <PosizioneAngolare+0x150>)
 80019e8:	f7ff fa10 	bl	8000e0c <__aeabi_fdiv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	607b      	str	r3, [r7, #4]

	lcd_clear();
 80019f0:	f000 f97c 	bl	8001cec <lcd_clear>
	lcd_cursor_pos(0, 0);
 80019f4:	2100      	movs	r1, #0
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f9e2 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[0]);
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <PosizioneAngolare+0x154>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f9c7 	bl	8001d94 <lcd_send_string>
	lcd_cursor_pos(0, 3);
 8001a06:	2103      	movs	r1, #3
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f9d9 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[1]);
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <PosizioneAngolare+0x154>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f9be 	bl	8001d94 <lcd_send_string>



	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001a18:	e069      	b.n	8001aee <PosizioneAngolare+0x126>
		if (HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin) == GPIO_PIN_RESET){
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	4840      	ldr	r0, [pc, #256]	; (8001b20 <PosizioneAngolare+0x158>)
 8001a20:	f001 fa98 	bl	8002f54 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <PosizioneAngolare+0x76>
			HAL_Delay(300);
 8001a2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a2e:	f000 ffdb 	bl	80029e8 <HAL_Delay>
			steps = 0;
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <PosizioneAngolare+0x15c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
			Degrees = 0;
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
		}

		Degrees = ((float) ((abs(steps) % one_turn_mandrel_steps))
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <PosizioneAngolare+0x15c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bfb8      	it	lt
 8001a46:	425b      	neglt	r3, r3
 8001a48:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <PosizioneAngolare+0x14c>)
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a50:	fb02 f201 	mul.w	r2, r2, r1
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8d0 	bl	8000bfc <__aeabi_i2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f91f 	bl	8000ca4 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	60fb      	str	r3, [r7, #12]
				* AngularRatio);
		steps = TIM3->CNT;
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <PosizioneAngolare+0x160>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <PosizioneAngolare+0x15c>)
 8001a70:	6013      	str	r3, [r2, #0]
		steps2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <PosizioneAngolare+0x164>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <PosizioneAngolare+0x168>)
 8001a7a:	6013      	str	r3, [r2, #0]

		if (steps < 0)
			Degrees = 360 - Degrees;
		if (Degrees == 360)
 8001a7c:	4926      	ldr	r1, [pc, #152]	; (8001b18 <PosizioneAngolare+0x150>)
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff faa4 	bl	8000fcc <__aeabi_fcmpeq>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <PosizioneAngolare+0xc8>
			Degrees = 0;
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
		if (Degrees != old_Degrees) {
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff fa9a 	bl	8000fcc <__aeabi_fcmpeq>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d123      	bne.n	8001ae6 <PosizioneAngolare+0x11e>
			lcd_cursor_pos(1, 1);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f000 f98d 	bl	8001dc0 <lcd_cursor_pos>
			sprintf(buff,"gradi:%.3f" , Degrees);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7fe fcbe 	bl	8000428 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4920      	ldr	r1, [pc, #128]	; (8001b34 <PosizioneAngolare+0x16c>)
 8001ab2:	4821      	ldr	r0, [pc, #132]	; (8001b38 <PosizioneAngolare+0x170>)
 8001ab4:	f003 fc36 	bl	8005324 <siprintf>
			lcd_send_string(buff);
 8001ab8:	481f      	ldr	r0, [pc, #124]	; (8001b38 <PosizioneAngolare+0x170>)
 8001aba:	f000 f96b 	bl	8001d94 <lcd_send_string>
			old_Degrees = Degrees;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]

			lcd_cursor_pos(1, 2);
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 f97b 	bl	8001dc0 <lcd_cursor_pos>
			sprintf(buff,"steps2:%lu" , steps2);
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <PosizioneAngolare+0x168>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	491a      	ldr	r1, [pc, #104]	; (8001b3c <PosizioneAngolare+0x174>)
 8001ad2:	4819      	ldr	r0, [pc, #100]	; (8001b38 <PosizioneAngolare+0x170>)
 8001ad4:	f003 fc26 	bl	8005324 <siprintf>
			lcd_send_string(buff);
 8001ad8:	4817      	ldr	r0, [pc, #92]	; (8001b38 <PosizioneAngolare+0x170>)
 8001ada:	f000 f95b 	bl	8001d94 <lcd_send_string>

			HAL_Delay(300);
 8001ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ae2:	f000 ff81 	bl	80029e8 <HAL_Delay>

		}

		HAL_Delay(300);
 8001ae6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aea:	f000 ff7d 	bl	80029e8 <HAL_Delay>
	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af2:	4813      	ldr	r0, [pc, #76]	; (8001b40 <PosizioneAngolare+0x178>)
 8001af4:	f001 fa2e 	bl	8002f54 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d18d      	bne.n	8001a1a <PosizioneAngolare+0x52>
	}
	HAL_Delay(300);
 8001afe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b02:	f000 ff71 	bl	80029e8 <HAL_Delay>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	3c23d70a 	.word	0x3c23d70a
 8001b14:	20000080 	.word	0x20000080
 8001b18:	43b40000 	.word	0x43b40000
 8001b1c:	20000058 	.word	0x20000058
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	200002bc 	.word	0x200002bc
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	200005f8 	.word	0x200005f8
 8001b30:	200002c0 	.word	0x200002c0
 8001b34:	08007830 	.word	0x08007830
 8001b38:	20000694 	.word	0x20000694
 8001b3c:	0800783c 	.word	0x0800783c
 8001b40:	40010800 	.word	0x40010800

08001b44 <MandrelSpeed>:
extern volatile int menuPosition;
extern int steps;
extern char buff[];
extern TIM_HandleTypeDef htim3;
extern volatile int giri;
void MandrelSpeed() {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
	uint32_t tick = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
	giri = 0;
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <MandrelSpeed+0xc0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	int giri_old = giri;
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <MandrelSpeed+0xc0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]
	int oldMenuPosition = menuPosition;
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <MandrelSpeed+0xc4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60bb      	str	r3, [r7, #8]
	bool stay = true; //boolean to determine if stay or not in the reading cycle
 8001b60:	2301      	movs	r3, #1
 8001b62:	74fb      	strb	r3, [r7, #19]

	lcd_clear();
 8001b64:	f000 f8c2 	bl	8001cec <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f928 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string("*VELOCITA' MANDRINO*");
 8001b70:	4826      	ldr	r0, [pc, #152]	; (8001c0c <MandrelSpeed+0xc8>)
 8001b72:	f000 f90f 	bl	8001d94 <lcd_send_string>
	tick = HAL_GetTick();
 8001b76:	f000 ff2d 	bl	80029d4 <HAL_GetTick>
 8001b7a:	60f8      	str	r0, [r7, #12]

	while (stay) {
 8001b7c:	e039      	b.n	8001bf2 <MandrelSpeed+0xae>
		if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <MandrelSpeed+0xcc>)
 8001b84:	f001 f9e6 	bl	8002f54 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <MandrelSpeed+0x5c>
				== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001b8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b92:	f000 ff29 	bl	80029e8 <HAL_Delay>
			stay = false;
 8001b96:	2300      	movs	r3, #0
 8001b98:	74fb      	strb	r3, [r7, #19]
			menuPosition = oldMenuPosition;
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <MandrelSpeed+0xc4>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GetTick() - tick > 1000L) {
 8001ba0:	f000 ff18 	bl	80029d4 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bae:	d920      	bls.n	8001bf2 <MandrelSpeed+0xae>
			if (giri != giri_old) {
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MandrelSpeed+0xc0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d01b      	beq.n	8001bf2 <MandrelSpeed+0xae>
				lcd_cursor_pos(1, 2);
 8001bba:	2102      	movs	r1, #2
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f000 f8ff 	bl	8001dc0 <lcd_cursor_pos>
				int diff = giri-giri_old;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MandrelSpeed+0xc0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	607b      	str	r3, [r7, #4]
				sprintf(buff, "RPM:%d", diff * 60 );
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <MandrelSpeed+0xd0>)
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <MandrelSpeed+0xd4>)
 8001bdc:	f003 fba2 	bl	8005324 <siprintf>
				lcd_send_string("                    ");
 8001be0:	480e      	ldr	r0, [pc, #56]	; (8001c1c <MandrelSpeed+0xd8>)
 8001be2:	f000 f8d7 	bl	8001d94 <lcd_send_string>
				lcd_send_string(buff);
 8001be6:	480c      	ldr	r0, [pc, #48]	; (8001c18 <MandrelSpeed+0xd4>)
 8001be8:	f000 f8d4 	bl	8001d94 <lcd_send_string>
				giri_old = giri;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <MandrelSpeed+0xc0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
	while (stay) {
 8001bf2:	7cfb      	ldrb	r3, [r7, #19]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1c2      	bne.n	8001b7e <MandrelSpeed+0x3a>
		}


	}

}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200002b4 	.word	0x200002b4
 8001c08:	20000714 	.word	0x20000714
 8001c0c:	08007848 	.word	0x08007848
 8001c10:	40010800 	.word	0x40010800
 8001c14:	08007860 	.word	0x08007860
 8001c18:	20000694 	.word	0x20000694
 8001c1c:	08007868 	.word	0x08007868

08001c20 <LoadFromEEPROM>:


}

void LoadFromEEPROM() //Loads the parameters from the EEPROM and put them in the proper variables
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
	CCW = bytes_to_store[51] == 1 ? true : false;
	NORTON_gearbox = (unsigned char)bytes_to_store[52];
	MaxStepperSpeed = value_otto_ulong(54, bytes_to_store);
	single_step_pitch = screw_pitch / (float)one_turn_screw_steps; //calculates the linear movement (in mm) of the carriage for a single step of the stepper motor
*/
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd(char cmd) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f023 030f 	bic.w	r3, r3, #15
 8001c3c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	f043 030c 	orr.w	r3, r3, #12
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	f043 030c 	orr.w	r3, r3, #12
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8001c62:	7bbb      	ldrb	r3, [r7, #14]
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001c6c:	f107 0208 	add.w	r2, r7, #8
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2304      	movs	r3, #4
 8001c76:	214e      	movs	r1, #78	; 0x4e
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <lcd_send_cmd+0x5c>)
 8001c7a:	f001 fb19 	bl	80032b0 <HAL_I2C_Master_Transmit>
			100);
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000640 	.word	0x20000640

08001c8c <lcd_send_data>:

void lcd_send_data(char data) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f023 030f 	bic.w	r3, r3, #15
 8001c9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	f043 030d 	orr.w	r3, r3, #13
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	f043 0309 	orr.w	r3, r3, #9
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	f043 030d 	orr.w	r3, r3, #13
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
 8001cc4:	f043 0309 	orr.w	r3, r3, #9
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001ccc:	f107 0208 	add.w	r2, r7, #8
 8001cd0:	2364      	movs	r3, #100	; 0x64
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	214e      	movs	r1, #78	; 0x4e
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <lcd_send_data+0x5c>)
 8001cda:	f001 fae9 	bl	80032b0 <HAL_I2C_Master_Transmit>
			100);
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000640 	.word	0x20000640

08001cec <lcd_clear>:

void lcd_clear(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff ff9a 	bl	8001c2c <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	e005      	b.n	8001d0a <lcd_clear+0x1e>
		lcd_send_data(' ');
 8001cfe:	2020      	movs	r0, #32
 8001d00:	f7ff ffc4 	bl	8001c8c <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b63      	cmp	r3, #99	; 0x63
 8001d0e:	ddf6      	ble.n	8001cfe <lcd_clear+0x12>
	}
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <lcd_init>:

void lcd_init(void) {
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d1e:	2032      	movs	r0, #50	; 0x32
 8001d20:	f000 fe62 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d24:	2030      	movs	r0, #48	; 0x30
 8001d26:	f7ff ff81 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d2a:	2005      	movs	r0, #5
 8001d2c:	f000 fe5c 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d30:	2030      	movs	r0, #48	; 0x30
 8001d32:	f7ff ff7b 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 fe56 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d3c:	2030      	movs	r0, #48	; 0x30
 8001d3e:	f7ff ff75 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(10);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f000 fe50 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8001d48:	2020      	movs	r0, #32
 8001d4a:	f7ff ff6f 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(10);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 fe4a 	bl	80029e8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d54:	2028      	movs	r0, #40	; 0x28
 8001d56:	f7ff ff69 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fe44 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001d60:	2008      	movs	r0, #8
 8001d62:	f7ff ff63 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fe3e 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff ff5d 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fe38 	bl	80029e8 <HAL_Delay>
	HAL_Delay(1);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 fe35 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001d7e:	2006      	movs	r0, #6
 8001d80:	f7ff ff54 	bl	8001c2c <lcd_send_cmd>
	HAL_Delay(1);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f000 fe2f 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001d8a:	200c      	movs	r0, #12
 8001d8c:	f7ff ff4e 	bl	8001c2c <lcd_send_cmd>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <lcd_send_string>:

void lcd_send_string(char *str) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	while (*str)
 8001d9c:	e006      	b.n	8001dac <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff70 	bl	8001c8c <lcd_send_data>
	while (*str)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f4      	bne.n	8001d9e <lcd_send_string+0xa>
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <lcd_cursor_pos>:
// -------------------------------------------
// Set cursor position
// -------------------------------------------
void lcd_cursor_pos(char col, char row) {
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460a      	mov	r2, r1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <lcd_cursor_pos+0x58>)
 8001dd2:	f107 040c 	add.w	r4, r7, #12
 8001dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > LCD_ROWS) {
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d901      	bls.n	8001de6 <lcd_cursor_pos+0x26>
			row = LCD_ROWS-1;    // we count rows starting w/0
 8001de2:	2303      	movs	r3, #3
 8001de4:	71bb      	strb	r3, [r7, #6]
		}
	char cmd = 0x80|(col + (char)row_offsets[(int)row]);
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	f107 0220 	add.w	r2, r7, #32
 8001dee:	4413      	add	r3, r2
 8001df0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	77fb      	strb	r3, [r7, #31]
	lcd_send_cmd(cmd);
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff0f 	bl	8001c2c <lcd_send_cmd>
}
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	08007880 	.word	0x08007880

08001e1c <lcd_send_char>:

void lcd_send_char(char chr) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(chr);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff2f 	bl	8001c8c <lcd_send_data>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d104      	bne.n	8001e54 <HAL_TIM_PeriodElapsedCallback+0x1c>
	    {
		HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4804      	ldr	r0, [pc, #16]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e50:	f001 f8af 	bl	8002fb2 <HAL_GPIO_TogglePin>
	    }

}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	40011000 	.word	0x40011000

08001e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e6a:	f000 fd5b 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6e:	f000 f849 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e72:	f000 f963 	bl	800213c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e76:	f000 f88b 	bl	8001f90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001e7a:	f000 f8b7 	bl	8001fec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e7e:	f000 f909 	bl	8002094 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 8001e82:	213c      	movs	r1, #60	; 0x3c
 8001e84:	481d      	ldr	r0, [pc, #116]	; (8001efc <main+0x98>)
 8001e86:	f002 fa13 	bl	80042b0 <HAL_TIM_Encoder_Start_IT>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <main+0x30>
	  Error_Handler();
 8001e90:	f000 f9e8 	bl	8002264 <Error_Handler>
  if (HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL) != HAL_OK)
 8001e94:	213c      	movs	r1, #60	; 0x3c
 8001e96:	481a      	ldr	r0, [pc, #104]	; (8001f00 <main+0x9c>)
 8001e98:	f002 fa0a 	bl	80042b0 <HAL_TIM_Encoder_Start_IT>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <main+0x42>
    	  Error_Handler();
 8001ea2:	f000 f9df 	bl	8002264 <Error_Handler>
  if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8001ea6:	4816      	ldr	r0, [pc, #88]	; (8001f00 <main+0x9c>)
 8001ea8:	f002 f90e 	bl	80040c8 <HAL_TIM_Base_Start_IT>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <main+0x52>
    	  Error_Handler();
 8001eb2:	f000 f9d7 	bl	8002264 <Error_Handler>



//   WriteToEEPROM();
  LoadFromEEPROM();
 8001eb6:	f7ff feb3 	bl	8001c20 <LoadFromEEPROM>
	lcd_init();
 8001eba:	f7ff ff2e 	bl	8001d1a <lcd_init>
				  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

				    scelta = Principale();
 8001ebe:	f000 f9d7 	bl	8002270 <Principale>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
				    switch (scelta) {
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b06      	cmp	r3, #6
 8001eca:	d00b      	beq.n	8001ee4 <main+0x80>
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	dcf6      	bgt.n	8001ebe <main+0x5a>
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d002      	beq.n	8001eda <main+0x76>
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d00a      	beq.n	8001eee <main+0x8a>
 8001ed8:	e00e      	b.n	8001ef8 <main+0x94>
				    case 1: lcd_clear(); Impostazioni(); break;
 8001eda:	f7ff ff07 	bl	8001cec <lcd_clear>
 8001ede:	f7ff f8a7 	bl	8001030 <Impostazioni>
 8001ee2:	e009      	b.n	8001ef8 <main+0x94>
				    case 6: lcd_clear(); PosizioneAngolare(); break;
 8001ee4:	f7ff ff02 	bl	8001cec <lcd_clear>
 8001ee8:	f7ff fd6e 	bl	80019c8 <PosizioneAngolare>
 8001eec:	e004      	b.n	8001ef8 <main+0x94>
				    case 5: lcd_clear(); MandrelSpeed(); break;
 8001eee:	f7ff fefd 	bl	8001cec <lcd_clear>
 8001ef2:	f7ff fe27 	bl	8001b44 <MandrelSpeed>
 8001ef6:	bf00      	nop
				    scelta = Principale();
 8001ef8:	e7e1      	b.n	8001ebe <main+0x5a>
 8001efa:	bf00      	nop
 8001efc:	200006ac 	.word	0x200006ac
 8001f00:	200005f8 	.word	0x200005f8

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b090      	sub	sp, #64	; 0x40
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	2228      	movs	r2, #40	; 0x28
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fce8 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
 8001f24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 fcb5 	bl	80038bc <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f58:	f000 f984 	bl	8002264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f60:	2302      	movs	r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2102      	movs	r1, #2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 ff20 	bl	8003dbc <HAL_RCC_ClockConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f82:	f000 f96f 	bl	8002264 <Error_Handler>
  }
}
 8001f86:	bf00      	nop
 8001f88:	3740      	adds	r7, #64	; 0x40
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <MX_I2C1_Init+0x54>)
 8001f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <MX_I2C1_Init+0x58>)
 8001f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_I2C1_Init+0x50>)
 8001fce:	f001 f82b 	bl	8003028 <HAL_I2C_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd8:	f000 f944 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000640 	.word	0x20000640
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	000186a0 	.word	0x000186a0

08001fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fc74 	bl	80048e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <MX_TIM3_Init+0xa0>)
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <MX_TIM3_Init+0xa4>)
 800200c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MX_TIM3_Init+0xa0>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <MX_TIM3_Init+0xa0>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1599;
 800201a:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MX_TIM3_Init+0xa0>)
 800201c:	f240 623f 	movw	r2, #1599	; 0x63f
 8002020:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <MX_TIM3_Init+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <MX_TIM3_Init+0xa0>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800202e:	2303      	movs	r3, #3
 8002030:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002032:	2302      	movs	r3, #2
 8002034:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002036:	2301      	movs	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 800203e:	2303      	movs	r3, #3
 8002040:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_TIM3_Init+0xa0>)
 800205a:	f002 f887 	bl	800416c <HAL_TIM_Encoder_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002064:	f000 f8fe 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_TIM3_Init+0xa0>)
 8002076:	f002 fb7b 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002080:	f000 f8f0 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	3730      	adds	r7, #48	; 0x30
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200006ac 	.word	0x200006ac
 8002090:	40000400 	.word	0x40000400

08002094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2224      	movs	r2, #36	; 0x24
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fc20 	bl	80048e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020b2:	4a21      	ldr	r2, [pc, #132]	; (8002138 <MX_TIM4_Init+0xa4>)
 80020b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020be:	2210      	movs	r2, #16
 80020c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM4_Init+0xa0>)
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020d6:	2303      	movs	r3, #3
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020da:	2302      	movs	r3, #2
 80020dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020de:	2301      	movs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ee:	2301      	movs	r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <MX_TIM4_Init+0xa0>)
 8002102:	f002 f833 	bl	800416c <HAL_TIM_Encoder_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800210c:	f000 f8aa 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_TIM4_Init+0xa0>)
 800211e:	f002 fb27 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002128:	f000 f89c 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200005f8 	.word	0x200005f8
 8002138:	40000800 	.word	0x40000800

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <MX_GPIO_Init+0x114>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <MX_GPIO_Init+0x114>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <MX_GPIO_Init+0x114>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <MX_GPIO_Init+0x114>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a38      	ldr	r2, [pc, #224]	; (8002250 <MX_GPIO_Init+0x114>)
 800216e:	f043 0320 	orr.w	r3, r3, #32
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <MX_GPIO_Init+0x114>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <MX_GPIO_Init+0x114>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a32      	ldr	r2, [pc, #200]	; (8002250 <MX_GPIO_Init+0x114>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <MX_GPIO_Init+0x114>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <MX_GPIO_Init+0x114>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <MX_GPIO_Init+0x114>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <MX_GPIO_Init+0x114>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b6:	4827      	ldr	r0, [pc, #156]	; (8002254 <MX_GPIO_Init+0x118>)
 80021b8:	f000 fee3 	bl	8002f82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	481f      	ldr	r0, [pc, #124]	; (8002254 <MX_GPIO_Init+0x118>)
 80021d6:	f000 fd39 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_RESET_Pin MENU_BUTTON_Pin */
  GPIO_InitStruct.Pin = MENU_RESET_Pin|MENU_BUTTON_Pin;
 80021da:	f248 0320 	movw	r3, #32800	; 0x8020
 80021de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4619      	mov	r1, r3
 80021ee:	481a      	ldr	r0, [pc, #104]	; (8002258 <MX_GPIO_Init+0x11c>)
 80021f0:	f000 fd2c 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_ESC_Pin */
  GPIO_InitStruct.Pin = MENU_ESC_Pin;
 80021f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_ESC_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4619      	mov	r1, r3
 8002208:	4814      	ldr	r0, [pc, #80]	; (800225c <MX_GPIO_Init+0x120>)
 800220a:	f000 fd1f 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_ENCODER_A_Pin MENU_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = MENU_ENCODER_A_Pin|MENU_ENCODER_B_Pin;
 800220e:	2318      	movs	r3, #24
 8002210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_GPIO_Init+0x124>)
 8002214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	4619      	mov	r1, r3
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <MX_GPIO_Init+0x11c>)
 8002222:	f000 fd13 	bl	8002c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2009      	movs	r0, #9
 800222c:	f000 fcd7 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002230:	2009      	movs	r0, #9
 8002232:	f000 fcf0 	bl	8002c16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	200a      	movs	r0, #10
 800223c:	f000 fccf 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002240:	200a      	movs	r0, #10
 8002242:	f000 fce8 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	40011000 	.word	0x40011000
 8002258:	40010c00 	.word	0x40010c00
 800225c:	40010800 	.word	0x40010800
 8002260:	10310000 	.word	0x10310000

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <Principale>:
		"Filettatura", "Movimento Libero",  "Velocita' mandrino","Posizione angolare" };

extern int timeToggle;
extern int menuPosition;

char Principale() {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	71fb      	strb	r3, [r7, #7]
	unsigned char previous = 6;
 800227a:	2306      	movs	r3, #6
 800227c:	71bb      	strb	r3, [r7, #6]
	unsigned char next = 2;
 800227e:	2302      	movs	r3, #2
 8002280:	717b      	strb	r3, [r7, #5]
	bool stay = true;
 8002282:	2301      	movs	r3, #1
 8002284:	713b      	strb	r3, [r7, #4]
	bool innerstay = true;
 8002286:	2301      	movs	r3, #1
 8002288:	70fb      	strb	r3, [r7, #3]

	lcd_clear();
 800228a:	f7ff fd2f 	bl	8001cec <lcd_clear>
	lcd_cursor_pos(0, 2);
 800228e:	2102      	movs	r1, #2
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff fd95 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(">");
 8002296:	4851      	ldr	r0, [pc, #324]	; (80023dc <Principale+0x16c>)
 8002298:	f7ff fd7c 	bl	8001d94 <lcd_send_string>
	lcd_cursor_pos(19, 2);
 800229c:	2102      	movs	r1, #2
 800229e:	2013      	movs	r0, #19
 80022a0:	f7ff fd8e 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_char('<');
 80022a4:	203c      	movs	r0, #60	; 0x3c
 80022a6:	f7ff fdb9 	bl	8001e1c <lcd_send_char>
	lcd_cursor_pos(0, 0);
 80022aa:	2100      	movs	r1, #0
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fd87 	bl	8001dc0 <lcd_cursor_pos>
	lcd_send_string(MenuPrincipale[0]);
 80022b2:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <Principale+0x170>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fd6c 	bl	8001d94 <lcd_send_string>
	menuPosition = 1;
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <Principale+0x174>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

	while (stay) {
 80022c2:	e082      	b.n	80023ca <Principale+0x15a>
		// LED ON
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//HAL_Delay(timeToggle);

		switch (current) {
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <Principale+0x60>
 80022ca:	2b07      	cmp	r3, #7
 80022cc:	d003      	beq.n	80022d6 <Principale+0x66>
 80022ce:	e005      	b.n	80022dc <Principale+0x6c>
		case 0:
			current = 6;
 80022d0:	2306      	movs	r3, #6
 80022d2:	71fb      	strb	r3, [r7, #7]
			break;
 80022d4:	e002      	b.n	80022dc <Principale+0x6c>
		case 7:
			current = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	71fb      	strb	r3, [r7, #7]
			break;
 80022da:	bf00      	nop
		}
		previous = current - 1;
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	3b01      	subs	r3, #1
 80022e0:	71bb      	strb	r3, [r7, #6]
		next = current + 1;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	3301      	adds	r3, #1
 80022e6:	717b      	strb	r3, [r7, #5]
		if (previous == 0)
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <Principale+0x82>
			previous = 6;
 80022ee:	2306      	movs	r3, #6
 80022f0:	71bb      	strb	r3, [r7, #6]
		if (next == 7)
 80022f2:	797b      	ldrb	r3, [r7, #5]
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d101      	bne.n	80022fc <Principale+0x8c>
			next = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	717b      	strb	r3, [r7, #5]

		lcd_cursor_pos(1, 1);
 80022fc:	2101      	movs	r1, #1
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fd5e 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002304:	4838      	ldr	r0, [pc, #224]	; (80023e8 <Principale+0x178>)
 8002306:	f7ff fd45 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 1);
 800230a:	2101      	movs	r1, #1
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fd57 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[previous]);
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <Principale+0x170>)
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fd3a 	bl	8001d94 <lcd_send_string>

		lcd_cursor_pos(1, 2);
 8002320:	2102      	movs	r1, #2
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff fd4c 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002328:	482f      	ldr	r0, [pc, #188]	; (80023e8 <Principale+0x178>)
 800232a:	f7ff fd33 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 2);
 800232e:	2102      	movs	r1, #2
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff fd45 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[current]);
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <Principale+0x170>)
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fd28 	bl	8001d94 <lcd_send_string>

		lcd_cursor_pos(1, 3);
 8002344:	2103      	movs	r1, #3
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff fd3a 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string("                  ");
 800234c:	4826      	ldr	r0, [pc, #152]	; (80023e8 <Principale+0x178>)
 800234e:	f7ff fd21 	bl	8001d94 <lcd_send_string>
		lcd_cursor_pos(1, 3);
 8002352:	2103      	movs	r1, #3
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff fd33 	bl	8001dc0 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[next]);
 800235a:	797b      	ldrb	r3, [r7, #5]
 800235c:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <Principale+0x170>)
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fd16 	bl	8001d94 <lcd_send_string>

		innerstay = true;
 8002368:	2301      	movs	r3, #1
 800236a:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 800236c:	e026      	b.n	80023bc <Principale+0x14c>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 800236e:	2120      	movs	r1, #32
 8002370:	481e      	ldr	r0, [pc, #120]	; (80023ec <Principale+0x17c>)
 8002372:	f000 fdef 	bl	8002f54 <HAL_GPIO_ReadPin>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <Principale+0x11c>
					== GPIO_PIN_RESET) {
				stay = false;
 800237c:	2300      	movs	r3, #0
 800237e:	713b      	strb	r3, [r7, #4]
				innerstay = false;
 8002380:	2300      	movs	r3, #0
 8002382:	70fb      	strb	r3, [r7, #3]
				HAL_Delay(300);
 8002384:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002388:	f000 fb2e 	bl	80029e8 <HAL_Delay>
			}
			if (current != menuPosition) {
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <Principale+0x174>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d012      	beq.n	80023bc <Principale+0x14c>
				if (menuPosition >6) menuPosition = 1;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <Principale+0x174>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b06      	cmp	r3, #6
 800239c:	dd02      	ble.n	80023a4 <Principale+0x134>
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <Principale+0x174>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1) menuPosition = 6;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <Principale+0x174>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	dc02      	bgt.n	80023b2 <Principale+0x142>
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <Principale+0x174>)
 80023ae:	2206      	movs	r2, #6
 80023b0:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <Principale+0x174>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
				innerstay = false;
 80023b8:	2300      	movs	r3, #0
 80023ba:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1d5      	bne.n	800236e <Principale+0xfe>
			/*  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
							 	  HAL_Delay(1000);
							 	  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
							 	 HAL_Delay(1000);*/
		}
		HAL_Delay(300);
 80023c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023c6:	f000 fb0f 	bl	80029e8 <HAL_Delay>
	while (stay) {
 80023ca:	793b      	ldrb	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af79 	bne.w	80022c4 <Principale+0x54>
	}

	return current;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800790c 	.word	0x0800790c
 80023e0:	200000a0 	.word	0x200000a0
 80023e4:	20000714 	.word	0x20000714
 80023e8:	08007910 	.word	0x08007910
 80023ec:	40010c00 	.word	0x40010c00

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_MspInit+0x5c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_MspInit+0x5c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_MspInit+0x60>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_MspInit+0x60>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000

08002454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_I2C_MspInit+0x90>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d132      	bne.n	80024da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800248c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002492:	2312      	movs	r3, #18
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <HAL_I2C_MspInit+0x98>)
 80024a2:	f000 fbd3 	bl	8002c4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_I2C_MspInit+0x9c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_I2C_MspInit+0x9c>)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 80024c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_I2C_MspInit+0x94>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40005400 	.word	0x40005400
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	40010000 	.word	0x40010000

080024f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d12c      	bne.n	800256e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4a30      	ldr	r2, [pc, #192]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	61d3      	str	r3, [r2, #28]
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CHANNEL_A_Pin|CHANNEL_B_Pin;
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254c:	2301      	movs	r3, #1
 800254e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4619      	mov	r1, r3
 8002556:	4822      	ldr	r0, [pc, #136]	; (80025e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002558:	f000 fb78 	bl	8002c4c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2100      	movs	r1, #0
 8002560:	201d      	movs	r0, #29
 8002562:	f000 fb3c 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002566:	201d      	movs	r0, #29
 8002568:	f000 fb55 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800256c:	e030      	b.n	80025d0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d12b      	bne.n	80025d0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	61d3      	str	r3, [r2, #28]
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 80025a8:	23c0      	movs	r3, #192	; 0xc0
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	4619      	mov	r1, r3
 80025ba:	480b      	ldr	r0, [pc, #44]	; (80025e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80025bc:	f000 fb46 	bl	8002c4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2100      	movs	r1, #0
 80025c4:	201e      	movs	r0, #30
 80025c6:	f000 fb0a 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025ca:	201e      	movs	r0, #30
 80025cc:	f000 fb23 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40010c00 	.word	0x40010c00

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80025f0:	e7fe      	b.n	80025f0 <NMI_Handler+0x4>

080025f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <HardFault_Handler+0x4>

080025f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <MemManage_Handler+0x4>

080025fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <UsageFault_Handler+0x4>

0800260a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002632:	f000 f9bd 	bl	80029b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 8002642:	2108      	movs	r1, #8
 8002644:	4817      	ldr	r0, [pc, #92]	; (80026a4 <EXTI3_IRQHandler+0x68>)
 8002646:	f000 fc85 	bl	8002f54 <HAL_GPIO_ReadPin>
 800264a:	4603      	mov	r3, r0
 800264c:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 800264e:	2110      	movs	r1, #16
 8002650:	4814      	ldr	r0, [pc, #80]	; (80026a4 <EXTI3_IRQHandler+0x68>)
 8002652:	f000 fc7f 	bl	8002f54 <HAL_GPIO_ReadPin>
 8002656:	4603      	mov	r3, r0
 8002658:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4313      	orrs	r3, r2
 8002662:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <EXTI3_IRQHandler+0x6c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4313      	orrs	r3, r2
 800266e:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d104      	bne.n	8002680 <EXTI3_IRQHandler+0x44>
		menuPosition++;
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <EXTI3_IRQHandler+0x70>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <EXTI3_IRQHandler+0x70>)
 800267e:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d104      	bne.n	8002690 <EXTI3_IRQHandler+0x54>
		menuPosition--;
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <EXTI3_IRQHandler+0x70>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3b01      	subs	r3, #1
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <EXTI3_IRQHandler+0x70>)
 800268e:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <EXTI3_IRQHandler+0x6c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_A_Pin);
 8002696:	2008      	movs	r0, #8
 8002698:	f000 fca4 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010c00 	.word	0x40010c00
 80026a8:	200006f8 	.word	0x200006f8
 80026ac:	20000714 	.word	0x20000714

080026b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 80026b6:	2108      	movs	r1, #8
 80026b8:	4817      	ldr	r0, [pc, #92]	; (8002718 <EXTI4_IRQHandler+0x68>)
 80026ba:	f000 fc4b 	bl	8002f54 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 80026c2:	2110      	movs	r1, #16
 80026c4:	4814      	ldr	r0, [pc, #80]	; (8002718 <EXTI4_IRQHandler+0x68>)
 80026c6:	f000 fc45 	bl	8002f54 <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <EXTI4_IRQHandler+0x6c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d104      	bne.n	80026f4 <EXTI4_IRQHandler+0x44>
		menuPosition++;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <EXTI4_IRQHandler+0x70>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <EXTI4_IRQHandler+0x70>)
 80026f2:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d104      	bne.n	8002704 <EXTI4_IRQHandler+0x54>
		menuPosition--;
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <EXTI4_IRQHandler+0x70>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3b01      	subs	r3, #1
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <EXTI4_IRQHandler+0x70>)
 8002702:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <EXTI4_IRQHandler+0x6c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_B_Pin);
 800270a:	2010      	movs	r0, #16
 800270c:	f000 fc6a 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40010c00 	.word	0x40010c00
 800271c:	200006f8 	.word	0x200006f8
 8002720:	20000714 	.word	0x20000714

08002724 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <TIM3_IRQHandler+0x10>)
 800272a:	f001 fe6f 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200006ac 	.word	0x200006ac

08002738 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM4_IRQHandler+0x10>)
 800273e:	f001 fe65 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200005f8 	.word	0x200005f8

0800274c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
	return 1;
 8002750:	2301      	movs	r3, #1
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <_kill>:

int _kill(int pid, int sig)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002764:	f002 f874 	bl	8004850 <__errno>
 8002768:	4603      	mov	r3, r0
 800276a:	2216      	movs	r2, #22
 800276c:	601a      	str	r2, [r3, #0]
	return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_exit>:

void _exit (int status)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ffe7 	bl	800275a <_kill>
	while (1) {}		/* Make sure we hang here */
 800278c:	e7fe      	b.n	800278c <_exit+0x12>

0800278e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e00a      	b.n	80027b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027a0:	f3af 8000 	nop.w
 80027a4:	4601      	mov	r1, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60ba      	str	r2, [r7, #8]
 80027ac:	b2ca      	uxtb	r2, r1
 80027ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	dbf0      	blt.n	80027a0 <_read+0x12>
	}

return len;
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e009      	b.n	80027ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	60ba      	str	r2, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbf1      	blt.n	80027da <_write+0x12>
	}
	return len;
 80027f6:	687b      	ldr	r3, [r7, #4]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_close>:

int _close(int file)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	return -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002826:	605a      	str	r2, [r3, #4]
	return 0;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <_isatty>:

int _isatty(int file)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	return 1;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
	return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f001 ffde 	bl	8004850 <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20005000 	.word	0x20005000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	200002c4 	.word	0x200002c4
 80028c8:	20000730 	.word	0x20000730

080028cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028fe:	f7ff ffe5 	bl	80028cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002902:	f001 ffab 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002906:	f7ff faad 	bl	8001e64 <main>
  bx lr
 800290a:	4770      	bx	lr
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8002914:	08007d34 	.word	0x08007d34
  ldr r2, =_sbss
 8002918:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 800291c:	20000730 	.word	0x20000730

08002920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_2_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_Init+0x28>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_Init+0x28>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002934:	2003      	movs	r0, #3
 8002936:	f000 f947 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293a:	200f      	movs	r0, #15
 800293c:	f000 f808 	bl	8002950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002940:	f7ff fd56 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_InitTick+0x54>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_InitTick+0x58>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002966:	fbb3 f3f1 	udiv	r3, r3, r1
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f95f 	bl	8002c32 <HAL_SYSTICK_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00e      	b.n	800299c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d80a      	bhi.n	800299a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f000 f927 	bl	8002bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <HAL_InitTick+0x5c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200000bc 	.word	0x200000bc
 80029a8:	200000c4 	.word	0x200000c4
 80029ac:	200000c0 	.word	0x200000c0

080029b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_IncTick+0x1c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_IncTick+0x20>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_IncTick+0x20>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	200000c4 	.word	0x200000c4
 80029d0:	2000071c 	.word	0x2000071c

080029d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_GetTick+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	2000071c 	.word	0x2000071c

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffe0 	bl	80029d4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200000c4 	.word	0x200000c4

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <__NVIC_EnableIRQ+0x34>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff90 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff2d 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff42 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff90 	bl	8002b20 <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5f 	bl	8002acc <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff35 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa2 	bl	8002b84 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b08b      	sub	sp, #44	; 0x2c
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5e:	e169      	b.n	8002f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c60:	2201      	movs	r2, #1
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8158 	bne.w	8002f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a9a      	ldr	r2, [pc, #616]	; (8002eec <HAL_GPIO_Init+0x2a0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d05e      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002c88:	4a98      	ldr	r2, [pc, #608]	; (8002eec <HAL_GPIO_Init+0x2a0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d875      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002c8e:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <HAL_GPIO_Init+0x2a4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d058      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002c94:	4a96      	ldr	r2, [pc, #600]	; (8002ef0 <HAL_GPIO_Init+0x2a4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d86f      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002c9a:	4a96      	ldr	r2, [pc, #600]	; (8002ef4 <HAL_GPIO_Init+0x2a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d052      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a94      	ldr	r2, [pc, #592]	; (8002ef4 <HAL_GPIO_Init+0x2a8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d869      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002ca6:	4a94      	ldr	r2, [pc, #592]	; (8002ef8 <HAL_GPIO_Init+0x2ac>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04c      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002cac:	4a92      	ldr	r2, [pc, #584]	; (8002ef8 <HAL_GPIO_Init+0x2ac>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d863      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cb2:	4a92      	ldr	r2, [pc, #584]	; (8002efc <HAL_GPIO_Init+0x2b0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d046      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a90      	ldr	r2, [pc, #576]	; (8002efc <HAL_GPIO_Init+0x2b0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d85d      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d82a      	bhi.n	8002d18 <HAL_GPIO_Init+0xcc>
 8002cc2:	2b12      	cmp	r3, #18
 8002cc4:	d859      	bhi.n	8002d7a <HAL_GPIO_Init+0x12e>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <HAL_GPIO_Init+0x80>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002d47 	.word	0x08002d47
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d33 	.word	0x08002d33
 8002cd8:	08002d75 	.word	0x08002d75
 8002cdc:	08002d7b 	.word	0x08002d7b
 8002ce0:	08002d7b 	.word	0x08002d7b
 8002ce4:	08002d7b 	.word	0x08002d7b
 8002ce8:	08002d7b 	.word	0x08002d7b
 8002cec:	08002d7b 	.word	0x08002d7b
 8002cf0:	08002d7b 	.word	0x08002d7b
 8002cf4:	08002d7b 	.word	0x08002d7b
 8002cf8:	08002d7b 	.word	0x08002d7b
 8002cfc:	08002d7b 	.word	0x08002d7b
 8002d00:	08002d7b 	.word	0x08002d7b
 8002d04:	08002d7b 	.word	0x08002d7b
 8002d08:	08002d7b 	.word	0x08002d7b
 8002d0c:	08002d7b 	.word	0x08002d7b
 8002d10:	08002d29 	.word	0x08002d29
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_GPIO_Init+0x2b4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d1e:	e02c      	b.n	8002d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	623b      	str	r3, [r7, #32]
          break;
 8002d26:	e029      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	623b      	str	r3, [r7, #32]
          break;
 8002d30:	e024      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	3308      	adds	r3, #8
 8002d38:	623b      	str	r3, [r7, #32]
          break;
 8002d3a:	e01f      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	330c      	adds	r3, #12
 8002d42:	623b      	str	r3, [r7, #32]
          break;
 8002d44:	e01a      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d4e:	2304      	movs	r3, #4
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e013      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	611a      	str	r2, [r3, #16]
          break;
 8002d66:	e009      	b.n	8002d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	615a      	str	r2, [r3, #20]
          break;
 8002d72:	e003      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
          break;
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x130>
          break;
 8002d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d801      	bhi.n	8002d86 <HAL_GPIO_Init+0x13a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_Init+0x13e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d802      	bhi.n	8002d98 <HAL_GPIO_Init+0x14c>
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	e002      	b.n	8002d9e <HAL_GPIO_Init+0x152>
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	3b08      	subs	r3, #8
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	210f      	movs	r1, #15
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80b1 	beq.w	8002f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6193      	str	r3, [r2, #24]
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2bc>)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	3302      	adds	r3, #2
 8002dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <HAL_GPIO_Init+0x2c0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_GPIO_Init+0x1ec>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <HAL_GPIO_Init+0x2c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00d      	beq.n	8002e34 <HAL_GPIO_Init+0x1e8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3e      	ldr	r2, [pc, #248]	; (8002f14 <HAL_GPIO_Init+0x2c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <HAL_GPIO_Init+0x1e4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3d      	ldr	r2, [pc, #244]	; (8002f18 <HAL_GPIO_Init+0x2cc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_GPIO_Init+0x1e0>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e004      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e002      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_GPIO_Init+0x1ee>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	f002 0203 	and.w	r2, r2, #3
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	4093      	lsls	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e4a:	492f      	ldr	r1, [pc, #188]	; (8002f08 <HAL_GPIO_Init+0x2bc>)
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	492c      	ldr	r1, [pc, #176]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4928      	ldr	r1, [pc, #160]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e8c:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	491e      	ldr	r1, [pc, #120]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	4918      	ldr	r1, [pc, #96]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4914      	ldr	r1, [pc, #80]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d021      	beq.n	8002f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60cb      	str	r3, [r1, #12]
 8002ee8:	e021      	b.n	8002f2e <HAL_GPIO_Init+0x2e2>
 8002eea:	bf00      	nop
 8002eec:	10320000 	.word	0x10320000
 8002ef0:	10310000 	.word	0x10310000
 8002ef4:	10220000 	.word	0x10220000
 8002ef8:	10210000 	.word	0x10210000
 8002efc:	10120000 	.word	0x10120000
 8002f00:	10110000 	.word	0x10110000
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	40010c00 	.word	0x40010c00
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40011400 	.word	0x40011400
 8002f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	4909      	ldr	r1, [pc, #36]	; (8002f50 <HAL_GPIO_Init+0x304>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	3301      	adds	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f ae8e 	bne.w	8002c60 <HAL_GPIO_Init+0x14>
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	372c      	adds	r7, #44	; 0x2c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e001      	b.n	8002f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f92:	787b      	ldrb	r3, [r7, #1]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f9e:	e003      	b.n	8002fa8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	611a      	str	r2, [r3, #16]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	041a      	lsls	r2, r3, #16
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	611a      	str	r2, [r3, #16]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f806 	bl	8003014 <HAL_GPIO_EXTI_Callback>
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e12b      	b.n	8003292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fa00 	bl	8002454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800308c:	f000 ffea 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8003090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a81      	ldr	r2, [pc, #516]	; (800329c <HAL_I2C_Init+0x274>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d807      	bhi.n	80030ac <HAL_I2C_Init+0x84>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a80      	ldr	r2, [pc, #512]	; (80032a0 <HAL_I2C_Init+0x278>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf94      	ite	ls
 80030a4:	2301      	movls	r3, #1
 80030a6:	2300      	movhi	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e006      	b.n	80030ba <HAL_I2C_Init+0x92>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a7d      	ldr	r2, [pc, #500]	; (80032a4 <HAL_I2C_Init+0x27c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	bf94      	ite	ls
 80030b4:	2301      	movls	r3, #1
 80030b6:	2300      	movhi	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0e7      	b.n	8003292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a78      	ldr	r2, [pc, #480]	; (80032a8 <HAL_I2C_Init+0x280>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0c9b      	lsrs	r3, r3, #18
 80030cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_I2C_Init+0x274>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d802      	bhi.n	80030fc <HAL_I2C_Init+0xd4>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3301      	adds	r3, #1
 80030fa:	e009      	b.n	8003110 <HAL_I2C_Init+0xe8>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	4a69      	ldr	r2, [pc, #420]	; (80032ac <HAL_I2C_Init+0x284>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	3301      	adds	r3, #1
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	495c      	ldr	r1, [pc, #368]	; (800329c <HAL_I2C_Init+0x274>)
 800312c:	428b      	cmp	r3, r1
 800312e:	d819      	bhi.n	8003164 <HAL_I2C_Init+0x13c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e59      	subs	r1, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fbb1 f3f3 	udiv	r3, r1, r3
 800313e:	1c59      	adds	r1, r3, #1
 8003140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003144:	400b      	ands	r3, r1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_I2C_Init+0x138>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e59      	subs	r1, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fbb1 f3f3 	udiv	r3, r1, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	e051      	b.n	8003204 <HAL_I2C_Init+0x1dc>
 8003160:	2304      	movs	r3, #4
 8003162:	e04f      	b.n	8003204 <HAL_I2C_Init+0x1dc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <HAL_I2C_Init+0x168>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e012      	b.n	80031b6 <HAL_I2C_Init+0x18e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e58      	subs	r0, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	0099      	lsls	r1, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Init+0x196>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e022      	b.n	8003204 <HAL_I2C_Init+0x1dc>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10e      	bne.n	80031e4 <HAL_I2C_Init+0x1bc>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e58      	subs	r0, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	440b      	add	r3, r1
 80031d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_Init+0x1dc>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	0099      	lsls	r1, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	6809      	ldr	r1, [r1, #0]
 8003208:	4313      	orrs	r3, r2
 800320a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6911      	ldr	r1, [r2, #16]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68d2      	ldr	r2, [r2, #12]
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	430b      	orrs	r3, r1
 8003246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	000186a0 	.word	0x000186a0
 80032a0:	001e847f 	.word	0x001e847f
 80032a4:	003d08ff 	.word	0x003d08ff
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	10624dd3 	.word	0x10624dd3

080032b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	461a      	mov	r2, r3
 80032bc:	460b      	mov	r3, r1
 80032be:	817b      	strh	r3, [r7, #10]
 80032c0:	4613      	mov	r3, r2
 80032c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff fb86 	bl	80029d4 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	f040 80e0 	bne.w	8003498 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2319      	movs	r3, #25
 80032de:	2201      	movs	r2, #1
 80032e0:	4970      	ldr	r1, [pc, #448]	; (80034a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f964 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0d3      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_I2C_Master_Transmit+0x50>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0cc      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d007      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2221      	movs	r2, #33	; 0x21
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2210      	movs	r2, #16
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	893a      	ldrh	r2, [r7, #8]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003368:	8979      	ldrh	r1, [r7, #10]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f89c 	bl	80034ac <I2C_MasterRequestWrite>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e08d      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003394:	e066      	b.n	8003464 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6a39      	ldr	r1, [r7, #32]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f9de 	bl	800375c <I2C_WaitOnTXEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d107      	bne.n	80033be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06b      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d11b      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x188>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	6a39      	ldr	r1, [r7, #32]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f9ce 	bl	80037de <I2C_WaitOnBTFFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	2b04      	cmp	r3, #4
 800344e:	d107      	bne.n	8003460 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e01a      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d194      	bne.n	8003396 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	00100002 	.word	0x00100002
 80034a8:	ffff0000 	.word	0xffff0000

080034ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	460b      	mov	r3, r1
 80034ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d006      	beq.n	80034d6 <I2C_MasterRequestWrite+0x2a>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d003      	beq.n	80034d6 <I2C_MasterRequestWrite+0x2a>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d4:	d108      	bne.n	80034e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00b      	b.n	8003500 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	2b12      	cmp	r3, #18
 80034ee:	d107      	bne.n	8003500 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f84f 	bl	80035b0 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	d103      	bne.n	8003530 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e035      	b.n	80035a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353c:	d108      	bne.n	8003550 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	e01b      	b.n	8003588 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003550:	897b      	ldrh	r3, [r7, #10]
 8003552:	11db      	asrs	r3, r3, #7
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0306 	and.w	r3, r3, #6
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f063 030f 	orn	r3, r3, #15
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <I2C_MasterRequestWrite+0xfc>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f875 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e010      	b.n	80035a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4907      	ldr	r1, [pc, #28]	; (80035ac <I2C_MasterRequestWrite+0x100>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f865 	bl	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	00010008 	.word	0x00010008
 80035ac:	00010002 	.word	0x00010002

080035b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c0:	e025      	b.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d021      	beq.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7ff fa03 	bl	80029d4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e023      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d10d      	bne.n	8003634 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	e00c      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0b6      	beq.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366c:	e051      	b.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d123      	bne.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0204 	orr.w	r2, r3, #4
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e046      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d021      	beq.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7ff f981 	bl	80029d4 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e020      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10c      	bne.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e00b      	b.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d18d      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003768:	e02d      	b.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f878 	bl	8003860 <I2C_IsAcknowledgeFailed>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e02d      	b.n	80037d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d021      	beq.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7ff f927 	bl	80029d4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e007      	b.n	80037d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d1ca      	bne.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ea:	e02d      	b.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f837 	bl	8003860 <I2C_IsAcknowledgeFailed>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e02d      	b.n	8003858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d021      	beq.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7ff f8e6 	bl	80029d4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d1ca      	bne.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	d11b      	bne.n	80038b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f043 0204 	orr.w	r2, r3, #4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e26c      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8087 	beq.w	80039ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038dc:	4b92      	ldr	r3, [pc, #584]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00c      	beq.n	8003902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e8:	4b8f      	ldr	r3, [pc, #572]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d112      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b89      	ldr	r3, [pc, #548]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d06c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x12c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d168      	bne.n	80039e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e246      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x76>
 8003924:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7f      	ldr	r2, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e02e      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b78      	ldr	r3, [pc, #480]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a77      	ldr	r2, [pc, #476]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xbc>
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a71      	ldr	r2, [pc, #452]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6e      	ldr	r2, [pc, #440]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xd4>
 8003978:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a67      	ldr	r2, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7ff f81c 	bl	80029d4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7ff f818 	bl	80029d4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e1fa      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe4>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7ff f808 	bl	80029d4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7ff f804 	bl	80029d4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e1e6      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x10c>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d063      	beq.n	8003abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1ba      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4939      	ldr	r1, [pc, #228]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe ffbd 	bl	80029d4 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fe ffb9 	bl	80029d4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e19b      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4927      	ldr	r1, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <HAL_RCC_OscConfig+0x270>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe ff9c 	bl	80029d4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fe ff98 	bl	80029d4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e17a      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d03a      	beq.n	8003b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe ff7c 	bl	80029d4 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fe ff78 	bl	80029d4 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e15a      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f000 fac4 	bl	800408c <RCC_Delay>
 8003b04:	e01c      	b.n	8003b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_RCC_OscConfig+0x274>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe ff62 	bl	80029d4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe ff5e 	bl	80029d4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d908      	bls.n	8003b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e140      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	42420000 	.word	0x42420000
 8003b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	4b9e      	ldr	r3, [pc, #632]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e9      	bne.n	8003b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a6 	beq.w	8003c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b52:	4b97      	ldr	r3, [pc, #604]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4a93      	ldr	r2, [pc, #588]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b68:	61d3      	str	r3, [r2, #28]
 8003b6a:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b8e      	ldr	r3, [pc, #568]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d118      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b86:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a8a      	ldr	r2, [pc, #552]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b92:	f7fe ff1f 	bl	80029d4 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fe ff1b 	bl	80029d4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0fd      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b81      	ldr	r3, [pc, #516]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x312>
 8003bc0:	4b7b      	ldr	r3, [pc, #492]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a7a      	ldr	r2, [pc, #488]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x356>
 8003bf8:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a6c      	ldr	r2, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x36e>
 8003c12:	4b67      	ldr	r3, [pc, #412]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a66      	ldr	r2, [pc, #408]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	4b64      	ldr	r3, [pc, #400]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a63      	ldr	r2, [pc, #396]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fecf 	bl	80029d4 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fecb 	bl	80029d4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0ab      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x37e>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe feb9 	bl	80029d4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe feb5 	bl	80029d4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e095      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b48      	ldr	r3, [pc, #288]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a47      	ldr	r2, [pc, #284]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8081 	beq.w	8003da6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca4:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d061      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d146      	bne.n	8003d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCC_OscConfig+0x4fc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fe89 	bl	80029d4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe fe85 	bl	80029d4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e067      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d108      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	492d      	ldr	r1, [pc, #180]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a19      	ldr	r1, [r3, #32]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	430b      	orrs	r3, r1
 8003d12:	4927      	ldr	r1, [pc, #156]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RCC_OscConfig+0x4fc>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fe59 	bl	80029d4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fe55 	bl	80029d4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e037      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x46a>
 8003d44:	e02f      	b.n	8003da6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <HAL_RCC_OscConfig+0x4fc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fe42 	bl	80029d4 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fe3e 	bl	80029d4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e020      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x498>
 8003d72:	e018      	b.n	8003da6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e013      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x4f4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	42420060 	.word	0x42420060

08003dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0d0      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d910      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	4965      	ldr	r1, [pc, #404]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0b8      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3c:	4b50      	ldr	r3, [pc, #320]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	494d      	ldr	r1, [pc, #308]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d040      	beq.n	8003edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e07f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e073      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06b      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4936      	ldr	r1, [pc, #216]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fe fd92 	bl	80029d4 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fe fd8e 	bl	80029d4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e053      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d210      	bcs.n	8003f0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 0207 	bic.w	r2, r3, #7
 8003ef2:	4922      	ldr	r1, [pc, #136]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e032      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4916      	ldr	r1, [pc, #88]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	490e      	ldr	r1, [pc, #56]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f4a:	f000 f821 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	490a      	ldr	r1, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1cc>)
 8003f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fcf0 	bl	8002950 <HAL_InitTick>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	40021000 	.word	0x40021000
 8003f84:	08007934 	.word	0x08007934
 8003f88:	200000bc 	.word	0x200000bc
 8003f8c:	200000c0 	.word	0x200000c0

08003f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f90:	b490      	push	{r4, r7}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f98:	1d3c      	adds	r4, r7, #4
 8003f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fa0:	f240 2301 	movw	r3, #513	; 0x201
 8003fa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x46>
 8003fce:	e02d      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd2:	623b      	str	r3, [r7, #32]
      break;
 8003fd4:	e02d      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fe8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c5b      	lsrs	r3, r3, #17
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004002:	4413      	add	r3, r2
 8004004:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004008:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400e:	fb02 f203 	mul.w	r2, r2, r3
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e004      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a0b      	ldr	r2, [pc, #44]	; (800404c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	623b      	str	r3, [r7, #32]
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402e:	623b      	str	r3, [r7, #32]
      break;
 8004030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004032:	6a3b      	ldr	r3, [r7, #32]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3728      	adds	r7, #40	; 0x28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc90      	pop	{r4, r7}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	08007924 	.word	0x08007924
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	200000bc 	.word	0x200000bc

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08007944 	.word	0x08007944

0800408c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <RCC_Delay+0x34>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <RCC_Delay+0x38>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a8:	bf00      	nop
  }
  while (Delay --);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f9      	bne.n	80040a8 <RCC_Delay+0x1c>
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	200000bc 	.word	0x200000bc
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d001      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e03a      	b.n	8004156 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIM_Base_Start_IT+0x98>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x58>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d009      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x58>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <HAL_TIM_Base_Start_IT+0x9c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x58>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a13      	ldr	r2, [pc, #76]	; (8004168 <HAL_TIM_Base_Start_IT+0xa0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d111      	bne.n	8004144 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b06      	cmp	r3, #6
 8004130:	d010      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	e007      	b.n	8004154 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800

0800416c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e093      	b.n	80042a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fe f9ad 	bl	80024f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041b0:	f023 0307 	bic.w	r3, r3, #7
 80041b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 fa4f 	bl	8004664 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	4313      	orrs	r3, r2
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800420c:	f023 030c 	bic.w	r3, r3, #12
 8004210:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	4313      	orrs	r3, r2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	011a      	lsls	r2, r3, #4
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	031b      	lsls	r3, r3, #12
 800423c:	4313      	orrs	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4313      	orrs	r3, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042e6:	7b7b      	ldrb	r3, [r7, #13]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e089      	b.n	8004404 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004300:	e031      	b.n	8004366 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d110      	bne.n	800432a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004308:	7bbb      	ldrb	r3, [r7, #14]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800430e:	7b3b      	ldrb	r3, [r7, #12]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e075      	b.n	8004404 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004328:	e01d      	b.n	8004366 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d108      	bne.n	8004342 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800433c:	7b3b      	ldrb	r3, [r7, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d001      	beq.n	8004346 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e05e      	b.n	8004404 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_TIM_Encoder_Start_IT+0xc4>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d010      	beq.n	8004394 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004372:	e01f      	b.n	80043b4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2201      	movs	r2, #1
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f9d3 	bl	8004728 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0202 	orr.w	r2, r2, #2
 8004390:	60da      	str	r2, [r3, #12]
      break;
 8004392:	e02e      	b.n	80043f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	2104      	movs	r1, #4
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f9c3 	bl	8004728 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0204 	orr.w	r2, r2, #4
 80043b0:	60da      	str	r2, [r3, #12]
      break;
 80043b2:	e01e      	b.n	80043f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f9b3 	bl	8004728 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	2104      	movs	r1, #4
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f9ac 	bl	8004728 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0202 	orr.w	r2, r2, #2
 80043de:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0204 	orr.w	r2, r2, #4
 80043ee:	60da      	str	r2, [r3, #12]
      break;
 80043f0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8ed 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8e0 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8ef 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b04      	cmp	r3, #4
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0204 	mvn.w	r2, #4
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8c3 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8b6 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8c5 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0208 	mvn.w	r2, #8
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f899 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f88c 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f89b 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b10      	cmp	r3, #16
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b10      	cmp	r3, #16
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0210 	mvn.w	r2, #16
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2208      	movs	r2, #8
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f86f 	bl	800462e <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f862 	bl	800461c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f871 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fc54 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f941 	bl	800483e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f835 	bl	8004652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b20      	cmp	r3, #32
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0220 	mvn.w	r2, #32
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f90c 	bl	800482c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a29      	ldr	r2, [pc, #164]	; (800471c <TIM_Base_SetConfig+0xb8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x30>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x30>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a26      	ldr	r2, [pc, #152]	; (8004720 <TIM_Base_SetConfig+0xbc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x30>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a25      	ldr	r2, [pc, #148]	; (8004724 <TIM_Base_SetConfig+0xc0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1c      	ldr	r2, [pc, #112]	; (800471c <TIM_Base_SetConfig+0xb8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_Base_SetConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d007      	beq.n	80046c6 <TIM_Base_SetConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <TIM_Base_SetConfig+0xbc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_Base_SetConfig+0x62>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <TIM_Base_SetConfig+0xc0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <TIM_Base_SetConfig+0xb8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d103      	bne.n	800470c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	615a      	str	r2, [r3, #20]
}
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800

08004728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2201      	movs	r2, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e046      	b.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d4:	d009      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a10      	ldr	r2, [pc, #64]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800

0800482c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr

0800483e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	200000c8 	.word	0x200000c8

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4d0c      	ldr	r5, [pc, #48]	; (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f002 feba 	bl	80075e4 <_init>
 8004870:	2600      	movs	r6, #0
 8004872:	4d0a      	ldr	r5, [pc, #40]	; (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	; (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08007d2c 	.word	0x08007d2c
 8004898:	08007d2c 	.word	0x08007d2c
 800489c:	08007d2c 	.word	0x08007d2c
 80048a0:	08007d30 	.word	0x08007d30

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 b871 	b.w	8004990 <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	200000c8 	.word	0x200000c8

080048b4 <memmove>:
 80048b4:	4288      	cmp	r0, r1
 80048b6:	b510      	push	{r4, lr}
 80048b8:	eb01 0402 	add.w	r4, r1, r2
 80048bc:	d902      	bls.n	80048c4 <memmove+0x10>
 80048be:	4284      	cmp	r4, r0
 80048c0:	4623      	mov	r3, r4
 80048c2:	d807      	bhi.n	80048d4 <memmove+0x20>
 80048c4:	1e43      	subs	r3, r0, #1
 80048c6:	42a1      	cmp	r1, r4
 80048c8:	d008      	beq.n	80048dc <memmove+0x28>
 80048ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d2:	e7f8      	b.n	80048c6 <memmove+0x12>
 80048d4:	4601      	mov	r1, r0
 80048d6:	4402      	add	r2, r0
 80048d8:	428a      	cmp	r2, r1
 80048da:	d100      	bne.n	80048de <memmove+0x2a>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048e6:	e7f7      	b.n	80048d8 <memmove+0x24>

080048e8 <memset>:
 80048e8:	4603      	mov	r3, r0
 80048ea:	4402      	add	r2, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <_free_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d043      	beq.n	8004988 <_free_r+0x90>
 8004900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004904:	1f0c      	subs	r4, r1, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfb8      	it	lt
 800490a:	18e4      	addlt	r4, r4, r3
 800490c:	f001 fbc6 	bl	800609c <__malloc_lock>
 8004910:	4a1e      	ldr	r2, [pc, #120]	; (800498c <_free_r+0x94>)
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	4610      	mov	r0, r2
 8004916:	b933      	cbnz	r3, 8004926 <_free_r+0x2e>
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	6014      	str	r4, [r2, #0]
 800491c:	4628      	mov	r0, r5
 800491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004922:	f001 bbc1 	b.w	80060a8 <__malloc_unlock>
 8004926:	42a3      	cmp	r3, r4
 8004928:	d90a      	bls.n	8004940 <_free_r+0x48>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	1862      	adds	r2, r4, r1
 800492e:	4293      	cmp	r3, r2
 8004930:	bf01      	itttt	eq
 8004932:	681a      	ldreq	r2, [r3, #0]
 8004934:	685b      	ldreq	r3, [r3, #4]
 8004936:	1852      	addeq	r2, r2, r1
 8004938:	6022      	streq	r2, [r4, #0]
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	6004      	str	r4, [r0, #0]
 800493e:	e7ed      	b.n	800491c <_free_r+0x24>
 8004940:	461a      	mov	r2, r3
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	b10b      	cbz	r3, 800494a <_free_r+0x52>
 8004946:	42a3      	cmp	r3, r4
 8004948:	d9fa      	bls.n	8004940 <_free_r+0x48>
 800494a:	6811      	ldr	r1, [r2, #0]
 800494c:	1850      	adds	r0, r2, r1
 800494e:	42a0      	cmp	r0, r4
 8004950:	d10b      	bne.n	800496a <_free_r+0x72>
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	4401      	add	r1, r0
 8004956:	1850      	adds	r0, r2, r1
 8004958:	4283      	cmp	r3, r0
 800495a:	6011      	str	r1, [r2, #0]
 800495c:	d1de      	bne.n	800491c <_free_r+0x24>
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4401      	add	r1, r0
 8004964:	6011      	str	r1, [r2, #0]
 8004966:	6053      	str	r3, [r2, #4]
 8004968:	e7d8      	b.n	800491c <_free_r+0x24>
 800496a:	d902      	bls.n	8004972 <_free_r+0x7a>
 800496c:	230c      	movs	r3, #12
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	e7d4      	b.n	800491c <_free_r+0x24>
 8004972:	6820      	ldr	r0, [r4, #0]
 8004974:	1821      	adds	r1, r4, r0
 8004976:	428b      	cmp	r3, r1
 8004978:	bf01      	itttt	eq
 800497a:	6819      	ldreq	r1, [r3, #0]
 800497c:	685b      	ldreq	r3, [r3, #4]
 800497e:	1809      	addeq	r1, r1, r0
 8004980:	6021      	streq	r1, [r4, #0]
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	6054      	str	r4, [r2, #4]
 8004986:	e7c9      	b.n	800491c <_free_r+0x24>
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	bf00      	nop
 800498c:	200002c8 	.word	0x200002c8

08004990 <_malloc_r>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	1ccd      	adds	r5, r1, #3
 8004994:	f025 0503 	bic.w	r5, r5, #3
 8004998:	3508      	adds	r5, #8
 800499a:	2d0c      	cmp	r5, #12
 800499c:	bf38      	it	cc
 800499e:	250c      	movcc	r5, #12
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	4606      	mov	r6, r0
 80049a4:	db01      	blt.n	80049aa <_malloc_r+0x1a>
 80049a6:	42a9      	cmp	r1, r5
 80049a8:	d903      	bls.n	80049b2 <_malloc_r+0x22>
 80049aa:	230c      	movs	r3, #12
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	2000      	movs	r0, #0
 80049b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b2:	f001 fb73 	bl	800609c <__malloc_lock>
 80049b6:	4921      	ldr	r1, [pc, #132]	; (8004a3c <_malloc_r+0xac>)
 80049b8:	680a      	ldr	r2, [r1, #0]
 80049ba:	4614      	mov	r4, r2
 80049bc:	b99c      	cbnz	r4, 80049e6 <_malloc_r+0x56>
 80049be:	4f20      	ldr	r7, [pc, #128]	; (8004a40 <_malloc_r+0xb0>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	b923      	cbnz	r3, 80049ce <_malloc_r+0x3e>
 80049c4:	4621      	mov	r1, r4
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 fc9c 	bl	8005304 <_sbrk_r>
 80049cc:	6038      	str	r0, [r7, #0]
 80049ce:	4629      	mov	r1, r5
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 fc97 	bl	8005304 <_sbrk_r>
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	d123      	bne.n	8004a22 <_malloc_r+0x92>
 80049da:	230c      	movs	r3, #12
 80049dc:	4630      	mov	r0, r6
 80049de:	6033      	str	r3, [r6, #0]
 80049e0:	f001 fb62 	bl	80060a8 <__malloc_unlock>
 80049e4:	e7e3      	b.n	80049ae <_malloc_r+0x1e>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	1b5b      	subs	r3, r3, r5
 80049ea:	d417      	bmi.n	8004a1c <_malloc_r+0x8c>
 80049ec:	2b0b      	cmp	r3, #11
 80049ee:	d903      	bls.n	80049f8 <_malloc_r+0x68>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	441c      	add	r4, r3
 80049f4:	6025      	str	r5, [r4, #0]
 80049f6:	e004      	b.n	8004a02 <_malloc_r+0x72>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	42a2      	cmp	r2, r4
 80049fc:	bf0c      	ite	eq
 80049fe:	600b      	streq	r3, [r1, #0]
 8004a00:	6053      	strne	r3, [r2, #4]
 8004a02:	4630      	mov	r0, r6
 8004a04:	f001 fb50 	bl	80060a8 <__malloc_unlock>
 8004a08:	f104 000b 	add.w	r0, r4, #11
 8004a0c:	1d23      	adds	r3, r4, #4
 8004a0e:	f020 0007 	bic.w	r0, r0, #7
 8004a12:	1ac2      	subs	r2, r0, r3
 8004a14:	d0cc      	beq.n	80049b0 <_malloc_r+0x20>
 8004a16:	1a1b      	subs	r3, r3, r0
 8004a18:	50a3      	str	r3, [r4, r2]
 8004a1a:	e7c9      	b.n	80049b0 <_malloc_r+0x20>
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	6864      	ldr	r4, [r4, #4]
 8004a20:	e7cc      	b.n	80049bc <_malloc_r+0x2c>
 8004a22:	1cc4      	adds	r4, r0, #3
 8004a24:	f024 0403 	bic.w	r4, r4, #3
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d0e3      	beq.n	80049f4 <_malloc_r+0x64>
 8004a2c:	1a21      	subs	r1, r4, r0
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 fc68 	bl	8005304 <_sbrk_r>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d1dd      	bne.n	80049f4 <_malloc_r+0x64>
 8004a38:	e7cf      	b.n	80049da <_malloc_r+0x4a>
 8004a3a:	bf00      	nop
 8004a3c:	200002c8 	.word	0x200002c8
 8004a40:	200002cc 	.word	0x200002cc

08004a44 <__cvt>:
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4a:	461f      	mov	r7, r3
 8004a4c:	bfbb      	ittet	lt
 8004a4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	461f      	movlt	r7, r3
 8004a54:	2300      	movge	r3, #0
 8004a56:	232d      	movlt	r3, #45	; 0x2d
 8004a58:	b088      	sub	sp, #32
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a60:	7013      	strb	r3, [r2, #0]
 8004a62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a68:	f023 0820 	bic.w	r8, r3, #32
 8004a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a70:	d005      	beq.n	8004a7e <__cvt+0x3a>
 8004a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a76:	d100      	bne.n	8004a7a <__cvt+0x36>
 8004a78:	3501      	adds	r5, #1
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e000      	b.n	8004a80 <__cvt+0x3c>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	aa07      	add	r2, sp, #28
 8004a82:	9204      	str	r2, [sp, #16]
 8004a84:	aa06      	add	r2, sp, #24
 8004a86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a8a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a8e:	4622      	mov	r2, r4
 8004a90:	463b      	mov	r3, r7
 8004a92:	f000 fcf5 	bl	8005480 <_dtoa_r>
 8004a96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	d102      	bne.n	8004aa4 <__cvt+0x60>
 8004a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004aa0:	07db      	lsls	r3, r3, #31
 8004aa2:	d522      	bpl.n	8004aea <__cvt+0xa6>
 8004aa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aa8:	eb06 0905 	add.w	r9, r6, r5
 8004aac:	d110      	bne.n	8004ad0 <__cvt+0x8c>
 8004aae:	7833      	ldrb	r3, [r6, #0]
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d10a      	bne.n	8004aca <__cvt+0x86>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4639      	mov	r1, r7
 8004abc:	f7fb ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac0:	b918      	cbnz	r0, 8004aca <__cvt+0x86>
 8004ac2:	f1c5 0501 	rsb	r5, r5, #1
 8004ac6:	f8ca 5000 	str.w	r5, [sl]
 8004aca:	f8da 3000 	ldr.w	r3, [sl]
 8004ace:	4499      	add	r9, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fb ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8004adc:	b108      	cbz	r0, 8004ae2 <__cvt+0x9e>
 8004ade:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ae2:	2230      	movs	r2, #48	; 0x30
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	454b      	cmp	r3, r9
 8004ae8:	d307      	bcc.n	8004afa <__cvt+0xb6>
 8004aea:	4630      	mov	r0, r6
 8004aec:	9b07      	ldr	r3, [sp, #28]
 8004aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004af0:	1b9b      	subs	r3, r3, r6
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	b008      	add	sp, #32
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	9107      	str	r1, [sp, #28]
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e7f0      	b.n	8004ae4 <__cvt+0xa0>

08004b02 <__exponent>:
 8004b02:	4603      	mov	r3, r0
 8004b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b06:	2900      	cmp	r1, #0
 8004b08:	f803 2b02 	strb.w	r2, [r3], #2
 8004b0c:	bfb6      	itet	lt
 8004b0e:	222d      	movlt	r2, #45	; 0x2d
 8004b10:	222b      	movge	r2, #43	; 0x2b
 8004b12:	4249      	neglt	r1, r1
 8004b14:	2909      	cmp	r1, #9
 8004b16:	7042      	strb	r2, [r0, #1]
 8004b18:	dd2b      	ble.n	8004b72 <__exponent+0x70>
 8004b1a:	f10d 0407 	add.w	r4, sp, #7
 8004b1e:	46a4      	mov	ip, r4
 8004b20:	270a      	movs	r7, #10
 8004b22:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b26:	460a      	mov	r2, r1
 8004b28:	46a6      	mov	lr, r4
 8004b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8004b2e:	2a63      	cmp	r2, #99	; 0x63
 8004b30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b34:	4631      	mov	r1, r6
 8004b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b3e:	dcf0      	bgt.n	8004b22 <__exponent+0x20>
 8004b40:	3130      	adds	r1, #48	; 0x30
 8004b42:	f1ae 0502 	sub.w	r5, lr, #2
 8004b46:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	1c44      	adds	r4, r0, #1
 8004b4e:	4561      	cmp	r1, ip
 8004b50:	d30a      	bcc.n	8004b68 <__exponent+0x66>
 8004b52:	f10d 0209 	add.w	r2, sp, #9
 8004b56:	eba2 020e 	sub.w	r2, r2, lr
 8004b5a:	4565      	cmp	r5, ip
 8004b5c:	bf88      	it	hi
 8004b5e:	2200      	movhi	r2, #0
 8004b60:	4413      	add	r3, r2
 8004b62:	1a18      	subs	r0, r3, r0
 8004b64:	b003      	add	sp, #12
 8004b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b70:	e7ed      	b.n	8004b4e <__exponent+0x4c>
 8004b72:	2330      	movs	r3, #48	; 0x30
 8004b74:	3130      	adds	r1, #48	; 0x30
 8004b76:	7083      	strb	r3, [r0, #2]
 8004b78:	70c1      	strb	r1, [r0, #3]
 8004b7a:	1d03      	adds	r3, r0, #4
 8004b7c:	e7f1      	b.n	8004b62 <__exponent+0x60>
	...

08004b80 <_printf_float>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b091      	sub	sp, #68	; 0x44
 8004b86:	460c      	mov	r4, r1
 8004b88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	461f      	mov	r7, r3
 8004b90:	4605      	mov	r5, r0
 8004b92:	f001 fa63 	bl	800605c <_localeconv_r>
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9c:	f7fb fad8 	bl	8000150 <strlen>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba8:	900a      	str	r0, [sp, #40]	; 0x28
 8004baa:	3307      	adds	r3, #7
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	f103 0208 	add.w	r2, r3, #8
 8004bb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bb8:	f8d4 b000 	ldr.w	fp, [r4]
 8004bbc:	f8c8 2000 	str.w	r2, [r8]
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bc8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bcc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4b9c      	ldr	r3, [pc, #624]	; (8004e4c <_printf_float+0x2cc>)
 8004bda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bdc:	f7fb ff16 	bl	8000a0c <__aeabi_dcmpun>
 8004be0:	bb70      	cbnz	r0, 8004c40 <_printf_float+0xc0>
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	4640      	mov	r0, r8
 8004be8:	4b98      	ldr	r3, [pc, #608]	; (8004e4c <_printf_float+0x2cc>)
 8004bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bec:	f7fb fef0 	bl	80009d0 <__aeabi_dcmple>
 8004bf0:	bb30      	cbnz	r0, 8004c40 <_printf_float+0xc0>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	f7fb fedf 	bl	80009bc <__aeabi_dcmplt>
 8004bfe:	b110      	cbz	r0, 8004c06 <_printf_float+0x86>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c06:	4b92      	ldr	r3, [pc, #584]	; (8004e50 <_printf_float+0x2d0>)
 8004c08:	4892      	ldr	r0, [pc, #584]	; (8004e54 <_printf_float+0x2d4>)
 8004c0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c0e:	bf94      	ite	ls
 8004c10:	4698      	movls	r8, r3
 8004c12:	4680      	movhi	r8, r0
 8004c14:	2303      	movs	r3, #3
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	f02b 0304 	bic.w	r3, fp, #4
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	4633      	mov	r3, r6
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	9700      	str	r7, [sp, #0]
 8004c2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c2c:	f000 f9d4 	bl	8004fd8 <_printf_common>
 8004c30:	3001      	adds	r0, #1
 8004c32:	f040 8090 	bne.w	8004d56 <_printf_float+0x1d6>
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3a:	b011      	add	sp, #68	; 0x44
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	4642      	mov	r2, r8
 8004c42:	4653      	mov	r3, sl
 8004c44:	4640      	mov	r0, r8
 8004c46:	4651      	mov	r1, sl
 8004c48:	f7fb fee0 	bl	8000a0c <__aeabi_dcmpun>
 8004c4c:	b148      	cbz	r0, 8004c62 <_printf_float+0xe2>
 8004c4e:	f1ba 0f00 	cmp.w	sl, #0
 8004c52:	bfb8      	it	lt
 8004c54:	232d      	movlt	r3, #45	; 0x2d
 8004c56:	4880      	ldr	r0, [pc, #512]	; (8004e58 <_printf_float+0x2d8>)
 8004c58:	bfb8      	it	lt
 8004c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c5e:	4b7f      	ldr	r3, [pc, #508]	; (8004e5c <_printf_float+0x2dc>)
 8004c60:	e7d3      	b.n	8004c0a <_printf_float+0x8a>
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	d142      	bne.n	8004cf2 <_printf_float+0x172>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	9206      	str	r2, [sp, #24]
 8004c74:	aa0e      	add	r2, sp, #56	; 0x38
 8004c76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c7a:	aa0d      	add	r2, sp, #52	; 0x34
 8004c7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c80:	9203      	str	r2, [sp, #12]
 8004c82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	4642      	mov	r2, r8
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4628      	mov	r0, r5
 8004c94:	4653      	mov	r3, sl
 8004c96:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c98:	f7ff fed4 	bl	8004a44 <__cvt>
 8004c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	2947      	cmp	r1, #71	; 0x47
 8004ca2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ca4:	d108      	bne.n	8004cb8 <_printf_float+0x138>
 8004ca6:	1cc8      	adds	r0, r1, #3
 8004ca8:	db02      	blt.n	8004cb0 <_printf_float+0x130>
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	4299      	cmp	r1, r3
 8004cae:	dd40      	ble.n	8004d32 <_printf_float+0x1b2>
 8004cb0:	f1a9 0902 	sub.w	r9, r9, #2
 8004cb4:	fa5f f989 	uxtb.w	r9, r9
 8004cb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cbc:	d81f      	bhi.n	8004cfe <_printf_float+0x17e>
 8004cbe:	464a      	mov	r2, r9
 8004cc0:	3901      	subs	r1, #1
 8004cc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cc6:	910d      	str	r1, [sp, #52]	; 0x34
 8004cc8:	f7ff ff1b 	bl	8004b02 <__exponent>
 8004ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cce:	4682      	mov	sl, r0
 8004cd0:	1813      	adds	r3, r2, r0
 8004cd2:	2a01      	cmp	r2, #1
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	dc02      	bgt.n	8004cde <_printf_float+0x15e>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	07d2      	lsls	r2, r2, #31
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_float+0x162>
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d09b      	beq.n	8004c22 <_printf_float+0xa2>
 8004cea:	232d      	movs	r3, #45	; 0x2d
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	e797      	b.n	8004c22 <_printf_float+0xa2>
 8004cf2:	2947      	cmp	r1, #71	; 0x47
 8004cf4:	d1bc      	bne.n	8004c70 <_printf_float+0xf0>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ba      	bne.n	8004c70 <_printf_float+0xf0>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e7b7      	b.n	8004c6e <_printf_float+0xee>
 8004cfe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d02:	d118      	bne.n	8004d36 <_printf_float+0x1b6>
 8004d04:	2900      	cmp	r1, #0
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	dd0b      	ble.n	8004d22 <_printf_float+0x1a2>
 8004d0a:	6121      	str	r1, [r4, #16]
 8004d0c:	b913      	cbnz	r3, 8004d14 <_printf_float+0x194>
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	07d0      	lsls	r0, r2, #31
 8004d12:	d502      	bpl.n	8004d1a <_printf_float+0x19a>
 8004d14:	3301      	adds	r3, #1
 8004d16:	440b      	add	r3, r1
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	f04f 0a00 	mov.w	sl, #0
 8004d1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d20:	e7df      	b.n	8004ce2 <_printf_float+0x162>
 8004d22:	b913      	cbnz	r3, 8004d2a <_printf_float+0x1aa>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	07d2      	lsls	r2, r2, #31
 8004d28:	d501      	bpl.n	8004d2e <_printf_float+0x1ae>
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	e7f4      	b.n	8004d18 <_printf_float+0x198>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7f2      	b.n	8004d18 <_printf_float+0x198>
 8004d32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	db05      	blt.n	8004d48 <_printf_float+0x1c8>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	6121      	str	r1, [r4, #16]
 8004d40:	07d8      	lsls	r0, r3, #31
 8004d42:	d5ea      	bpl.n	8004d1a <_printf_float+0x19a>
 8004d44:	1c4b      	adds	r3, r1, #1
 8004d46:	e7e7      	b.n	8004d18 <_printf_float+0x198>
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	bfcc      	ite	gt
 8004d4c:	2201      	movgt	r2, #1
 8004d4e:	f1c1 0202 	rsble	r2, r1, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	e7e0      	b.n	8004d18 <_printf_float+0x198>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	055a      	lsls	r2, r3, #21
 8004d5a:	d407      	bmi.n	8004d6c <_printf_float+0x1ec>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	4642      	mov	r2, r8
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	d12b      	bne.n	8004dc2 <_printf_float+0x242>
 8004d6a:	e764      	b.n	8004c36 <_printf_float+0xb6>
 8004d6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d70:	f240 80dd 	bls.w	8004f2e <_printf_float+0x3ae>
 8004d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f7fb fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d033      	beq.n	8004dec <_printf_float+0x26c>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <_printf_float+0x2e0>)
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f af51 	beq.w	8004c36 <_printf_float+0xb6>
 8004d94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	db02      	blt.n	8004da2 <_printf_float+0x222>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07d8      	lsls	r0, r3, #31
 8004da0:	d50f      	bpl.n	8004dc2 <_printf_float+0x242>
 8004da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f af42 	beq.w	8004c36 <_printf_float+0xb6>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 091a 	add.w	r9, r4, #26
 8004dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4543      	cmp	r3, r8
 8004dc0:	dc09      	bgt.n	8004dd6 <_printf_float+0x256>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	079b      	lsls	r3, r3, #30
 8004dc6:	f100 8102 	bmi.w	8004fce <_printf_float+0x44e>
 8004dca:	68e0      	ldr	r0, [r4, #12]
 8004dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	bfb8      	it	lt
 8004dd2:	4618      	movlt	r0, r3
 8004dd4:	e731      	b.n	8004c3a <_printf_float+0xba>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f af28 	beq.w	8004c36 <_printf_float+0xb6>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	e7e6      	b.n	8004dba <_printf_float+0x23a>
 8004dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dc38      	bgt.n	8004e64 <_printf_float+0x2e4>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <_printf_float+0x2e0>)
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f af1a 	beq.w	8004c36 <_printf_float+0xb6>
 8004e02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d102      	bne.n	8004e10 <_printf_float+0x290>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	07d9      	lsls	r1, r3, #31
 8004e0e:	d5d8      	bpl.n	8004dc2 <_printf_float+0x242>
 8004e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f af0b 	beq.w	8004c36 <_printf_float+0xb6>
 8004e20:	f04f 0900 	mov.w	r9, #0
 8004e24:	f104 0a1a 	add.w	sl, r4, #26
 8004e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e2a:	425b      	negs	r3, r3
 8004e2c:	454b      	cmp	r3, r9
 8004e2e:	dc01      	bgt.n	8004e34 <_printf_float+0x2b4>
 8004e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e32:	e794      	b.n	8004d5e <_printf_float+0x1de>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4652      	mov	r2, sl
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f aef9 	beq.w	8004c36 <_printf_float+0xb6>
 8004e44:	f109 0901 	add.w	r9, r9, #1
 8004e48:	e7ee      	b.n	8004e28 <_printf_float+0x2a8>
 8004e4a:	bf00      	nop
 8004e4c:	7fefffff 	.word	0x7fefffff
 8004e50:	08007950 	.word	0x08007950
 8004e54:	08007954 	.word	0x08007954
 8004e58:	0800795c 	.word	0x0800795c
 8004e5c:	08007958 	.word	0x08007958
 8004e60:	08007960 	.word	0x08007960
 8004e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	bfa8      	it	ge
 8004e6c:	461a      	movge	r2, r3
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	4691      	mov	r9, r2
 8004e72:	dc37      	bgt.n	8004ee4 <_printf_float+0x364>
 8004e74:	f04f 0b00 	mov.w	fp, #0
 8004e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e7c:	f104 021a 	add.w	r2, r4, #26
 8004e80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e84:	ebaa 0309 	sub.w	r3, sl, r9
 8004e88:	455b      	cmp	r3, fp
 8004e8a:	dc33      	bgt.n	8004ef4 <_printf_float+0x374>
 8004e8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e90:	429a      	cmp	r2, r3
 8004e92:	db3b      	blt.n	8004f0c <_printf_float+0x38c>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07da      	lsls	r2, r3, #31
 8004e98:	d438      	bmi.n	8004f0c <_printf_float+0x38c>
 8004e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e9e:	eba2 030a 	sub.w	r3, r2, sl
 8004ea2:	eba2 0901 	sub.w	r9, r2, r1
 8004ea6:	4599      	cmp	r9, r3
 8004ea8:	bfa8      	it	ge
 8004eaa:	4699      	movge	r9, r3
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	dc34      	bgt.n	8004f1c <_printf_float+0x39c>
 8004eb2:	f04f 0800 	mov.w	r8, #0
 8004eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eba:	f104 0a1a 	add.w	sl, r4, #26
 8004ebe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	eba3 0309 	sub.w	r3, r3, r9
 8004ec8:	4543      	cmp	r3, r8
 8004eca:	f77f af7a 	ble.w	8004dc2 <_printf_float+0x242>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f aeac 	beq.w	8004c36 <_printf_float+0xb6>
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	e7ec      	b.n	8004ebe <_printf_float+0x33e>
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4642      	mov	r2, r8
 8004eea:	4628      	mov	r0, r5
 8004eec:	47b8      	blx	r7
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d1c0      	bne.n	8004e74 <_printf_float+0x2f4>
 8004ef2:	e6a0      	b.n	8004c36 <_printf_float+0xb6>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	920b      	str	r2, [sp, #44]	; 0x2c
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f ae99 	beq.w	8004c36 <_printf_float+0xb6>
 8004f04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f06:	f10b 0b01 	add.w	fp, fp, #1
 8004f0a:	e7b9      	b.n	8004e80 <_printf_float+0x300>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1bf      	bne.n	8004e9a <_printf_float+0x31a>
 8004f1a:	e68c      	b.n	8004c36 <_printf_float+0xb6>
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	eb08 020a 	add.w	r2, r8, sl
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d1c2      	bne.n	8004eb2 <_printf_float+0x332>
 8004f2c:	e683      	b.n	8004c36 <_printf_float+0xb6>
 8004f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f30:	2a01      	cmp	r2, #1
 8004f32:	dc01      	bgt.n	8004f38 <_printf_float+0x3b8>
 8004f34:	07db      	lsls	r3, r3, #31
 8004f36:	d537      	bpl.n	8004fa8 <_printf_float+0x428>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f ae77 	beq.w	8004c36 <_printf_float+0xb6>
 8004f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f ae6f 	beq.w	8004c36 <_printf_float+0xb6>
 8004f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f7fb fd22 	bl	80009a8 <__aeabi_dcmpeq>
 8004f64:	b9d8      	cbnz	r0, 8004f9e <_printf_float+0x41e>
 8004f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f68:	f108 0201 	add.w	r2, r8, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	d10e      	bne.n	8004f96 <_printf_float+0x416>
 8004f78:	e65d      	b.n	8004c36 <_printf_float+0xb6>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f ae56 	beq.w	8004c36 <_printf_float+0xb6>
 8004f8a:	f108 0801 	add.w	r8, r8, #1
 8004f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f90:	3b01      	subs	r3, #1
 8004f92:	4543      	cmp	r3, r8
 8004f94:	dcf1      	bgt.n	8004f7a <_printf_float+0x3fa>
 8004f96:	4653      	mov	r3, sl
 8004f98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f9c:	e6e0      	b.n	8004d60 <_printf_float+0x1e0>
 8004f9e:	f04f 0800 	mov.w	r8, #0
 8004fa2:	f104 091a 	add.w	r9, r4, #26
 8004fa6:	e7f2      	b.n	8004f8e <_printf_float+0x40e>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4642      	mov	r2, r8
 8004fac:	e7df      	b.n	8004f6e <_printf_float+0x3ee>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae3c 	beq.w	8004c36 <_printf_float+0xb6>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fc6:	1a5b      	subs	r3, r3, r1
 8004fc8:	4543      	cmp	r3, r8
 8004fca:	dcf0      	bgt.n	8004fae <_printf_float+0x42e>
 8004fcc:	e6fd      	b.n	8004dca <_printf_float+0x24a>
 8004fce:	f04f 0800 	mov.w	r8, #0
 8004fd2:	f104 0919 	add.w	r9, r4, #25
 8004fd6:	e7f4      	b.n	8004fc2 <_printf_float+0x442>

08004fd8 <_printf_common>:
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	4616      	mov	r6, r2
 8004fde:	4699      	mov	r9, r3
 8004fe0:	688a      	ldr	r2, [r1, #8]
 8004fe2:	690b      	ldr	r3, [r1, #16]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfb8      	it	lt
 8004fea:	4613      	movlt	r3, r2
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ff8:	b10a      	cbz	r2, 8004ffe <_printf_common+0x26>
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	0699      	lsls	r1, r3, #26
 8005002:	bf42      	ittt	mi
 8005004:	6833      	ldrmi	r3, [r6, #0]
 8005006:	3302      	addmi	r3, #2
 8005008:	6033      	strmi	r3, [r6, #0]
 800500a:	6825      	ldr	r5, [r4, #0]
 800500c:	f015 0506 	ands.w	r5, r5, #6
 8005010:	d106      	bne.n	8005020 <_printf_common+0x48>
 8005012:	f104 0a19 	add.w	sl, r4, #25
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	6832      	ldr	r2, [r6, #0]
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	42ab      	cmp	r3, r5
 800501e:	dc28      	bgt.n	8005072 <_printf_common+0x9a>
 8005020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005024:	1e13      	subs	r3, r2, #0
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	bf18      	it	ne
 800502a:	2301      	movne	r3, #1
 800502c:	0692      	lsls	r2, r2, #26
 800502e:	d42d      	bmi.n	800508c <_printf_common+0xb4>
 8005030:	4649      	mov	r1, r9
 8005032:	4638      	mov	r0, r7
 8005034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d020      	beq.n	8005080 <_printf_common+0xa8>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	68e5      	ldr	r5, [r4, #12]
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf18      	it	ne
 800504a:	2500      	movne	r5, #0
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	f04f 0600 	mov.w	r6, #0
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	bf08      	it	eq
 8005056:	1aad      	subeq	r5, r5, r2
 8005058:	6922      	ldr	r2, [r4, #16]
 800505a:	bf08      	it	eq
 800505c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005060:	4293      	cmp	r3, r2
 8005062:	bfc4      	itt	gt
 8005064:	1a9b      	subgt	r3, r3, r2
 8005066:	18ed      	addgt	r5, r5, r3
 8005068:	341a      	adds	r4, #26
 800506a:	42b5      	cmp	r5, r6
 800506c:	d11a      	bne.n	80050a4 <_printf_common+0xcc>
 800506e:	2000      	movs	r0, #0
 8005070:	e008      	b.n	8005084 <_printf_common+0xac>
 8005072:	2301      	movs	r3, #1
 8005074:	4652      	mov	r2, sl
 8005076:	4649      	mov	r1, r9
 8005078:	4638      	mov	r0, r7
 800507a:	47c0      	blx	r8
 800507c:	3001      	adds	r0, #1
 800507e:	d103      	bne.n	8005088 <_printf_common+0xb0>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	3501      	adds	r5, #1
 800508a:	e7c4      	b.n	8005016 <_printf_common+0x3e>
 800508c:	2030      	movs	r0, #48	; 0x30
 800508e:	18e1      	adds	r1, r4, r3
 8005090:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800509a:	4422      	add	r2, r4
 800509c:	3302      	adds	r3, #2
 800509e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050a2:	e7c5      	b.n	8005030 <_printf_common+0x58>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4622      	mov	r2, r4
 80050a8:	4649      	mov	r1, r9
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c0      	blx	r8
 80050ae:	3001      	adds	r0, #1
 80050b0:	d0e6      	beq.n	8005080 <_printf_common+0xa8>
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7d9      	b.n	800506a <_printf_common+0x92>
	...

080050b8 <_printf_i>:
 80050b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	7e27      	ldrb	r7, [r4, #24]
 80050c0:	4691      	mov	r9, r2
 80050c2:	2f78      	cmp	r7, #120	; 0x78
 80050c4:	4680      	mov	r8, r0
 80050c6:	469a      	mov	sl, r3
 80050c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ce:	d807      	bhi.n	80050e0 <_printf_i+0x28>
 80050d0:	2f62      	cmp	r7, #98	; 0x62
 80050d2:	d80a      	bhi.n	80050ea <_printf_i+0x32>
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	f000 80d9 	beq.w	800528c <_printf_i+0x1d4>
 80050da:	2f58      	cmp	r7, #88	; 0x58
 80050dc:	f000 80a4 	beq.w	8005228 <_printf_i+0x170>
 80050e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050e8:	e03a      	b.n	8005160 <_printf_i+0xa8>
 80050ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ee:	2b15      	cmp	r3, #21
 80050f0:	d8f6      	bhi.n	80050e0 <_printf_i+0x28>
 80050f2:	a001      	add	r0, pc, #4	; (adr r0, 80050f8 <_printf_i+0x40>)
 80050f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005165 	.word	0x08005165
 8005100:	080050e1 	.word	0x080050e1
 8005104:	080050e1 	.word	0x080050e1
 8005108:	080050e1 	.word	0x080050e1
 800510c:	080050e1 	.word	0x080050e1
 8005110:	08005165 	.word	0x08005165
 8005114:	080050e1 	.word	0x080050e1
 8005118:	080050e1 	.word	0x080050e1
 800511c:	080050e1 	.word	0x080050e1
 8005120:	080050e1 	.word	0x080050e1
 8005124:	08005273 	.word	0x08005273
 8005128:	08005195 	.word	0x08005195
 800512c:	08005255 	.word	0x08005255
 8005130:	080050e1 	.word	0x080050e1
 8005134:	080050e1 	.word	0x080050e1
 8005138:	08005295 	.word	0x08005295
 800513c:	080050e1 	.word	0x080050e1
 8005140:	08005195 	.word	0x08005195
 8005144:	080050e1 	.word	0x080050e1
 8005148:	080050e1 	.word	0x080050e1
 800514c:	0800525d 	.word	0x0800525d
 8005150:	680b      	ldr	r3, [r1, #0]
 8005152:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	600a      	str	r2, [r1, #0]
 800515c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005160:	2301      	movs	r3, #1
 8005162:	e0a4      	b.n	80052ae <_printf_i+0x1f6>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	6808      	ldr	r0, [r1, #0]
 8005168:	062e      	lsls	r6, r5, #24
 800516a:	f100 0304 	add.w	r3, r0, #4
 800516e:	d50a      	bpl.n	8005186 <_printf_i+0xce>
 8005170:	6805      	ldr	r5, [r0, #0]
 8005172:	600b      	str	r3, [r1, #0]
 8005174:	2d00      	cmp	r5, #0
 8005176:	da03      	bge.n	8005180 <_printf_i+0xc8>
 8005178:	232d      	movs	r3, #45	; 0x2d
 800517a:	426d      	negs	r5, r5
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005180:	230a      	movs	r3, #10
 8005182:	485e      	ldr	r0, [pc, #376]	; (80052fc <_printf_i+0x244>)
 8005184:	e019      	b.n	80051ba <_printf_i+0x102>
 8005186:	f015 0f40 	tst.w	r5, #64	; 0x40
 800518a:	6805      	ldr	r5, [r0, #0]
 800518c:	600b      	str	r3, [r1, #0]
 800518e:	bf18      	it	ne
 8005190:	b22d      	sxthne	r5, r5
 8005192:	e7ef      	b.n	8005174 <_printf_i+0xbc>
 8005194:	680b      	ldr	r3, [r1, #0]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	1d18      	adds	r0, r3, #4
 800519a:	6008      	str	r0, [r1, #0]
 800519c:	0628      	lsls	r0, r5, #24
 800519e:	d501      	bpl.n	80051a4 <_printf_i+0xec>
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	e002      	b.n	80051aa <_printf_i+0xf2>
 80051a4:	0669      	lsls	r1, r5, #25
 80051a6:	d5fb      	bpl.n	80051a0 <_printf_i+0xe8>
 80051a8:	881d      	ldrh	r5, [r3, #0]
 80051aa:	2f6f      	cmp	r7, #111	; 0x6f
 80051ac:	bf0c      	ite	eq
 80051ae:	2308      	moveq	r3, #8
 80051b0:	230a      	movne	r3, #10
 80051b2:	4852      	ldr	r0, [pc, #328]	; (80052fc <_printf_i+0x244>)
 80051b4:	2100      	movs	r1, #0
 80051b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ba:	6866      	ldr	r6, [r4, #4]
 80051bc:	2e00      	cmp	r6, #0
 80051be:	bfa8      	it	ge
 80051c0:	6821      	ldrge	r1, [r4, #0]
 80051c2:	60a6      	str	r6, [r4, #8]
 80051c4:	bfa4      	itt	ge
 80051c6:	f021 0104 	bicge.w	r1, r1, #4
 80051ca:	6021      	strge	r1, [r4, #0]
 80051cc:	b90d      	cbnz	r5, 80051d2 <_printf_i+0x11a>
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d04d      	beq.n	800526e <_printf_i+0x1b6>
 80051d2:	4616      	mov	r6, r2
 80051d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80051d8:	fb03 5711 	mls	r7, r3, r1, r5
 80051dc:	5dc7      	ldrb	r7, [r0, r7]
 80051de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e2:	462f      	mov	r7, r5
 80051e4:	42bb      	cmp	r3, r7
 80051e6:	460d      	mov	r5, r1
 80051e8:	d9f4      	bls.n	80051d4 <_printf_i+0x11c>
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d10b      	bne.n	8005206 <_printf_i+0x14e>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	07df      	lsls	r7, r3, #31
 80051f2:	d508      	bpl.n	8005206 <_printf_i+0x14e>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6861      	ldr	r1, [r4, #4]
 80051f8:	4299      	cmp	r1, r3
 80051fa:	bfde      	ittt	le
 80051fc:	2330      	movle	r3, #48	; 0x30
 80051fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005202:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005206:	1b92      	subs	r2, r2, r6
 8005208:	6122      	str	r2, [r4, #16]
 800520a:	464b      	mov	r3, r9
 800520c:	4621      	mov	r1, r4
 800520e:	4640      	mov	r0, r8
 8005210:	f8cd a000 	str.w	sl, [sp]
 8005214:	aa03      	add	r2, sp, #12
 8005216:	f7ff fedf 	bl	8004fd8 <_printf_common>
 800521a:	3001      	adds	r0, #1
 800521c:	d14c      	bne.n	80052b8 <_printf_i+0x200>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	b004      	add	sp, #16
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	4834      	ldr	r0, [pc, #208]	; (80052fc <_printf_i+0x244>)
 800522a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800522e:	680e      	ldr	r6, [r1, #0]
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f856 5b04 	ldr.w	r5, [r6], #4
 8005236:	061f      	lsls	r7, r3, #24
 8005238:	600e      	str	r6, [r1, #0]
 800523a:	d514      	bpl.n	8005266 <_printf_i+0x1ae>
 800523c:	07d9      	lsls	r1, r3, #31
 800523e:	bf44      	itt	mi
 8005240:	f043 0320 	orrmi.w	r3, r3, #32
 8005244:	6023      	strmi	r3, [r4, #0]
 8005246:	b91d      	cbnz	r5, 8005250 <_printf_i+0x198>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f023 0320 	bic.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	2310      	movs	r3, #16
 8005252:	e7af      	b.n	80051b4 <_printf_i+0xfc>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	f043 0320 	orr.w	r3, r3, #32
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	2378      	movs	r3, #120	; 0x78
 800525e:	4828      	ldr	r0, [pc, #160]	; (8005300 <_printf_i+0x248>)
 8005260:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005264:	e7e3      	b.n	800522e <_printf_i+0x176>
 8005266:	065e      	lsls	r6, r3, #25
 8005268:	bf48      	it	mi
 800526a:	b2ad      	uxthmi	r5, r5
 800526c:	e7e6      	b.n	800523c <_printf_i+0x184>
 800526e:	4616      	mov	r6, r2
 8005270:	e7bb      	b.n	80051ea <_printf_i+0x132>
 8005272:	680b      	ldr	r3, [r1, #0]
 8005274:	6826      	ldr	r6, [r4, #0]
 8005276:	1d1d      	adds	r5, r3, #4
 8005278:	6960      	ldr	r0, [r4, #20]
 800527a:	600d      	str	r5, [r1, #0]
 800527c:	0635      	lsls	r5, r6, #24
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	d501      	bpl.n	8005286 <_printf_i+0x1ce>
 8005282:	6018      	str	r0, [r3, #0]
 8005284:	e002      	b.n	800528c <_printf_i+0x1d4>
 8005286:	0671      	lsls	r1, r6, #25
 8005288:	d5fb      	bpl.n	8005282 <_printf_i+0x1ca>
 800528a:	8018      	strh	r0, [r3, #0]
 800528c:	2300      	movs	r3, #0
 800528e:	4616      	mov	r6, r2
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	e7ba      	b.n	800520a <_printf_i+0x152>
 8005294:	680b      	ldr	r3, [r1, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	600a      	str	r2, [r1, #0]
 800529a:	681e      	ldr	r6, [r3, #0]
 800529c:	2100      	movs	r1, #0
 800529e:	4630      	mov	r0, r6
 80052a0:	6862      	ldr	r2, [r4, #4]
 80052a2:	f000 fedf 	bl	8006064 <memchr>
 80052a6:	b108      	cbz	r0, 80052ac <_printf_i+0x1f4>
 80052a8:	1b80      	subs	r0, r0, r6
 80052aa:	6060      	str	r0, [r4, #4]
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2300      	movs	r3, #0
 80052b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b6:	e7a8      	b.n	800520a <_printf_i+0x152>
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	47d0      	blx	sl
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0ab      	beq.n	800521e <_printf_i+0x166>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	079b      	lsls	r3, r3, #30
 80052ca:	d413      	bmi.n	80052f4 <_printf_i+0x23c>
 80052cc:	68e0      	ldr	r0, [r4, #12]
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	4298      	cmp	r0, r3
 80052d2:	bfb8      	it	lt
 80052d4:	4618      	movlt	r0, r3
 80052d6:	e7a4      	b.n	8005222 <_printf_i+0x16a>
 80052d8:	2301      	movs	r3, #1
 80052da:	4632      	mov	r2, r6
 80052dc:	4649      	mov	r1, r9
 80052de:	4640      	mov	r0, r8
 80052e0:	47d0      	blx	sl
 80052e2:	3001      	adds	r0, #1
 80052e4:	d09b      	beq.n	800521e <_printf_i+0x166>
 80052e6:	3501      	adds	r5, #1
 80052e8:	68e3      	ldr	r3, [r4, #12]
 80052ea:	9903      	ldr	r1, [sp, #12]
 80052ec:	1a5b      	subs	r3, r3, r1
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	dcf2      	bgt.n	80052d8 <_printf_i+0x220>
 80052f2:	e7eb      	b.n	80052cc <_printf_i+0x214>
 80052f4:	2500      	movs	r5, #0
 80052f6:	f104 0619 	add.w	r6, r4, #25
 80052fa:	e7f5      	b.n	80052e8 <_printf_i+0x230>
 80052fc:	08007962 	.word	0x08007962
 8005300:	08007973 	.word	0x08007973

08005304 <_sbrk_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	2300      	movs	r3, #0
 8005308:	4d05      	ldr	r5, [pc, #20]	; (8005320 <_sbrk_r+0x1c>)
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fd faa6 	bl	8002860 <_sbrk>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_sbrk_r+0x1a>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_sbrk_r+0x1a>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000720 	.word	0x20000720

08005324 <siprintf>:
 8005324:	b40e      	push	{r1, r2, r3}
 8005326:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800532a:	b500      	push	{lr}
 800532c:	b09c      	sub	sp, #112	; 0x70
 800532e:	ab1d      	add	r3, sp, #116	; 0x74
 8005330:	9002      	str	r0, [sp, #8]
 8005332:	9006      	str	r0, [sp, #24]
 8005334:	9107      	str	r1, [sp, #28]
 8005336:	9104      	str	r1, [sp, #16]
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <siprintf+0x38>)
 800533a:	4909      	ldr	r1, [pc, #36]	; (8005360 <siprintf+0x3c>)
 800533c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005340:	9105      	str	r1, [sp, #20]
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	a902      	add	r1, sp, #8
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	f001 faa0 	bl	800688c <_svfiprintf_r>
 800534c:	2200      	movs	r2, #0
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	b01c      	add	sp, #112	; 0x70
 8005354:	f85d eb04 	ldr.w	lr, [sp], #4
 8005358:	b003      	add	sp, #12
 800535a:	4770      	bx	lr
 800535c:	200000c8 	.word	0x200000c8
 8005360:	ffff0208 	.word	0xffff0208

08005364 <quorem>:
 8005364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	6903      	ldr	r3, [r0, #16]
 800536a:	690c      	ldr	r4, [r1, #16]
 800536c:	4607      	mov	r7, r0
 800536e:	42a3      	cmp	r3, r4
 8005370:	f2c0 8083 	blt.w	800547a <quorem+0x116>
 8005374:	3c01      	subs	r4, #1
 8005376:	f100 0514 	add.w	r5, r0, #20
 800537a:	f101 0814 	add.w	r8, r1, #20
 800537e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800538c:	3301      	adds	r3, #1
 800538e:	429a      	cmp	r2, r3
 8005390:	fbb2 f6f3 	udiv	r6, r2, r3
 8005394:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800539c:	d332      	bcc.n	8005404 <quorem+0xa0>
 800539e:	f04f 0e00 	mov.w	lr, #0
 80053a2:	4640      	mov	r0, r8
 80053a4:	46ac      	mov	ip, r5
 80053a6:	46f2      	mov	sl, lr
 80053a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80053ac:	b293      	uxth	r3, r2
 80053ae:	fb06 e303 	mla	r3, r6, r3, lr
 80053b2:	0c12      	lsrs	r2, r2, #16
 80053b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80053b8:	fb06 e202 	mla	r2, r6, r2, lr
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ebaa 0303 	sub.w	r3, sl, r3
 80053c2:	f8dc a000 	ldr.w	sl, [ip]
 80053c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053ca:	fa1f fa8a 	uxth.w	sl, sl
 80053ce:	4453      	add	r3, sl
 80053d0:	fa1f fa82 	uxth.w	sl, r2
 80053d4:	f8dc 2000 	ldr.w	r2, [ip]
 80053d8:	4581      	cmp	r9, r0
 80053da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80053de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053ec:	f84c 3b04 	str.w	r3, [ip], #4
 80053f0:	d2da      	bcs.n	80053a8 <quorem+0x44>
 80053f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80053f6:	b92b      	cbnz	r3, 8005404 <quorem+0xa0>
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	3b04      	subs	r3, #4
 80053fc:	429d      	cmp	r5, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	d32f      	bcc.n	8005462 <quorem+0xfe>
 8005402:	613c      	str	r4, [r7, #16]
 8005404:	4638      	mov	r0, r7
 8005406:	f001 f8cf 	bl	80065a8 <__mcmp>
 800540a:	2800      	cmp	r0, #0
 800540c:	db25      	blt.n	800545a <quorem+0xf6>
 800540e:	4628      	mov	r0, r5
 8005410:	f04f 0c00 	mov.w	ip, #0
 8005414:	3601      	adds	r6, #1
 8005416:	f858 1b04 	ldr.w	r1, [r8], #4
 800541a:	f8d0 e000 	ldr.w	lr, [r0]
 800541e:	b28b      	uxth	r3, r1
 8005420:	ebac 0303 	sub.w	r3, ip, r3
 8005424:	fa1f f28e 	uxth.w	r2, lr
 8005428:	4413      	add	r3, r2
 800542a:	0c0a      	lsrs	r2, r1, #16
 800542c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800543a:	45c1      	cmp	r9, r8
 800543c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005440:	f840 3b04 	str.w	r3, [r0], #4
 8005444:	d2e7      	bcs.n	8005416 <quorem+0xb2>
 8005446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800544a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800544e:	b922      	cbnz	r2, 800545a <quorem+0xf6>
 8005450:	3b04      	subs	r3, #4
 8005452:	429d      	cmp	r5, r3
 8005454:	461a      	mov	r2, r3
 8005456:	d30a      	bcc.n	800546e <quorem+0x10a>
 8005458:	613c      	str	r4, [r7, #16]
 800545a:	4630      	mov	r0, r6
 800545c:	b003      	add	sp, #12
 800545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	3b04      	subs	r3, #4
 8005466:	2a00      	cmp	r2, #0
 8005468:	d1cb      	bne.n	8005402 <quorem+0x9e>
 800546a:	3c01      	subs	r4, #1
 800546c:	e7c6      	b.n	80053fc <quorem+0x98>
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	3b04      	subs	r3, #4
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1f0      	bne.n	8005458 <quorem+0xf4>
 8005476:	3c01      	subs	r4, #1
 8005478:	e7eb      	b.n	8005452 <quorem+0xee>
 800547a:	2000      	movs	r0, #0
 800547c:	e7ee      	b.n	800545c <quorem+0xf8>
	...

08005480 <_dtoa_r>:
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	4616      	mov	r6, r2
 8005486:	461f      	mov	r7, r3
 8005488:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800548a:	b099      	sub	sp, #100	; 0x64
 800548c:	4605      	mov	r5, r0
 800548e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005492:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005496:	b974      	cbnz	r4, 80054b6 <_dtoa_r+0x36>
 8005498:	2010      	movs	r0, #16
 800549a:	f7ff fa03 	bl	80048a4 <malloc>
 800549e:	4602      	mov	r2, r0
 80054a0:	6268      	str	r0, [r5, #36]	; 0x24
 80054a2:	b920      	cbnz	r0, 80054ae <_dtoa_r+0x2e>
 80054a4:	21ea      	movs	r1, #234	; 0xea
 80054a6:	4bae      	ldr	r3, [pc, #696]	; (8005760 <_dtoa_r+0x2e0>)
 80054a8:	48ae      	ldr	r0, [pc, #696]	; (8005764 <_dtoa_r+0x2e4>)
 80054aa:	f001 faef 	bl	8006a8c <__assert_func>
 80054ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054b2:	6004      	str	r4, [r0, #0]
 80054b4:	60c4      	str	r4, [r0, #12]
 80054b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	b151      	cbz	r1, 80054d2 <_dtoa_r+0x52>
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	2301      	movs	r3, #1
 80054c0:	4093      	lsls	r3, r2
 80054c2:	604a      	str	r2, [r1, #4]
 80054c4:	608b      	str	r3, [r1, #8]
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fe34 	bl	8006134 <_Bfree>
 80054cc:	2200      	movs	r2, #0
 80054ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	1e3b      	subs	r3, r7, #0
 80054d4:	bfaf      	iteee	ge
 80054d6:	2300      	movge	r3, #0
 80054d8:	2201      	movlt	r2, #1
 80054da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054de:	9305      	strlt	r3, [sp, #20]
 80054e0:	bfa8      	it	ge
 80054e2:	f8c8 3000 	strge.w	r3, [r8]
 80054e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054ea:	4b9f      	ldr	r3, [pc, #636]	; (8005768 <_dtoa_r+0x2e8>)
 80054ec:	bfb8      	it	lt
 80054ee:	f8c8 2000 	strlt.w	r2, [r8]
 80054f2:	ea33 0309 	bics.w	r3, r3, r9
 80054f6:	d119      	bne.n	800552c <_dtoa_r+0xac>
 80054f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80054fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005504:	4333      	orrs	r3, r6
 8005506:	f000 8580 	beq.w	800600a <_dtoa_r+0xb8a>
 800550a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800550c:	b953      	cbnz	r3, 8005524 <_dtoa_r+0xa4>
 800550e:	4b97      	ldr	r3, [pc, #604]	; (800576c <_dtoa_r+0x2ec>)
 8005510:	e022      	b.n	8005558 <_dtoa_r+0xd8>
 8005512:	4b97      	ldr	r3, [pc, #604]	; (8005770 <_dtoa_r+0x2f0>)
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	3308      	adds	r3, #8
 8005518:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	9808      	ldr	r0, [sp, #32]
 800551e:	b019      	add	sp, #100	; 0x64
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	4b91      	ldr	r3, [pc, #580]	; (800576c <_dtoa_r+0x2ec>)
 8005526:	9308      	str	r3, [sp, #32]
 8005528:	3303      	adds	r3, #3
 800552a:	e7f5      	b.n	8005518 <_dtoa_r+0x98>
 800552c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005530:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	f7fb fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8005540:	4680      	mov	r8, r0
 8005542:	b158      	cbz	r0, 800555c <_dtoa_r+0xdc>
 8005544:	2301      	movs	r3, #1
 8005546:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8559 	beq.w	8006004 <_dtoa_r+0xb84>
 8005552:	4888      	ldr	r0, [pc, #544]	; (8005774 <_dtoa_r+0x2f4>)
 8005554:	6018      	str	r0, [r3, #0]
 8005556:	1e43      	subs	r3, r0, #1
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	e7df      	b.n	800551c <_dtoa_r+0x9c>
 800555c:	ab16      	add	r3, sp, #88	; 0x58
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	ab17      	add	r3, sp, #92	; 0x5c
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	4628      	mov	r0, r5
 8005566:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800556a:	f001 f8c9 	bl	8006700 <__d2b>
 800556e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005572:	4682      	mov	sl, r0
 8005574:	2c00      	cmp	r4, #0
 8005576:	d07e      	beq.n	8005676 <_dtoa_r+0x1f6>
 8005578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800557c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800557e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005586:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800558a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800558e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005592:	2200      	movs	r2, #0
 8005594:	4b78      	ldr	r3, [pc, #480]	; (8005778 <_dtoa_r+0x2f8>)
 8005596:	f7fa fde7 	bl	8000168 <__aeabi_dsub>
 800559a:	a36b      	add	r3, pc, #428	; (adr r3, 8005748 <_dtoa_r+0x2c8>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fa ff9a 	bl	80004d8 <__aeabi_dmul>
 80055a4:	a36a      	add	r3, pc, #424	; (adr r3, 8005750 <_dtoa_r+0x2d0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f7fa fddf 	bl	800016c <__adddf3>
 80055ae:	4606      	mov	r6, r0
 80055b0:	4620      	mov	r0, r4
 80055b2:	460f      	mov	r7, r1
 80055b4:	f7fa ff26 	bl	8000404 <__aeabi_i2d>
 80055b8:	a367      	add	r3, pc, #412	; (adr r3, 8005758 <_dtoa_r+0x2d8>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fa ff8b 	bl	80004d8 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fa fdcf 	bl	800016c <__adddf3>
 80055ce:	4606      	mov	r6, r0
 80055d0:	460f      	mov	r7, r1
 80055d2:	f7fb fa31 	bl	8000a38 <__aeabi_d2iz>
 80055d6:	2200      	movs	r2, #0
 80055d8:	4681      	mov	r9, r0
 80055da:	2300      	movs	r3, #0
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fb f9ec 	bl	80009bc <__aeabi_dcmplt>
 80055e4:	b148      	cbz	r0, 80055fa <_dtoa_r+0x17a>
 80055e6:	4648      	mov	r0, r9
 80055e8:	f7fa ff0c 	bl	8000404 <__aeabi_i2d>
 80055ec:	4632      	mov	r2, r6
 80055ee:	463b      	mov	r3, r7
 80055f0:	f7fb f9da 	bl	80009a8 <__aeabi_dcmpeq>
 80055f4:	b908      	cbnz	r0, 80055fa <_dtoa_r+0x17a>
 80055f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80055fa:	f1b9 0f16 	cmp.w	r9, #22
 80055fe:	d857      	bhi.n	80056b0 <_dtoa_r+0x230>
 8005600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005604:	4b5d      	ldr	r3, [pc, #372]	; (800577c <_dtoa_r+0x2fc>)
 8005606:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fb f9d5 	bl	80009bc <__aeabi_dcmplt>
 8005612:	2800      	cmp	r0, #0
 8005614:	d04e      	beq.n	80056b4 <_dtoa_r+0x234>
 8005616:	2300      	movs	r3, #0
 8005618:	f109 39ff 	add.w	r9, r9, #4294967295
 800561c:	930f      	str	r3, [sp, #60]	; 0x3c
 800561e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005620:	1b1c      	subs	r4, r3, r4
 8005622:	1e63      	subs	r3, r4, #1
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	bf49      	itett	mi
 8005628:	f1c4 0301 	rsbmi	r3, r4, #1
 800562c:	2300      	movpl	r3, #0
 800562e:	9306      	strmi	r3, [sp, #24]
 8005630:	2300      	movmi	r3, #0
 8005632:	bf54      	ite	pl
 8005634:	9306      	strpl	r3, [sp, #24]
 8005636:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005638:	f1b9 0f00 	cmp.w	r9, #0
 800563c:	db3c      	blt.n	80056b8 <_dtoa_r+0x238>
 800563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005640:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005644:	444b      	add	r3, r9
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	2300      	movs	r3, #0
 800564a:	930a      	str	r3, [sp, #40]	; 0x28
 800564c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800564e:	2b09      	cmp	r3, #9
 8005650:	d86c      	bhi.n	800572c <_dtoa_r+0x2ac>
 8005652:	2b05      	cmp	r3, #5
 8005654:	bfc4      	itt	gt
 8005656:	3b04      	subgt	r3, #4
 8005658:	9322      	strgt	r3, [sp, #136]	; 0x88
 800565a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800565c:	bfc8      	it	gt
 800565e:	2400      	movgt	r4, #0
 8005660:	f1a3 0302 	sub.w	r3, r3, #2
 8005664:	bfd8      	it	le
 8005666:	2401      	movle	r4, #1
 8005668:	2b03      	cmp	r3, #3
 800566a:	f200 808b 	bhi.w	8005784 <_dtoa_r+0x304>
 800566e:	e8df f003 	tbb	[pc, r3]
 8005672:	4f2d      	.short	0x4f2d
 8005674:	5b4d      	.short	0x5b4d
 8005676:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800567a:	441c      	add	r4, r3
 800567c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005680:	2b20      	cmp	r3, #32
 8005682:	bfc3      	ittte	gt
 8005684:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005688:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800568c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005690:	f1c3 0320 	rsble	r3, r3, #32
 8005694:	bfc6      	itte	gt
 8005696:	fa26 f000 	lsrgt.w	r0, r6, r0
 800569a:	4318      	orrgt	r0, r3
 800569c:	fa06 f003 	lslle.w	r0, r6, r3
 80056a0:	f7fa fea0 	bl	80003e4 <__aeabi_ui2d>
 80056a4:	2301      	movs	r3, #1
 80056a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80056aa:	3c01      	subs	r4, #1
 80056ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80056ae:	e770      	b.n	8005592 <_dtoa_r+0x112>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e7b3      	b.n	800561c <_dtoa_r+0x19c>
 80056b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80056b6:	e7b2      	b.n	800561e <_dtoa_r+0x19e>
 80056b8:	9b06      	ldr	r3, [sp, #24]
 80056ba:	eba3 0309 	sub.w	r3, r3, r9
 80056be:	9306      	str	r3, [sp, #24]
 80056c0:	f1c9 0300 	rsb	r3, r9, #0
 80056c4:	930a      	str	r3, [sp, #40]	; 0x28
 80056c6:	2300      	movs	r3, #0
 80056c8:	930e      	str	r3, [sp, #56]	; 0x38
 80056ca:	e7bf      	b.n	800564c <_dtoa_r+0x1cc>
 80056cc:	2300      	movs	r3, #0
 80056ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80056d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dc59      	bgt.n	800578a <_dtoa_r+0x30a>
 80056d6:	f04f 0b01 	mov.w	fp, #1
 80056da:	465b      	mov	r3, fp
 80056dc:	f8cd b008 	str.w	fp, [sp, #8]
 80056e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80056e4:	2200      	movs	r2, #0
 80056e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056e8:	6042      	str	r2, [r0, #4]
 80056ea:	2204      	movs	r2, #4
 80056ec:	f102 0614 	add.w	r6, r2, #20
 80056f0:	429e      	cmp	r6, r3
 80056f2:	6841      	ldr	r1, [r0, #4]
 80056f4:	d94f      	bls.n	8005796 <_dtoa_r+0x316>
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 fcdc 	bl	80060b4 <_Balloc>
 80056fc:	9008      	str	r0, [sp, #32]
 80056fe:	2800      	cmp	r0, #0
 8005700:	d14d      	bne.n	800579e <_dtoa_r+0x31e>
 8005702:	4602      	mov	r2, r0
 8005704:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <_dtoa_r+0x300>)
 800570a:	e6cd      	b.n	80054a8 <_dtoa_r+0x28>
 800570c:	2301      	movs	r3, #1
 800570e:	e7de      	b.n	80056ce <_dtoa_r+0x24e>
 8005710:	2300      	movs	r3, #0
 8005712:	930b      	str	r3, [sp, #44]	; 0x2c
 8005714:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005716:	eb09 0b03 	add.w	fp, r9, r3
 800571a:	f10b 0301 	add.w	r3, fp, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	9302      	str	r3, [sp, #8]
 8005722:	bfb8      	it	lt
 8005724:	2301      	movlt	r3, #1
 8005726:	e7dd      	b.n	80056e4 <_dtoa_r+0x264>
 8005728:	2301      	movs	r3, #1
 800572a:	e7f2      	b.n	8005712 <_dtoa_r+0x292>
 800572c:	2401      	movs	r4, #1
 800572e:	2300      	movs	r3, #0
 8005730:	940b      	str	r4, [sp, #44]	; 0x2c
 8005732:	9322      	str	r3, [sp, #136]	; 0x88
 8005734:	f04f 3bff 	mov.w	fp, #4294967295
 8005738:	2200      	movs	r2, #0
 800573a:	2312      	movs	r3, #18
 800573c:	f8cd b008 	str.w	fp, [sp, #8]
 8005740:	9223      	str	r2, [sp, #140]	; 0x8c
 8005742:	e7cf      	b.n	80056e4 <_dtoa_r+0x264>
 8005744:	f3af 8000 	nop.w
 8005748:	636f4361 	.word	0x636f4361
 800574c:	3fd287a7 	.word	0x3fd287a7
 8005750:	8b60c8b3 	.word	0x8b60c8b3
 8005754:	3fc68a28 	.word	0x3fc68a28
 8005758:	509f79fb 	.word	0x509f79fb
 800575c:	3fd34413 	.word	0x3fd34413
 8005760:	08007991 	.word	0x08007991
 8005764:	080079a8 	.word	0x080079a8
 8005768:	7ff00000 	.word	0x7ff00000
 800576c:	0800798d 	.word	0x0800798d
 8005770:	08007984 	.word	0x08007984
 8005774:	08007961 	.word	0x08007961
 8005778:	3ff80000 	.word	0x3ff80000
 800577c:	08007aa0 	.word	0x08007aa0
 8005780:	08007a07 	.word	0x08007a07
 8005784:	2301      	movs	r3, #1
 8005786:	930b      	str	r3, [sp, #44]	; 0x2c
 8005788:	e7d4      	b.n	8005734 <_dtoa_r+0x2b4>
 800578a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800578e:	465b      	mov	r3, fp
 8005790:	f8cd b008 	str.w	fp, [sp, #8]
 8005794:	e7a6      	b.n	80056e4 <_dtoa_r+0x264>
 8005796:	3101      	adds	r1, #1
 8005798:	6041      	str	r1, [r0, #4]
 800579a:	0052      	lsls	r2, r2, #1
 800579c:	e7a6      	b.n	80056ec <_dtoa_r+0x26c>
 800579e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057a0:	9a08      	ldr	r2, [sp, #32]
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	2b0e      	cmp	r3, #14
 80057a8:	f200 80a8 	bhi.w	80058fc <_dtoa_r+0x47c>
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	f000 80a5 	beq.w	80058fc <_dtoa_r+0x47c>
 80057b2:	f1b9 0f00 	cmp.w	r9, #0
 80057b6:	dd34      	ble.n	8005822 <_dtoa_r+0x3a2>
 80057b8:	4a9a      	ldr	r2, [pc, #616]	; (8005a24 <_dtoa_r+0x5a4>)
 80057ba:	f009 030f 	and.w	r3, r9, #15
 80057be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80057c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 80057d2:	d016      	beq.n	8005802 <_dtoa_r+0x382>
 80057d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057d8:	4b93      	ldr	r3, [pc, #588]	; (8005a28 <_dtoa_r+0x5a8>)
 80057da:	2703      	movs	r7, #3
 80057dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057e0:	f7fa ffa4 	bl	800072c <__aeabi_ddiv>
 80057e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e8:	f004 040f 	and.w	r4, r4, #15
 80057ec:	4e8e      	ldr	r6, [pc, #568]	; (8005a28 <_dtoa_r+0x5a8>)
 80057ee:	b954      	cbnz	r4, 8005806 <_dtoa_r+0x386>
 80057f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f8:	f7fa ff98 	bl	800072c <__aeabi_ddiv>
 80057fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005800:	e029      	b.n	8005856 <_dtoa_r+0x3d6>
 8005802:	2702      	movs	r7, #2
 8005804:	e7f2      	b.n	80057ec <_dtoa_r+0x36c>
 8005806:	07e1      	lsls	r1, r4, #31
 8005808:	d508      	bpl.n	800581c <_dtoa_r+0x39c>
 800580a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800580e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005812:	f7fa fe61 	bl	80004d8 <__aeabi_dmul>
 8005816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800581a:	3701      	adds	r7, #1
 800581c:	1064      	asrs	r4, r4, #1
 800581e:	3608      	adds	r6, #8
 8005820:	e7e5      	b.n	80057ee <_dtoa_r+0x36e>
 8005822:	f000 80a5 	beq.w	8005970 <_dtoa_r+0x4f0>
 8005826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800582a:	f1c9 0400 	rsb	r4, r9, #0
 800582e:	4b7d      	ldr	r3, [pc, #500]	; (8005a24 <_dtoa_r+0x5a4>)
 8005830:	f004 020f 	and.w	r2, r4, #15
 8005834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fa fe4c 	bl	80004d8 <__aeabi_dmul>
 8005840:	2702      	movs	r7, #2
 8005842:	2300      	movs	r3, #0
 8005844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005848:	4e77      	ldr	r6, [pc, #476]	; (8005a28 <_dtoa_r+0x5a8>)
 800584a:	1124      	asrs	r4, r4, #4
 800584c:	2c00      	cmp	r4, #0
 800584e:	f040 8084 	bne.w	800595a <_dtoa_r+0x4da>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1d2      	bne.n	80057fc <_dtoa_r+0x37c>
 8005856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 808b 	beq.w	8005974 <_dtoa_r+0x4f4>
 800585e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005862:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005866:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800586a:	2200      	movs	r2, #0
 800586c:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <_dtoa_r+0x5ac>)
 800586e:	f7fb f8a5 	bl	80009bc <__aeabi_dcmplt>
 8005872:	2800      	cmp	r0, #0
 8005874:	d07e      	beq.n	8005974 <_dtoa_r+0x4f4>
 8005876:	9b02      	ldr	r3, [sp, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d07b      	beq.n	8005974 <_dtoa_r+0x4f4>
 800587c:	f1bb 0f00 	cmp.w	fp, #0
 8005880:	dd38      	ble.n	80058f4 <_dtoa_r+0x474>
 8005882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005886:	2200      	movs	r2, #0
 8005888:	4b69      	ldr	r3, [pc, #420]	; (8005a30 <_dtoa_r+0x5b0>)
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	465c      	mov	r4, fp
 8005890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005894:	f109 38ff 	add.w	r8, r9, #4294967295
 8005898:	3701      	adds	r7, #1
 800589a:	4638      	mov	r0, r7
 800589c:	f7fa fdb2 	bl	8000404 <__aeabi_i2d>
 80058a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a4:	f7fa fe18 	bl	80004d8 <__aeabi_dmul>
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <_dtoa_r+0x5b4>)
 80058ac:	f7fa fc5e 	bl	800016c <__adddf3>
 80058b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80058b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058b8:	9611      	str	r6, [sp, #68]	; 0x44
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	d15d      	bne.n	800597a <_dtoa_r+0x4fa>
 80058be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b5c      	ldr	r3, [pc, #368]	; (8005a38 <_dtoa_r+0x5b8>)
 80058c6:	f7fa fc4f 	bl	8000168 <__aeabi_dsub>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058d2:	4633      	mov	r3, r6
 80058d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058d6:	f7fb f88f 	bl	80009f8 <__aeabi_dcmpgt>
 80058da:	2800      	cmp	r0, #0
 80058dc:	f040 829e 	bne.w	8005e1c <_dtoa_r+0x99c>
 80058e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058ea:	f7fb f867 	bl	80009bc <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f040 8292 	bne.w	8005e18 <_dtoa_r+0x998>
 80058f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f2c0 8153 	blt.w	8005baa <_dtoa_r+0x72a>
 8005904:	f1b9 0f0e 	cmp.w	r9, #14
 8005908:	f300 814f 	bgt.w	8005baa <_dtoa_r+0x72a>
 800590c:	4b45      	ldr	r3, [pc, #276]	; (8005a24 <_dtoa_r+0x5a4>)
 800590e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005912:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005916:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800591a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800591c:	2b00      	cmp	r3, #0
 800591e:	f280 80db 	bge.w	8005ad8 <_dtoa_r+0x658>
 8005922:	9b02      	ldr	r3, [sp, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f300 80d7 	bgt.w	8005ad8 <_dtoa_r+0x658>
 800592a:	f040 8274 	bne.w	8005e16 <_dtoa_r+0x996>
 800592e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005932:	2200      	movs	r2, #0
 8005934:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <_dtoa_r+0x5b8>)
 8005936:	f7fa fdcf 	bl	80004d8 <__aeabi_dmul>
 800593a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800593e:	f7fb f851 	bl	80009e4 <__aeabi_dcmpge>
 8005942:	9c02      	ldr	r4, [sp, #8]
 8005944:	4626      	mov	r6, r4
 8005946:	2800      	cmp	r0, #0
 8005948:	f040 824a 	bne.w	8005de0 <_dtoa_r+0x960>
 800594c:	2331      	movs	r3, #49	; 0x31
 800594e:	9f08      	ldr	r7, [sp, #32]
 8005950:	f109 0901 	add.w	r9, r9, #1
 8005954:	f807 3b01 	strb.w	r3, [r7], #1
 8005958:	e246      	b.n	8005de8 <_dtoa_r+0x968>
 800595a:	07e2      	lsls	r2, r4, #31
 800595c:	d505      	bpl.n	800596a <_dtoa_r+0x4ea>
 800595e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005962:	f7fa fdb9 	bl	80004d8 <__aeabi_dmul>
 8005966:	2301      	movs	r3, #1
 8005968:	3701      	adds	r7, #1
 800596a:	1064      	asrs	r4, r4, #1
 800596c:	3608      	adds	r6, #8
 800596e:	e76d      	b.n	800584c <_dtoa_r+0x3cc>
 8005970:	2702      	movs	r7, #2
 8005972:	e770      	b.n	8005856 <_dtoa_r+0x3d6>
 8005974:	46c8      	mov	r8, r9
 8005976:	9c02      	ldr	r4, [sp, #8]
 8005978:	e78f      	b.n	800589a <_dtoa_r+0x41a>
 800597a:	9908      	ldr	r1, [sp, #32]
 800597c:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <_dtoa_r+0x5a4>)
 800597e:	4421      	add	r1, r4
 8005980:	9112      	str	r1, [sp, #72]	; 0x48
 8005982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005984:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005988:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800598c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005990:	2900      	cmp	r1, #0
 8005992:	d055      	beq.n	8005a40 <_dtoa_r+0x5c0>
 8005994:	2000      	movs	r0, #0
 8005996:	4929      	ldr	r1, [pc, #164]	; (8005a3c <_dtoa_r+0x5bc>)
 8005998:	f7fa fec8 	bl	800072c <__aeabi_ddiv>
 800599c:	463b      	mov	r3, r7
 800599e:	4632      	mov	r2, r6
 80059a0:	f7fa fbe2 	bl	8000168 <__aeabi_dsub>
 80059a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059a8:	9f08      	ldr	r7, [sp, #32]
 80059aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ae:	f7fb f843 	bl	8000a38 <__aeabi_d2iz>
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7fa fd26 	bl	8000404 <__aeabi_i2d>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c0:	f7fa fbd2 	bl	8000168 <__aeabi_dsub>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	3430      	adds	r4, #48	; 0x30
 80059ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059d2:	f807 4b01 	strb.w	r4, [r7], #1
 80059d6:	f7fa fff1 	bl	80009bc <__aeabi_dcmplt>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d174      	bne.n	8005ac8 <_dtoa_r+0x648>
 80059de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e2:	2000      	movs	r0, #0
 80059e4:	4911      	ldr	r1, [pc, #68]	; (8005a2c <_dtoa_r+0x5ac>)
 80059e6:	f7fa fbbf 	bl	8000168 <__aeabi_dsub>
 80059ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059ee:	f7fa ffe5 	bl	80009bc <__aeabi_dcmplt>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f040 80b6 	bne.w	8005b64 <_dtoa_r+0x6e4>
 80059f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059fa:	429f      	cmp	r7, r3
 80059fc:	f43f af7a 	beq.w	80058f4 <_dtoa_r+0x474>
 8005a00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a04:	2200      	movs	r2, #0
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <_dtoa_r+0x5b0>)
 8005a08:	f7fa fd66 	bl	80004d8 <__aeabi_dmul>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <_dtoa_r+0x5b0>)
 8005a18:	f7fa fd5e 	bl	80004d8 <__aeabi_dmul>
 8005a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a20:	e7c3      	b.n	80059aa <_dtoa_r+0x52a>
 8005a22:	bf00      	nop
 8005a24:	08007aa0 	.word	0x08007aa0
 8005a28:	08007a78 	.word	0x08007a78
 8005a2c:	3ff00000 	.word	0x3ff00000
 8005a30:	40240000 	.word	0x40240000
 8005a34:	401c0000 	.word	0x401c0000
 8005a38:	40140000 	.word	0x40140000
 8005a3c:	3fe00000 	.word	0x3fe00000
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	f7fa fd48 	bl	80004d8 <__aeabi_dmul>
 8005a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a4e:	9c08      	ldr	r4, [sp, #32]
 8005a50:	9314      	str	r3, [sp, #80]	; 0x50
 8005a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a56:	f7fa ffef 	bl	8000a38 <__aeabi_d2iz>
 8005a5a:	9015      	str	r0, [sp, #84]	; 0x54
 8005a5c:	f7fa fcd2 	bl	8000404 <__aeabi_i2d>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a68:	f7fa fb7e 	bl	8000168 <__aeabi_dsub>
 8005a6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a6e:	4606      	mov	r6, r0
 8005a70:	3330      	adds	r3, #48	; 0x30
 8005a72:	f804 3b01 	strb.w	r3, [r4], #1
 8005a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a78:	460f      	mov	r7, r1
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	d124      	bne.n	8005acc <_dtoa_r+0x64c>
 8005a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a86:	4bb3      	ldr	r3, [pc, #716]	; (8005d54 <_dtoa_r+0x8d4>)
 8005a88:	f7fa fb70 	bl	800016c <__adddf3>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4630      	mov	r0, r6
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7fa ffb0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d162      	bne.n	8005b62 <_dtoa_r+0x6e2>
 8005a9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	49ac      	ldr	r1, [pc, #688]	; (8005d54 <_dtoa_r+0x8d4>)
 8005aa4:	f7fa fb60 	bl	8000168 <__aeabi_dsub>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4630      	mov	r0, r6
 8005aae:	4639      	mov	r1, r7
 8005ab0:	f7fa ff84 	bl	80009bc <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f43f af1d 	beq.w	80058f4 <_dtoa_r+0x474>
 8005aba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005abc:	1e7b      	subs	r3, r7, #1
 8005abe:	9314      	str	r3, [sp, #80]	; 0x50
 8005ac0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ac4:	2b30      	cmp	r3, #48	; 0x30
 8005ac6:	d0f8      	beq.n	8005aba <_dtoa_r+0x63a>
 8005ac8:	46c1      	mov	r9, r8
 8005aca:	e03a      	b.n	8005b42 <_dtoa_r+0x6c2>
 8005acc:	4ba2      	ldr	r3, [pc, #648]	; (8005d58 <_dtoa_r+0x8d8>)
 8005ace:	f7fa fd03 	bl	80004d8 <__aeabi_dmul>
 8005ad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ad6:	e7bc      	b.n	8005a52 <_dtoa_r+0x5d2>
 8005ad8:	9f08      	ldr	r7, [sp, #32]
 8005ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ae2:	f7fa fe23 	bl	800072c <__aeabi_ddiv>
 8005ae6:	f7fa ffa7 	bl	8000a38 <__aeabi_d2iz>
 8005aea:	4604      	mov	r4, r0
 8005aec:	f7fa fc8a 	bl	8000404 <__aeabi_i2d>
 8005af0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005af4:	f7fa fcf0 	bl	80004d8 <__aeabi_dmul>
 8005af8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005afc:	460b      	mov	r3, r1
 8005afe:	4602      	mov	r2, r0
 8005b00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b04:	f7fa fb30 	bl	8000168 <__aeabi_dsub>
 8005b08:	f807 6b01 	strb.w	r6, [r7], #1
 8005b0c:	9e08      	ldr	r6, [sp, #32]
 8005b0e:	9b02      	ldr	r3, [sp, #8]
 8005b10:	1bbe      	subs	r6, r7, r6
 8005b12:	42b3      	cmp	r3, r6
 8005b14:	d13a      	bne.n	8005b8c <_dtoa_r+0x70c>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	f7fa fb27 	bl	800016c <__adddf3>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b2a:	f7fa ff65 	bl	80009f8 <__aeabi_dcmpgt>
 8005b2e:	bb58      	cbnz	r0, 8005b88 <_dtoa_r+0x708>
 8005b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b38:	f7fa ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8005b3c:	b108      	cbz	r0, 8005b42 <_dtoa_r+0x6c2>
 8005b3e:	07e1      	lsls	r1, r4, #31
 8005b40:	d422      	bmi.n	8005b88 <_dtoa_r+0x708>
 8005b42:	4628      	mov	r0, r5
 8005b44:	4651      	mov	r1, sl
 8005b46:	f000 faf5 	bl	8006134 <_Bfree>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	703b      	strb	r3, [r7, #0]
 8005b4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b50:	f109 0001 	add.w	r0, r9, #1
 8005b54:	6018      	str	r0, [r3, #0]
 8005b56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f43f acdf 	beq.w	800551c <_dtoa_r+0x9c>
 8005b5e:	601f      	str	r7, [r3, #0]
 8005b60:	e4dc      	b.n	800551c <_dtoa_r+0x9c>
 8005b62:	4627      	mov	r7, r4
 8005b64:	463b      	mov	r3, r7
 8005b66:	461f      	mov	r7, r3
 8005b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b6c:	2a39      	cmp	r2, #57	; 0x39
 8005b6e:	d107      	bne.n	8005b80 <_dtoa_r+0x700>
 8005b70:	9a08      	ldr	r2, [sp, #32]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d1f7      	bne.n	8005b66 <_dtoa_r+0x6e6>
 8005b76:	2230      	movs	r2, #48	; 0x30
 8005b78:	9908      	ldr	r1, [sp, #32]
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	700a      	strb	r2, [r1, #0]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	3201      	adds	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e79f      	b.n	8005ac8 <_dtoa_r+0x648>
 8005b88:	46c8      	mov	r8, r9
 8005b8a:	e7eb      	b.n	8005b64 <_dtoa_r+0x6e4>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4b72      	ldr	r3, [pc, #456]	; (8005d58 <_dtoa_r+0x8d8>)
 8005b90:	f7fa fca2 	bl	80004d8 <__aeabi_dmul>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f7fa ff02 	bl	80009a8 <__aeabi_dcmpeq>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d098      	beq.n	8005ada <_dtoa_r+0x65a>
 8005ba8:	e7cb      	b.n	8005b42 <_dtoa_r+0x6c2>
 8005baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	f000 80cd 	beq.w	8005d4c <_dtoa_r+0x8cc>
 8005bb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005bb4:	2a01      	cmp	r2, #1
 8005bb6:	f300 80af 	bgt.w	8005d18 <_dtoa_r+0x898>
 8005bba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bbc:	2a00      	cmp	r2, #0
 8005bbe:	f000 80a7 	beq.w	8005d10 <_dtoa_r+0x890>
 8005bc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005bc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bc8:	9f06      	ldr	r7, [sp, #24]
 8005bca:	9a06      	ldr	r2, [sp, #24]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	441a      	add	r2, r3
 8005bd0:	9206      	str	r2, [sp, #24]
 8005bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	441a      	add	r2, r3
 8005bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bda:	f000 fb65 	bl	80062a8 <__i2b>
 8005bde:	4606      	mov	r6, r0
 8005be0:	2f00      	cmp	r7, #0
 8005be2:	dd0c      	ble.n	8005bfe <_dtoa_r+0x77e>
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dd09      	ble.n	8005bfe <_dtoa_r+0x77e>
 8005bea:	42bb      	cmp	r3, r7
 8005bec:	bfa8      	it	ge
 8005bee:	463b      	movge	r3, r7
 8005bf0:	9a06      	ldr	r2, [sp, #24]
 8005bf2:	1aff      	subs	r7, r7, r3
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	9206      	str	r2, [sp, #24]
 8005bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	b1f3      	cbz	r3, 8005c40 <_dtoa_r+0x7c0>
 8005c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a9 	beq.w	8005d5c <_dtoa_r+0x8dc>
 8005c0a:	2c00      	cmp	r4, #0
 8005c0c:	dd10      	ble.n	8005c30 <_dtoa_r+0x7b0>
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4622      	mov	r2, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 fc02 	bl	800641c <__pow5mult>
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fb58 	bl	80062d4 <__multiply>
 8005c24:	4680      	mov	r8, r0
 8005c26:	4651      	mov	r1, sl
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 fa83 	bl	8006134 <_Bfree>
 8005c2e:	46c2      	mov	sl, r8
 8005c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c32:	1b1a      	subs	r2, r3, r4
 8005c34:	d004      	beq.n	8005c40 <_dtoa_r+0x7c0>
 8005c36:	4651      	mov	r1, sl
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 fbef 	bl	800641c <__pow5mult>
 8005c3e:	4682      	mov	sl, r0
 8005c40:	2101      	movs	r1, #1
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 fb30 	bl	80062a8 <__i2b>
 8005c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f340 8087 	ble.w	8005d60 <_dtoa_r+0x8e0>
 8005c52:	461a      	mov	r2, r3
 8005c54:	4601      	mov	r1, r0
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fbe0 	bl	800641c <__pow5mult>
 8005c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c5e:	4604      	mov	r4, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f340 8080 	ble.w	8005d66 <_dtoa_r+0x8e6>
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c70:	6918      	ldr	r0, [r3, #16]
 8005c72:	f000 facb 	bl	800620c <__hi0bits>
 8005c76:	f1c0 0020 	rsb	r0, r0, #32
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	4418      	add	r0, r3
 8005c7e:	f010 001f 	ands.w	r0, r0, #31
 8005c82:	f000 8092 	beq.w	8005daa <_dtoa_r+0x92a>
 8005c86:	f1c0 0320 	rsb	r3, r0, #32
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	f340 808a 	ble.w	8005da4 <_dtoa_r+0x924>
 8005c90:	f1c0 001c 	rsb	r0, r0, #28
 8005c94:	9b06      	ldr	r3, [sp, #24]
 8005c96:	4407      	add	r7, r0
 8005c98:	4403      	add	r3, r0
 8005c9a:	9306      	str	r3, [sp, #24]
 8005c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9e:	4403      	add	r3, r0
 8005ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dd05      	ble.n	8005cb4 <_dtoa_r+0x834>
 8005ca8:	4651      	mov	r1, sl
 8005caa:	461a      	mov	r2, r3
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fc0f 	bl	80064d0 <__lshift>
 8005cb2:	4682      	mov	sl, r0
 8005cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dd05      	ble.n	8005cc6 <_dtoa_r+0x846>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fc06 	bl	80064d0 <__lshift>
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d070      	beq.n	8005dae <_dtoa_r+0x92e>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4650      	mov	r0, sl
 8005cd0:	f000 fc6a 	bl	80065a8 <__mcmp>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	da6a      	bge.n	8005dae <_dtoa_r+0x92e>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4651      	mov	r1, sl
 8005cdc:	220a      	movs	r2, #10
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 fa4a 	bl	8006178 <__multadd>
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce6:	4682      	mov	sl, r0
 8005ce8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8193 	beq.w	8006018 <_dtoa_r+0xb98>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	220a      	movs	r2, #10
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fa3d 	bl	8006178 <__multadd>
 8005cfe:	f1bb 0f00 	cmp.w	fp, #0
 8005d02:	4606      	mov	r6, r0
 8005d04:	f300 8093 	bgt.w	8005e2e <_dtoa_r+0x9ae>
 8005d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	dc57      	bgt.n	8005dbe <_dtoa_r+0x93e>
 8005d0e:	e08e      	b.n	8005e2e <_dtoa_r+0x9ae>
 8005d10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d16:	e756      	b.n	8005bc6 <_dtoa_r+0x746>
 8005d18:	9b02      	ldr	r3, [sp, #8]
 8005d1a:	1e5c      	subs	r4, r3, #1
 8005d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	bfb7      	itett	lt
 8005d22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d24:	1b1c      	subge	r4, r3, r4
 8005d26:	1ae2      	sublt	r2, r4, r3
 8005d28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d2a:	bfbe      	ittt	lt
 8005d2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005d2e:	189b      	addlt	r3, r3, r2
 8005d30:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d32:	9b02      	ldr	r3, [sp, #8]
 8005d34:	bfb8      	it	lt
 8005d36:	2400      	movlt	r4, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbb      	ittet	lt
 8005d3c:	9b06      	ldrlt	r3, [sp, #24]
 8005d3e:	9a02      	ldrlt	r2, [sp, #8]
 8005d40:	9f06      	ldrge	r7, [sp, #24]
 8005d42:	1a9f      	sublt	r7, r3, r2
 8005d44:	bfac      	ite	ge
 8005d46:	9b02      	ldrge	r3, [sp, #8]
 8005d48:	2300      	movlt	r3, #0
 8005d4a:	e73e      	b.n	8005bca <_dtoa_r+0x74a>
 8005d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d4e:	9f06      	ldr	r7, [sp, #24]
 8005d50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d52:	e745      	b.n	8005be0 <_dtoa_r+0x760>
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5e:	e76a      	b.n	8005c36 <_dtoa_r+0x7b6>
 8005d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	dc19      	bgt.n	8005d9a <_dtoa_r+0x91a>
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	b9bb      	cbnz	r3, 8005d9a <_dtoa_r+0x91a>
 8005d6a:	9b05      	ldr	r3, [sp, #20]
 8005d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d70:	b99b      	cbnz	r3, 8005d9a <_dtoa_r+0x91a>
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	0d1b      	lsrs	r3, r3, #20
 8005d7a:	051b      	lsls	r3, r3, #20
 8005d7c:	b183      	cbz	r3, 8005da0 <_dtoa_r+0x920>
 8005d7e:	f04f 0801 	mov.w	r8, #1
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	3301      	adds	r3, #1
 8005d86:	9306      	str	r3, [sp, #24]
 8005d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f47f af6a 	bne.w	8005c6a <_dtoa_r+0x7ea>
 8005d96:	2001      	movs	r0, #1
 8005d98:	e76f      	b.n	8005c7a <_dtoa_r+0x7fa>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	e7f6      	b.n	8005d8e <_dtoa_r+0x90e>
 8005da0:	4698      	mov	r8, r3
 8005da2:	e7f4      	b.n	8005d8e <_dtoa_r+0x90e>
 8005da4:	f43f af7d 	beq.w	8005ca2 <_dtoa_r+0x822>
 8005da8:	4618      	mov	r0, r3
 8005daa:	301c      	adds	r0, #28
 8005dac:	e772      	b.n	8005c94 <_dtoa_r+0x814>
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dc36      	bgt.n	8005e22 <_dtoa_r+0x9a2>
 8005db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	dd33      	ble.n	8005e22 <_dtoa_r+0x9a2>
 8005dba:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005dbe:	f1bb 0f00 	cmp.w	fp, #0
 8005dc2:	d10d      	bne.n	8005de0 <_dtoa_r+0x960>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	2205      	movs	r2, #5
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f9d4 	bl	8006178 <__multadd>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	f000 fbe7 	bl	80065a8 <__mcmp>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f73f adb6 	bgt.w	800594c <_dtoa_r+0x4cc>
 8005de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005de2:	9f08      	ldr	r7, [sp, #32]
 8005de4:	ea6f 0903 	mvn.w	r9, r3
 8005de8:	f04f 0800 	mov.w	r8, #0
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f9a0 	bl	8006134 <_Bfree>
 8005df4:	2e00      	cmp	r6, #0
 8005df6:	f43f aea4 	beq.w	8005b42 <_dtoa_r+0x6c2>
 8005dfa:	f1b8 0f00 	cmp.w	r8, #0
 8005dfe:	d005      	beq.n	8005e0c <_dtoa_r+0x98c>
 8005e00:	45b0      	cmp	r8, r6
 8005e02:	d003      	beq.n	8005e0c <_dtoa_r+0x98c>
 8005e04:	4641      	mov	r1, r8
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f994 	bl	8006134 <_Bfree>
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f990 	bl	8006134 <_Bfree>
 8005e14:	e695      	b.n	8005b42 <_dtoa_r+0x6c2>
 8005e16:	2400      	movs	r4, #0
 8005e18:	4626      	mov	r6, r4
 8005e1a:	e7e1      	b.n	8005de0 <_dtoa_r+0x960>
 8005e1c:	46c1      	mov	r9, r8
 8005e1e:	4626      	mov	r6, r4
 8005e20:	e594      	b.n	800594c <_dtoa_r+0x4cc>
 8005e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e24:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80fc 	beq.w	8006026 <_dtoa_r+0xba6>
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	dd05      	ble.n	8005e3e <_dtoa_r+0x9be>
 8005e32:	4631      	mov	r1, r6
 8005e34:	463a      	mov	r2, r7
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fb4a 	bl	80064d0 <__lshift>
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	f1b8 0f00 	cmp.w	r8, #0
 8005e42:	d05c      	beq.n	8005efe <_dtoa_r+0xa7e>
 8005e44:	4628      	mov	r0, r5
 8005e46:	6871      	ldr	r1, [r6, #4]
 8005e48:	f000 f934 	bl	80060b4 <_Balloc>
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	b928      	cbnz	r0, 8005e5c <_dtoa_r+0x9dc>
 8005e50:	4602      	mov	r2, r0
 8005e52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e56:	4b7e      	ldr	r3, [pc, #504]	; (8006050 <_dtoa_r+0xbd0>)
 8005e58:	f7ff bb26 	b.w	80054a8 <_dtoa_r+0x28>
 8005e5c:	6932      	ldr	r2, [r6, #16]
 8005e5e:	f106 010c 	add.w	r1, r6, #12
 8005e62:	3202      	adds	r2, #2
 8005e64:	0092      	lsls	r2, r2, #2
 8005e66:	300c      	adds	r0, #12
 8005e68:	f000 f90a 	bl	8006080 <memcpy>
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 fb2d 	bl	80064d0 <__lshift>
 8005e76:	46b0      	mov	r8, r6
 8005e78:	4606      	mov	r6, r0
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	9302      	str	r3, [sp, #8]
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	445b      	add	r3, fp
 8005e84:	930a      	str	r3, [sp, #40]	; 0x28
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	4621      	mov	r1, r4
 8005e92:	4650      	mov	r0, sl
 8005e94:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e98:	f7ff fa64 	bl	8005364 <quorem>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4641      	mov	r1, r8
 8005ea0:	3330      	adds	r3, #48	; 0x30
 8005ea2:	9004      	str	r0, [sp, #16]
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea8:	f000 fb7e 	bl	80065a8 <__mcmp>
 8005eac:	4632      	mov	r2, r6
 8005eae:	9006      	str	r0, [sp, #24]
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f000 fb94 	bl	80065e0 <__mdiff>
 8005eb8:	68c2      	ldr	r2, [r0, #12]
 8005eba:	4607      	mov	r7, r0
 8005ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ebe:	bb02      	cbnz	r2, 8005f02 <_dtoa_r+0xa82>
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f000 fb70 	bl	80065a8 <__mcmp>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ecc:	4639      	mov	r1, r7
 8005ece:	4628      	mov	r0, r5
 8005ed0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005ed4:	f000 f92e 	bl	8006134 <_Bfree>
 8005ed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005edc:	9f02      	ldr	r7, [sp, #8]
 8005ede:	ea43 0102 	orr.w	r1, r3, r2
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee8:	d10d      	bne.n	8005f06 <_dtoa_r+0xa86>
 8005eea:	2b39      	cmp	r3, #57	; 0x39
 8005eec:	d027      	beq.n	8005f3e <_dtoa_r+0xabe>
 8005eee:	9a06      	ldr	r2, [sp, #24]
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	dd01      	ble.n	8005ef8 <_dtoa_r+0xa78>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	3331      	adds	r3, #49	; 0x31
 8005ef8:	f88b 3000 	strb.w	r3, [fp]
 8005efc:	e776      	b.n	8005dec <_dtoa_r+0x96c>
 8005efe:	4630      	mov	r0, r6
 8005f00:	e7b9      	b.n	8005e76 <_dtoa_r+0x9f6>
 8005f02:	2201      	movs	r2, #1
 8005f04:	e7e2      	b.n	8005ecc <_dtoa_r+0xa4c>
 8005f06:	9906      	ldr	r1, [sp, #24]
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	db04      	blt.n	8005f16 <_dtoa_r+0xa96>
 8005f0c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005f0e:	4301      	orrs	r1, r0
 8005f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f12:	4301      	orrs	r1, r0
 8005f14:	d120      	bne.n	8005f58 <_dtoa_r+0xad8>
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	ddee      	ble.n	8005ef8 <_dtoa_r+0xa78>
 8005f1a:	4651      	mov	r1, sl
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	4628      	mov	r0, r5
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	f000 fad5 	bl	80064d0 <__lshift>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4682      	mov	sl, r0
 8005f2a:	f000 fb3d 	bl	80065a8 <__mcmp>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	9b02      	ldr	r3, [sp, #8]
 8005f32:	dc02      	bgt.n	8005f3a <_dtoa_r+0xaba>
 8005f34:	d1e0      	bne.n	8005ef8 <_dtoa_r+0xa78>
 8005f36:	07da      	lsls	r2, r3, #31
 8005f38:	d5de      	bpl.n	8005ef8 <_dtoa_r+0xa78>
 8005f3a:	2b39      	cmp	r3, #57	; 0x39
 8005f3c:	d1da      	bne.n	8005ef4 <_dtoa_r+0xa74>
 8005f3e:	2339      	movs	r3, #57	; 0x39
 8005f40:	f88b 3000 	strb.w	r3, [fp]
 8005f44:	463b      	mov	r3, r7
 8005f46:	461f      	mov	r7, r3
 8005f48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	2a39      	cmp	r2, #57	; 0x39
 8005f50:	d050      	beq.n	8005ff4 <_dtoa_r+0xb74>
 8005f52:	3201      	adds	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	e749      	b.n	8005dec <_dtoa_r+0x96c>
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	dd03      	ble.n	8005f64 <_dtoa_r+0xae4>
 8005f5c:	2b39      	cmp	r3, #57	; 0x39
 8005f5e:	d0ee      	beq.n	8005f3e <_dtoa_r+0xabe>
 8005f60:	3301      	adds	r3, #1
 8005f62:	e7c9      	b.n	8005ef8 <_dtoa_r+0xa78>
 8005f64:	9a02      	ldr	r2, [sp, #8]
 8005f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f6c:	428a      	cmp	r2, r1
 8005f6e:	d02a      	beq.n	8005fc6 <_dtoa_r+0xb46>
 8005f70:	4651      	mov	r1, sl
 8005f72:	2300      	movs	r3, #0
 8005f74:	220a      	movs	r2, #10
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f8fe 	bl	8006178 <__multadd>
 8005f7c:	45b0      	cmp	r8, r6
 8005f7e:	4682      	mov	sl, r0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 020a 	mov.w	r2, #10
 8005f88:	4641      	mov	r1, r8
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	d107      	bne.n	8005f9e <_dtoa_r+0xb1e>
 8005f8e:	f000 f8f3 	bl	8006178 <__multadd>
 8005f92:	4680      	mov	r8, r0
 8005f94:	4606      	mov	r6, r0
 8005f96:	9b02      	ldr	r3, [sp, #8]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	9302      	str	r3, [sp, #8]
 8005f9c:	e777      	b.n	8005e8e <_dtoa_r+0xa0e>
 8005f9e:	f000 f8eb 	bl	8006178 <__multadd>
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	220a      	movs	r2, #10
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 f8e4 	bl	8006178 <__multadd>
 8005fb0:	4606      	mov	r6, r0
 8005fb2:	e7f0      	b.n	8005f96 <_dtoa_r+0xb16>
 8005fb4:	f1bb 0f00 	cmp.w	fp, #0
 8005fb8:	bfcc      	ite	gt
 8005fba:	465f      	movgt	r7, fp
 8005fbc:	2701      	movle	r7, #1
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	9a08      	ldr	r2, [sp, #32]
 8005fc4:	4417      	add	r7, r2
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4628      	mov	r0, r5
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	f000 fa7f 	bl	80064d0 <__lshift>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4682      	mov	sl, r0
 8005fd6:	f000 fae7 	bl	80065a8 <__mcmp>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	dcb2      	bgt.n	8005f44 <_dtoa_r+0xac4>
 8005fde:	d102      	bne.n	8005fe6 <_dtoa_r+0xb66>
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	07db      	lsls	r3, r3, #31
 8005fe4:	d4ae      	bmi.n	8005f44 <_dtoa_r+0xac4>
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	461f      	mov	r7, r3
 8005fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fee:	2a30      	cmp	r2, #48	; 0x30
 8005ff0:	d0fa      	beq.n	8005fe8 <_dtoa_r+0xb68>
 8005ff2:	e6fb      	b.n	8005dec <_dtoa_r+0x96c>
 8005ff4:	9a08      	ldr	r2, [sp, #32]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d1a5      	bne.n	8005f46 <_dtoa_r+0xac6>
 8005ffa:	2331      	movs	r3, #49	; 0x31
 8005ffc:	f109 0901 	add.w	r9, r9, #1
 8006000:	7013      	strb	r3, [r2, #0]
 8006002:	e6f3      	b.n	8005dec <_dtoa_r+0x96c>
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <_dtoa_r+0xbd4>)
 8006006:	f7ff baa7 	b.w	8005558 <_dtoa_r+0xd8>
 800600a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f aa80 	bne.w	8005512 <_dtoa_r+0x92>
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <_dtoa_r+0xbd8>)
 8006014:	f7ff baa0 	b.w	8005558 <_dtoa_r+0xd8>
 8006018:	f1bb 0f00 	cmp.w	fp, #0
 800601c:	dc03      	bgt.n	8006026 <_dtoa_r+0xba6>
 800601e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006020:	2b02      	cmp	r3, #2
 8006022:	f73f aecc 	bgt.w	8005dbe <_dtoa_r+0x93e>
 8006026:	9f08      	ldr	r7, [sp, #32]
 8006028:	4621      	mov	r1, r4
 800602a:	4650      	mov	r0, sl
 800602c:	f7ff f99a 	bl	8005364 <quorem>
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006036:	f807 3b01 	strb.w	r3, [r7], #1
 800603a:	1aba      	subs	r2, r7, r2
 800603c:	4593      	cmp	fp, r2
 800603e:	ddb9      	ble.n	8005fb4 <_dtoa_r+0xb34>
 8006040:	4651      	mov	r1, sl
 8006042:	2300      	movs	r3, #0
 8006044:	220a      	movs	r2, #10
 8006046:	4628      	mov	r0, r5
 8006048:	f000 f896 	bl	8006178 <__multadd>
 800604c:	4682      	mov	sl, r0
 800604e:	e7eb      	b.n	8006028 <_dtoa_r+0xba8>
 8006050:	08007a07 	.word	0x08007a07
 8006054:	08007960 	.word	0x08007960
 8006058:	08007984 	.word	0x08007984

0800605c <_localeconv_r>:
 800605c:	4800      	ldr	r0, [pc, #0]	; (8006060 <_localeconv_r+0x4>)
 800605e:	4770      	bx	lr
 8006060:	2000021c 	.word	0x2000021c

08006064 <memchr>:
 8006064:	4603      	mov	r3, r0
 8006066:	b510      	push	{r4, lr}
 8006068:	b2c9      	uxtb	r1, r1
 800606a:	4402      	add	r2, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	4618      	mov	r0, r3
 8006070:	d101      	bne.n	8006076 <memchr+0x12>
 8006072:	2000      	movs	r0, #0
 8006074:	e003      	b.n	800607e <memchr+0x1a>
 8006076:	7804      	ldrb	r4, [r0, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	428c      	cmp	r4, r1
 800607c:	d1f6      	bne.n	800606c <memchr+0x8>
 800607e:	bd10      	pop	{r4, pc}

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	4291      	cmp	r1, r2
 8006094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <__malloc_lock>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__malloc_lock+0x8>)
 800609e:	f000 bd26 	b.w	8006aee <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	20000728 	.word	0x20000728

080060a8 <__malloc_unlock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__malloc_unlock+0x8>)
 80060aa:	f000 bd21 	b.w	8006af0 <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	20000728 	.word	0x20000728

080060b4 <_Balloc>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	b976      	cbnz	r6, 80060dc <_Balloc+0x28>
 80060be:	2010      	movs	r0, #16
 80060c0:	f7fe fbf0 	bl	80048a4 <malloc>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6260      	str	r0, [r4, #36]	; 0x24
 80060c8:	b920      	cbnz	r0, 80060d4 <_Balloc+0x20>
 80060ca:	2166      	movs	r1, #102	; 0x66
 80060cc:	4b17      	ldr	r3, [pc, #92]	; (800612c <_Balloc+0x78>)
 80060ce:	4818      	ldr	r0, [pc, #96]	; (8006130 <_Balloc+0x7c>)
 80060d0:	f000 fcdc 	bl	8006a8c <__assert_func>
 80060d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d8:	6006      	str	r6, [r0, #0]
 80060da:	60c6      	str	r6, [r0, #12]
 80060dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060de:	68f3      	ldr	r3, [r6, #12]
 80060e0:	b183      	cbz	r3, 8006104 <_Balloc+0x50>
 80060e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ea:	b9b8      	cbnz	r0, 800611c <_Balloc+0x68>
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f605 	lsl.w	r6, r1, r5
 80060f2:	1d72      	adds	r2, r6, #5
 80060f4:	4620      	mov	r0, r4
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	f000 fb5e 	bl	80067b8 <_calloc_r>
 80060fc:	b160      	cbz	r0, 8006118 <_Balloc+0x64>
 80060fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006102:	e00e      	b.n	8006122 <_Balloc+0x6e>
 8006104:	2221      	movs	r2, #33	; 0x21
 8006106:	2104      	movs	r1, #4
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fb55 	bl	80067b8 <_calloc_r>
 800610e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006110:	60f0      	str	r0, [r6, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <_Balloc+0x2e>
 8006118:	2000      	movs	r0, #0
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	6802      	ldr	r2, [r0, #0]
 800611e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006122:	2300      	movs	r3, #0
 8006124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006128:	e7f7      	b.n	800611a <_Balloc+0x66>
 800612a:	bf00      	nop
 800612c:	08007991 	.word	0x08007991
 8006130:	08007a18 	.word	0x08007a18

08006134 <_Bfree>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	b976      	cbnz	r6, 800615c <_Bfree+0x28>
 800613e:	2010      	movs	r0, #16
 8006140:	f7fe fbb0 	bl	80048a4 <malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	6268      	str	r0, [r5, #36]	; 0x24
 8006148:	b920      	cbnz	r0, 8006154 <_Bfree+0x20>
 800614a:	218a      	movs	r1, #138	; 0x8a
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <_Bfree+0x3c>)
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <_Bfree+0x40>)
 8006150:	f000 fc9c 	bl	8006a8c <__assert_func>
 8006154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006158:	6006      	str	r6, [r0, #0]
 800615a:	60c6      	str	r6, [r0, #12]
 800615c:	b13c      	cbz	r4, 800616e <_Bfree+0x3a>
 800615e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006168:	6021      	str	r1, [r4, #0]
 800616a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	08007991 	.word	0x08007991
 8006174:	08007a18 	.word	0x08007a18

08006178 <__multadd>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	4698      	mov	r8, r3
 800617e:	460c      	mov	r4, r1
 8006180:	2300      	movs	r3, #0
 8006182:	690e      	ldr	r6, [r1, #16]
 8006184:	4607      	mov	r7, r0
 8006186:	f101 0014 	add.w	r0, r1, #20
 800618a:	6805      	ldr	r5, [r0, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	b2a9      	uxth	r1, r5
 8006190:	fb02 8101 	mla	r1, r2, r1, r8
 8006194:	0c2d      	lsrs	r5, r5, #16
 8006196:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800619a:	fb02 c505 	mla	r5, r2, r5, ip
 800619e:	b289      	uxth	r1, r1
 80061a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80061a4:	429e      	cmp	r6, r3
 80061a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80061aa:	f840 1b04 	str.w	r1, [r0], #4
 80061ae:	dcec      	bgt.n	800618a <__multadd+0x12>
 80061b0:	f1b8 0f00 	cmp.w	r8, #0
 80061b4:	d022      	beq.n	80061fc <__multadd+0x84>
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	dc19      	bgt.n	80061f0 <__multadd+0x78>
 80061bc:	6861      	ldr	r1, [r4, #4]
 80061be:	4638      	mov	r0, r7
 80061c0:	3101      	adds	r1, #1
 80061c2:	f7ff ff77 	bl	80060b4 <_Balloc>
 80061c6:	4605      	mov	r5, r0
 80061c8:	b928      	cbnz	r0, 80061d6 <__multadd+0x5e>
 80061ca:	4602      	mov	r2, r0
 80061cc:	21b5      	movs	r1, #181	; 0xb5
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <__multadd+0x8c>)
 80061d0:	480d      	ldr	r0, [pc, #52]	; (8006208 <__multadd+0x90>)
 80061d2:	f000 fc5b 	bl	8006a8c <__assert_func>
 80061d6:	6922      	ldr	r2, [r4, #16]
 80061d8:	f104 010c 	add.w	r1, r4, #12
 80061dc:	3202      	adds	r2, #2
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	300c      	adds	r0, #12
 80061e2:	f7ff ff4d 	bl	8006080 <memcpy>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff ffa3 	bl	8006134 <_Bfree>
 80061ee:	462c      	mov	r4, r5
 80061f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80061f4:	3601      	adds	r6, #1
 80061f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80061fa:	6126      	str	r6, [r4, #16]
 80061fc:	4620      	mov	r0, r4
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006202:	bf00      	nop
 8006204:	08007a07 	.word	0x08007a07
 8006208:	08007a18 	.word	0x08007a18

0800620c <__hi0bits>:
 800620c:	0c02      	lsrs	r2, r0, #16
 800620e:	0412      	lsls	r2, r2, #16
 8006210:	4603      	mov	r3, r0
 8006212:	b9ca      	cbnz	r2, 8006248 <__hi0bits+0x3c>
 8006214:	0403      	lsls	r3, r0, #16
 8006216:	2010      	movs	r0, #16
 8006218:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800621c:	bf04      	itt	eq
 800621e:	021b      	lsleq	r3, r3, #8
 8006220:	3008      	addeq	r0, #8
 8006222:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006226:	bf04      	itt	eq
 8006228:	011b      	lsleq	r3, r3, #4
 800622a:	3004      	addeq	r0, #4
 800622c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006230:	bf04      	itt	eq
 8006232:	009b      	lsleq	r3, r3, #2
 8006234:	3002      	addeq	r0, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	db05      	blt.n	8006246 <__hi0bits+0x3a>
 800623a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800623e:	f100 0001 	add.w	r0, r0, #1
 8006242:	bf08      	it	eq
 8006244:	2020      	moveq	r0, #32
 8006246:	4770      	bx	lr
 8006248:	2000      	movs	r0, #0
 800624a:	e7e5      	b.n	8006218 <__hi0bits+0xc>

0800624c <__lo0bits>:
 800624c:	6803      	ldr	r3, [r0, #0]
 800624e:	4602      	mov	r2, r0
 8006250:	f013 0007 	ands.w	r0, r3, #7
 8006254:	d00b      	beq.n	800626e <__lo0bits+0x22>
 8006256:	07d9      	lsls	r1, r3, #31
 8006258:	d422      	bmi.n	80062a0 <__lo0bits+0x54>
 800625a:	0798      	lsls	r0, r3, #30
 800625c:	bf49      	itett	mi
 800625e:	085b      	lsrmi	r3, r3, #1
 8006260:	089b      	lsrpl	r3, r3, #2
 8006262:	2001      	movmi	r0, #1
 8006264:	6013      	strmi	r3, [r2, #0]
 8006266:	bf5c      	itt	pl
 8006268:	2002      	movpl	r0, #2
 800626a:	6013      	strpl	r3, [r2, #0]
 800626c:	4770      	bx	lr
 800626e:	b299      	uxth	r1, r3
 8006270:	b909      	cbnz	r1, 8006276 <__lo0bits+0x2a>
 8006272:	2010      	movs	r0, #16
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	f013 0fff 	tst.w	r3, #255	; 0xff
 800627a:	bf04      	itt	eq
 800627c:	0a1b      	lsreq	r3, r3, #8
 800627e:	3008      	addeq	r0, #8
 8006280:	0719      	lsls	r1, r3, #28
 8006282:	bf04      	itt	eq
 8006284:	091b      	lsreq	r3, r3, #4
 8006286:	3004      	addeq	r0, #4
 8006288:	0799      	lsls	r1, r3, #30
 800628a:	bf04      	itt	eq
 800628c:	089b      	lsreq	r3, r3, #2
 800628e:	3002      	addeq	r0, #2
 8006290:	07d9      	lsls	r1, r3, #31
 8006292:	d403      	bmi.n	800629c <__lo0bits+0x50>
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	f100 0001 	add.w	r0, r0, #1
 800629a:	d003      	beq.n	80062a4 <__lo0bits+0x58>
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4770      	bx	lr
 80062a0:	2000      	movs	r0, #0
 80062a2:	4770      	bx	lr
 80062a4:	2020      	movs	r0, #32
 80062a6:	4770      	bx	lr

080062a8 <__i2b>:
 80062a8:	b510      	push	{r4, lr}
 80062aa:	460c      	mov	r4, r1
 80062ac:	2101      	movs	r1, #1
 80062ae:	f7ff ff01 	bl	80060b4 <_Balloc>
 80062b2:	4602      	mov	r2, r0
 80062b4:	b928      	cbnz	r0, 80062c2 <__i2b+0x1a>
 80062b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062ba:	4b04      	ldr	r3, [pc, #16]	; (80062cc <__i2b+0x24>)
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <__i2b+0x28>)
 80062be:	f000 fbe5 	bl	8006a8c <__assert_func>
 80062c2:	2301      	movs	r3, #1
 80062c4:	6144      	str	r4, [r0, #20]
 80062c6:	6103      	str	r3, [r0, #16]
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	bf00      	nop
 80062cc:	08007a07 	.word	0x08007a07
 80062d0:	08007a18 	.word	0x08007a18

080062d4 <__multiply>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	4614      	mov	r4, r2
 80062da:	690a      	ldr	r2, [r1, #16]
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	460d      	mov	r5, r1
 80062e0:	429a      	cmp	r2, r3
 80062e2:	bfbe      	ittt	lt
 80062e4:	460b      	movlt	r3, r1
 80062e6:	4625      	movlt	r5, r4
 80062e8:	461c      	movlt	r4, r3
 80062ea:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80062ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062f2:	68ab      	ldr	r3, [r5, #8]
 80062f4:	6869      	ldr	r1, [r5, #4]
 80062f6:	eb0a 0709 	add.w	r7, sl, r9
 80062fa:	42bb      	cmp	r3, r7
 80062fc:	b085      	sub	sp, #20
 80062fe:	bfb8      	it	lt
 8006300:	3101      	addlt	r1, #1
 8006302:	f7ff fed7 	bl	80060b4 <_Balloc>
 8006306:	b930      	cbnz	r0, 8006316 <__multiply+0x42>
 8006308:	4602      	mov	r2, r0
 800630a:	f240 115d 	movw	r1, #349	; 0x15d
 800630e:	4b41      	ldr	r3, [pc, #260]	; (8006414 <__multiply+0x140>)
 8006310:	4841      	ldr	r0, [pc, #260]	; (8006418 <__multiply+0x144>)
 8006312:	f000 fbbb 	bl	8006a8c <__assert_func>
 8006316:	f100 0614 	add.w	r6, r0, #20
 800631a:	4633      	mov	r3, r6
 800631c:	2200      	movs	r2, #0
 800631e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006322:	4543      	cmp	r3, r8
 8006324:	d31e      	bcc.n	8006364 <__multiply+0x90>
 8006326:	f105 0c14 	add.w	ip, r5, #20
 800632a:	f104 0314 	add.w	r3, r4, #20
 800632e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006332:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	ebac 0205 	sub.w	r2, ip, r5
 800633c:	3a15      	subs	r2, #21
 800633e:	f022 0203 	bic.w	r2, r2, #3
 8006342:	3204      	adds	r2, #4
 8006344:	f105 0115 	add.w	r1, r5, #21
 8006348:	458c      	cmp	ip, r1
 800634a:	bf38      	it	cc
 800634c:	2204      	movcc	r2, #4
 800634e:	9201      	str	r2, [sp, #4]
 8006350:	9a02      	ldr	r2, [sp, #8]
 8006352:	9303      	str	r3, [sp, #12]
 8006354:	429a      	cmp	r2, r3
 8006356:	d808      	bhi.n	800636a <__multiply+0x96>
 8006358:	2f00      	cmp	r7, #0
 800635a:	dc55      	bgt.n	8006408 <__multiply+0x134>
 800635c:	6107      	str	r7, [r0, #16]
 800635e:	b005      	add	sp, #20
 8006360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006364:	f843 2b04 	str.w	r2, [r3], #4
 8006368:	e7db      	b.n	8006322 <__multiply+0x4e>
 800636a:	f8b3 a000 	ldrh.w	sl, [r3]
 800636e:	f1ba 0f00 	cmp.w	sl, #0
 8006372:	d020      	beq.n	80063b6 <__multiply+0xe2>
 8006374:	46b1      	mov	r9, r6
 8006376:	2200      	movs	r2, #0
 8006378:	f105 0e14 	add.w	lr, r5, #20
 800637c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006380:	f8d9 b000 	ldr.w	fp, [r9]
 8006384:	b2a1      	uxth	r1, r4
 8006386:	fa1f fb8b 	uxth.w	fp, fp
 800638a:	fb0a b101 	mla	r1, sl, r1, fp
 800638e:	4411      	add	r1, r2
 8006390:	f8d9 2000 	ldr.w	r2, [r9]
 8006394:	0c24      	lsrs	r4, r4, #16
 8006396:	0c12      	lsrs	r2, r2, #16
 8006398:	fb0a 2404 	mla	r4, sl, r4, r2
 800639c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80063a0:	b289      	uxth	r1, r1
 80063a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063a6:	45f4      	cmp	ip, lr
 80063a8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80063ac:	f849 1b04 	str.w	r1, [r9], #4
 80063b0:	d8e4      	bhi.n	800637c <__multiply+0xa8>
 80063b2:	9901      	ldr	r1, [sp, #4]
 80063b4:	5072      	str	r2, [r6, r1]
 80063b6:	9a03      	ldr	r2, [sp, #12]
 80063b8:	3304      	adds	r3, #4
 80063ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063be:	f1b9 0f00 	cmp.w	r9, #0
 80063c2:	d01f      	beq.n	8006404 <__multiply+0x130>
 80063c4:	46b6      	mov	lr, r6
 80063c6:	f04f 0a00 	mov.w	sl, #0
 80063ca:	6834      	ldr	r4, [r6, #0]
 80063cc:	f105 0114 	add.w	r1, r5, #20
 80063d0:	880a      	ldrh	r2, [r1, #0]
 80063d2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80063d6:	b2a4      	uxth	r4, r4
 80063d8:	fb09 b202 	mla	r2, r9, r2, fp
 80063dc:	4492      	add	sl, r2
 80063de:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80063e2:	f84e 4b04 	str.w	r4, [lr], #4
 80063e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80063ea:	f8be 2000 	ldrh.w	r2, [lr]
 80063ee:	0c24      	lsrs	r4, r4, #16
 80063f0:	fb09 2404 	mla	r4, r9, r4, r2
 80063f4:	458c      	cmp	ip, r1
 80063f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80063fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80063fe:	d8e7      	bhi.n	80063d0 <__multiply+0xfc>
 8006400:	9a01      	ldr	r2, [sp, #4]
 8006402:	50b4      	str	r4, [r6, r2]
 8006404:	3604      	adds	r6, #4
 8006406:	e7a3      	b.n	8006350 <__multiply+0x7c>
 8006408:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1a5      	bne.n	800635c <__multiply+0x88>
 8006410:	3f01      	subs	r7, #1
 8006412:	e7a1      	b.n	8006358 <__multiply+0x84>
 8006414:	08007a07 	.word	0x08007a07
 8006418:	08007a18 	.word	0x08007a18

0800641c <__pow5mult>:
 800641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006420:	4615      	mov	r5, r2
 8006422:	f012 0203 	ands.w	r2, r2, #3
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	d007      	beq.n	800643c <__pow5mult+0x20>
 800642c:	4c25      	ldr	r4, [pc, #148]	; (80064c4 <__pow5mult+0xa8>)
 800642e:	3a01      	subs	r2, #1
 8006430:	2300      	movs	r3, #0
 8006432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006436:	f7ff fe9f 	bl	8006178 <__multadd>
 800643a:	4607      	mov	r7, r0
 800643c:	10ad      	asrs	r5, r5, #2
 800643e:	d03d      	beq.n	80064bc <__pow5mult+0xa0>
 8006440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006442:	b97c      	cbnz	r4, 8006464 <__pow5mult+0x48>
 8006444:	2010      	movs	r0, #16
 8006446:	f7fe fa2d 	bl	80048a4 <malloc>
 800644a:	4602      	mov	r2, r0
 800644c:	6270      	str	r0, [r6, #36]	; 0x24
 800644e:	b928      	cbnz	r0, 800645c <__pow5mult+0x40>
 8006450:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006454:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <__pow5mult+0xac>)
 8006456:	481d      	ldr	r0, [pc, #116]	; (80064cc <__pow5mult+0xb0>)
 8006458:	f000 fb18 	bl	8006a8c <__assert_func>
 800645c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006460:	6004      	str	r4, [r0, #0]
 8006462:	60c4      	str	r4, [r0, #12]
 8006464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800646c:	b94c      	cbnz	r4, 8006482 <__pow5mult+0x66>
 800646e:	f240 2171 	movw	r1, #625	; 0x271
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff ff18 	bl	80062a8 <__i2b>
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006480:	6003      	str	r3, [r0, #0]
 8006482:	f04f 0900 	mov.w	r9, #0
 8006486:	07eb      	lsls	r3, r5, #31
 8006488:	d50a      	bpl.n	80064a0 <__pow5mult+0x84>
 800648a:	4639      	mov	r1, r7
 800648c:	4622      	mov	r2, r4
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ff20 	bl	80062d4 <__multiply>
 8006494:	4680      	mov	r8, r0
 8006496:	4639      	mov	r1, r7
 8006498:	4630      	mov	r0, r6
 800649a:	f7ff fe4b 	bl	8006134 <_Bfree>
 800649e:	4647      	mov	r7, r8
 80064a0:	106d      	asrs	r5, r5, #1
 80064a2:	d00b      	beq.n	80064bc <__pow5mult+0xa0>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	b938      	cbnz	r0, 80064b8 <__pow5mult+0x9c>
 80064a8:	4622      	mov	r2, r4
 80064aa:	4621      	mov	r1, r4
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff ff11 	bl	80062d4 <__multiply>
 80064b2:	6020      	str	r0, [r4, #0]
 80064b4:	f8c0 9000 	str.w	r9, [r0]
 80064b8:	4604      	mov	r4, r0
 80064ba:	e7e4      	b.n	8006486 <__pow5mult+0x6a>
 80064bc:	4638      	mov	r0, r7
 80064be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c2:	bf00      	nop
 80064c4:	08007b68 	.word	0x08007b68
 80064c8:	08007991 	.word	0x08007991
 80064cc:	08007a18 	.word	0x08007a18

080064d0 <__lshift>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	4607      	mov	r7, r0
 80064d8:	4691      	mov	r9, r2
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	6849      	ldr	r1, [r1, #4]
 80064de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064e8:	f108 0601 	add.w	r6, r8, #1
 80064ec:	42b3      	cmp	r3, r6
 80064ee:	db0b      	blt.n	8006508 <__lshift+0x38>
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff fddf 	bl	80060b4 <_Balloc>
 80064f6:	4605      	mov	r5, r0
 80064f8:	b948      	cbnz	r0, 800650e <__lshift+0x3e>
 80064fa:	4602      	mov	r2, r0
 80064fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <__lshift+0xd0>)
 8006502:	4828      	ldr	r0, [pc, #160]	; (80065a4 <__lshift+0xd4>)
 8006504:	f000 fac2 	bl	8006a8c <__assert_func>
 8006508:	3101      	adds	r1, #1
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	e7ee      	b.n	80064ec <__lshift+0x1c>
 800650e:	2300      	movs	r3, #0
 8006510:	f100 0114 	add.w	r1, r0, #20
 8006514:	f100 0210 	add.w	r2, r0, #16
 8006518:	4618      	mov	r0, r3
 800651a:	4553      	cmp	r3, sl
 800651c:	db33      	blt.n	8006586 <__lshift+0xb6>
 800651e:	6920      	ldr	r0, [r4, #16]
 8006520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006524:	f104 0314 	add.w	r3, r4, #20
 8006528:	f019 091f 	ands.w	r9, r9, #31
 800652c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006534:	d02b      	beq.n	800658e <__lshift+0xbe>
 8006536:	468a      	mov	sl, r1
 8006538:	2200      	movs	r2, #0
 800653a:	f1c9 0e20 	rsb	lr, r9, #32
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	fa00 f009 	lsl.w	r0, r0, r9
 8006544:	4302      	orrs	r2, r0
 8006546:	f84a 2b04 	str.w	r2, [sl], #4
 800654a:	f853 2b04 	ldr.w	r2, [r3], #4
 800654e:	459c      	cmp	ip, r3
 8006550:	fa22 f20e 	lsr.w	r2, r2, lr
 8006554:	d8f3      	bhi.n	800653e <__lshift+0x6e>
 8006556:	ebac 0304 	sub.w	r3, ip, r4
 800655a:	3b15      	subs	r3, #21
 800655c:	f023 0303 	bic.w	r3, r3, #3
 8006560:	3304      	adds	r3, #4
 8006562:	f104 0015 	add.w	r0, r4, #21
 8006566:	4584      	cmp	ip, r0
 8006568:	bf38      	it	cc
 800656a:	2304      	movcc	r3, #4
 800656c:	50ca      	str	r2, [r1, r3]
 800656e:	b10a      	cbz	r2, 8006574 <__lshift+0xa4>
 8006570:	f108 0602 	add.w	r6, r8, #2
 8006574:	3e01      	subs	r6, #1
 8006576:	4638      	mov	r0, r7
 8006578:	4621      	mov	r1, r4
 800657a:	612e      	str	r6, [r5, #16]
 800657c:	f7ff fdda 	bl	8006134 <_Bfree>
 8006580:	4628      	mov	r0, r5
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	f842 0f04 	str.w	r0, [r2, #4]!
 800658a:	3301      	adds	r3, #1
 800658c:	e7c5      	b.n	800651a <__lshift+0x4a>
 800658e:	3904      	subs	r1, #4
 8006590:	f853 2b04 	ldr.w	r2, [r3], #4
 8006594:	459c      	cmp	ip, r3
 8006596:	f841 2f04 	str.w	r2, [r1, #4]!
 800659a:	d8f9      	bhi.n	8006590 <__lshift+0xc0>
 800659c:	e7ea      	b.n	8006574 <__lshift+0xa4>
 800659e:	bf00      	nop
 80065a0:	08007a07 	.word	0x08007a07
 80065a4:	08007a18 	.word	0x08007a18

080065a8 <__mcmp>:
 80065a8:	4603      	mov	r3, r0
 80065aa:	690a      	ldr	r2, [r1, #16]
 80065ac:	6900      	ldr	r0, [r0, #16]
 80065ae:	b530      	push	{r4, r5, lr}
 80065b0:	1a80      	subs	r0, r0, r2
 80065b2:	d10d      	bne.n	80065d0 <__mcmp+0x28>
 80065b4:	3314      	adds	r3, #20
 80065b6:	3114      	adds	r1, #20
 80065b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065c8:	4295      	cmp	r5, r2
 80065ca:	d002      	beq.n	80065d2 <__mcmp+0x2a>
 80065cc:	d304      	bcc.n	80065d8 <__mcmp+0x30>
 80065ce:	2001      	movs	r0, #1
 80065d0:	bd30      	pop	{r4, r5, pc}
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	d3f4      	bcc.n	80065c0 <__mcmp+0x18>
 80065d6:	e7fb      	b.n	80065d0 <__mcmp+0x28>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e7f8      	b.n	80065d0 <__mcmp+0x28>
	...

080065e0 <__mdiff>:
 80065e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	460c      	mov	r4, r1
 80065e6:	4606      	mov	r6, r0
 80065e8:	4611      	mov	r1, r2
 80065ea:	4620      	mov	r0, r4
 80065ec:	4692      	mov	sl, r2
 80065ee:	f7ff ffdb 	bl	80065a8 <__mcmp>
 80065f2:	1e05      	subs	r5, r0, #0
 80065f4:	d111      	bne.n	800661a <__mdiff+0x3a>
 80065f6:	4629      	mov	r1, r5
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7ff fd5b 	bl	80060b4 <_Balloc>
 80065fe:	4602      	mov	r2, r0
 8006600:	b928      	cbnz	r0, 800660e <__mdiff+0x2e>
 8006602:	f240 2132 	movw	r1, #562	; 0x232
 8006606:	4b3c      	ldr	r3, [pc, #240]	; (80066f8 <__mdiff+0x118>)
 8006608:	483c      	ldr	r0, [pc, #240]	; (80066fc <__mdiff+0x11c>)
 800660a:	f000 fa3f 	bl	8006a8c <__assert_func>
 800660e:	2301      	movs	r3, #1
 8006610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006614:	4610      	mov	r0, r2
 8006616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	bfa4      	itt	ge
 800661c:	4653      	movge	r3, sl
 800661e:	46a2      	movge	sl, r4
 8006620:	4630      	mov	r0, r6
 8006622:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006626:	bfa6      	itte	ge
 8006628:	461c      	movge	r4, r3
 800662a:	2500      	movge	r5, #0
 800662c:	2501      	movlt	r5, #1
 800662e:	f7ff fd41 	bl	80060b4 <_Balloc>
 8006632:	4602      	mov	r2, r0
 8006634:	b918      	cbnz	r0, 800663e <__mdiff+0x5e>
 8006636:	f44f 7110 	mov.w	r1, #576	; 0x240
 800663a:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <__mdiff+0x118>)
 800663c:	e7e4      	b.n	8006608 <__mdiff+0x28>
 800663e:	f100 0814 	add.w	r8, r0, #20
 8006642:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006646:	60c5      	str	r5, [r0, #12]
 8006648:	f04f 0c00 	mov.w	ip, #0
 800664c:	f10a 0514 	add.w	r5, sl, #20
 8006650:	f10a 0010 	add.w	r0, sl, #16
 8006654:	46c2      	mov	sl, r8
 8006656:	6926      	ldr	r6, [r4, #16]
 8006658:	f104 0914 	add.w	r9, r4, #20
 800665c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006664:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006668:	f859 3b04 	ldr.w	r3, [r9], #4
 800666c:	fa1f f18b 	uxth.w	r1, fp
 8006670:	4461      	add	r1, ip
 8006672:	fa1f fc83 	uxth.w	ip, r3
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	eba1 010c 	sub.w	r1, r1, ip
 800667c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006680:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006684:	b289      	uxth	r1, r1
 8006686:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800668a:	454e      	cmp	r6, r9
 800668c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006690:	f84a 3b04 	str.w	r3, [sl], #4
 8006694:	d8e6      	bhi.n	8006664 <__mdiff+0x84>
 8006696:	1b33      	subs	r3, r6, r4
 8006698:	3b15      	subs	r3, #21
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	3415      	adds	r4, #21
 80066a0:	3304      	adds	r3, #4
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	bf38      	it	cc
 80066a6:	2304      	movcc	r3, #4
 80066a8:	441d      	add	r5, r3
 80066aa:	4443      	add	r3, r8
 80066ac:	461e      	mov	r6, r3
 80066ae:	462c      	mov	r4, r5
 80066b0:	4574      	cmp	r4, lr
 80066b2:	d30e      	bcc.n	80066d2 <__mdiff+0xf2>
 80066b4:	f10e 0103 	add.w	r1, lr, #3
 80066b8:	1b49      	subs	r1, r1, r5
 80066ba:	f021 0103 	bic.w	r1, r1, #3
 80066be:	3d03      	subs	r5, #3
 80066c0:	45ae      	cmp	lr, r5
 80066c2:	bf38      	it	cc
 80066c4:	2100      	movcc	r1, #0
 80066c6:	4419      	add	r1, r3
 80066c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066cc:	b18b      	cbz	r3, 80066f2 <__mdiff+0x112>
 80066ce:	6117      	str	r7, [r2, #16]
 80066d0:	e7a0      	b.n	8006614 <__mdiff+0x34>
 80066d2:	f854 8b04 	ldr.w	r8, [r4], #4
 80066d6:	fa1f f188 	uxth.w	r1, r8
 80066da:	4461      	add	r1, ip
 80066dc:	1408      	asrs	r0, r1, #16
 80066de:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80066e2:	b289      	uxth	r1, r1
 80066e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80066e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066ec:	f846 1b04 	str.w	r1, [r6], #4
 80066f0:	e7de      	b.n	80066b0 <__mdiff+0xd0>
 80066f2:	3f01      	subs	r7, #1
 80066f4:	e7e8      	b.n	80066c8 <__mdiff+0xe8>
 80066f6:	bf00      	nop
 80066f8:	08007a07 	.word	0x08007a07
 80066fc:	08007a18 	.word	0x08007a18

08006700 <__d2b>:
 8006700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006704:	2101      	movs	r1, #1
 8006706:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800670a:	4690      	mov	r8, r2
 800670c:	461d      	mov	r5, r3
 800670e:	f7ff fcd1 	bl	80060b4 <_Balloc>
 8006712:	4604      	mov	r4, r0
 8006714:	b930      	cbnz	r0, 8006724 <__d2b+0x24>
 8006716:	4602      	mov	r2, r0
 8006718:	f240 310a 	movw	r1, #778	; 0x30a
 800671c:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <__d2b+0xb0>)
 800671e:	4825      	ldr	r0, [pc, #148]	; (80067b4 <__d2b+0xb4>)
 8006720:	f000 f9b4 	bl	8006a8c <__assert_func>
 8006724:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006728:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800672c:	bb2d      	cbnz	r5, 800677a <__d2b+0x7a>
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	f1b8 0300 	subs.w	r3, r8, #0
 8006734:	d026      	beq.n	8006784 <__d2b+0x84>
 8006736:	4668      	mov	r0, sp
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	f7ff fd87 	bl	800624c <__lo0bits>
 800673e:	9900      	ldr	r1, [sp, #0]
 8006740:	b1f0      	cbz	r0, 8006780 <__d2b+0x80>
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	f1c0 0320 	rsb	r3, r0, #32
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	430b      	orrs	r3, r1
 800674e:	40c2      	lsrs	r2, r0
 8006750:	6163      	str	r3, [r4, #20]
 8006752:	9201      	str	r2, [sp, #4]
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2102      	movne	r1, #2
 800675c:	2101      	moveq	r1, #1
 800675e:	61a3      	str	r3, [r4, #24]
 8006760:	6121      	str	r1, [r4, #16]
 8006762:	b1c5      	cbz	r5, 8006796 <__d2b+0x96>
 8006764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006768:	4405      	add	r5, r0
 800676a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800676e:	603d      	str	r5, [r7, #0]
 8006770:	6030      	str	r0, [r6, #0]
 8006772:	4620      	mov	r0, r4
 8006774:	b002      	add	sp, #8
 8006776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800677e:	e7d6      	b.n	800672e <__d2b+0x2e>
 8006780:	6161      	str	r1, [r4, #20]
 8006782:	e7e7      	b.n	8006754 <__d2b+0x54>
 8006784:	a801      	add	r0, sp, #4
 8006786:	f7ff fd61 	bl	800624c <__lo0bits>
 800678a:	2101      	movs	r1, #1
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	6121      	str	r1, [r4, #16]
 8006790:	6163      	str	r3, [r4, #20]
 8006792:	3020      	adds	r0, #32
 8006794:	e7e5      	b.n	8006762 <__d2b+0x62>
 8006796:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800679a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800679e:	6038      	str	r0, [r7, #0]
 80067a0:	6918      	ldr	r0, [r3, #16]
 80067a2:	f7ff fd33 	bl	800620c <__hi0bits>
 80067a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80067aa:	6031      	str	r1, [r6, #0]
 80067ac:	e7e1      	b.n	8006772 <__d2b+0x72>
 80067ae:	bf00      	nop
 80067b0:	08007a07 	.word	0x08007a07
 80067b4:	08007a18 	.word	0x08007a18

080067b8 <_calloc_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	fb02 f501 	mul.w	r5, r2, r1
 80067be:	4629      	mov	r1, r5
 80067c0:	f7fe f8e6 	bl	8004990 <_malloc_r>
 80067c4:	4604      	mov	r4, r0
 80067c6:	b118      	cbz	r0, 80067d0 <_calloc_r+0x18>
 80067c8:	462a      	mov	r2, r5
 80067ca:	2100      	movs	r1, #0
 80067cc:	f7fe f88c 	bl	80048e8 <memset>
 80067d0:	4620      	mov	r0, r4
 80067d2:	bd38      	pop	{r3, r4, r5, pc}

080067d4 <__ssputs_r>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	688e      	ldr	r6, [r1, #8]
 80067da:	4682      	mov	sl, r0
 80067dc:	429e      	cmp	r6, r3
 80067de:	460c      	mov	r4, r1
 80067e0:	4690      	mov	r8, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	d838      	bhi.n	8006858 <__ssputs_r+0x84>
 80067e6:	898a      	ldrh	r2, [r1, #12]
 80067e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ec:	d032      	beq.n	8006854 <__ssputs_r+0x80>
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	6909      	ldr	r1, [r1, #16]
 80067f2:	3301      	adds	r3, #1
 80067f4:	eba5 0901 	sub.w	r9, r5, r1
 80067f8:	6965      	ldr	r5, [r4, #20]
 80067fa:	444b      	add	r3, r9
 80067fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	bf38      	it	cc
 800680a:	461d      	movcc	r5, r3
 800680c:	0553      	lsls	r3, r2, #21
 800680e:	d531      	bpl.n	8006874 <__ssputs_r+0xa0>
 8006810:	4629      	mov	r1, r5
 8006812:	f7fe f8bd 	bl	8004990 <_malloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	b950      	cbnz	r0, 8006830 <__ssputs_r+0x5c>
 800681a:	230c      	movs	r3, #12
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	f8ca 3000 	str.w	r3, [sl]
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	464a      	mov	r2, r9
 8006832:	6921      	ldr	r1, [r4, #16]
 8006834:	f7ff fc24 	bl	8006080 <memcpy>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6126      	str	r6, [r4, #16]
 8006846:	444e      	add	r6, r9
 8006848:	6026      	str	r6, [r4, #0]
 800684a:	463e      	mov	r6, r7
 800684c:	6165      	str	r5, [r4, #20]
 800684e:	eba5 0509 	sub.w	r5, r5, r9
 8006852:	60a5      	str	r5, [r4, #8]
 8006854:	42be      	cmp	r6, r7
 8006856:	d900      	bls.n	800685a <__ssputs_r+0x86>
 8006858:	463e      	mov	r6, r7
 800685a:	4632      	mov	r2, r6
 800685c:	4641      	mov	r1, r8
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	f7fe f828 	bl	80048b4 <memmove>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	1b9b      	subs	r3, r3, r6
 800686a:	4432      	add	r2, r6
 800686c:	2000      	movs	r0, #0
 800686e:	60a3      	str	r3, [r4, #8]
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	e7db      	b.n	800682c <__ssputs_r+0x58>
 8006874:	462a      	mov	r2, r5
 8006876:	f000 f94e 	bl	8006b16 <_realloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e1      	bne.n	8006844 <__ssputs_r+0x70>
 8006880:	4650      	mov	r0, sl
 8006882:	6921      	ldr	r1, [r4, #16]
 8006884:	f7fe f838 	bl	80048f8 <_free_r>
 8006888:	e7c7      	b.n	800681a <__ssputs_r+0x46>
	...

0800688c <_svfiprintf_r>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	4698      	mov	r8, r3
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	4607      	mov	r7, r0
 8006896:	061b      	lsls	r3, r3, #24
 8006898:	460d      	mov	r5, r1
 800689a:	4614      	mov	r4, r2
 800689c:	b09d      	sub	sp, #116	; 0x74
 800689e:	d50e      	bpl.n	80068be <_svfiprintf_r+0x32>
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	b963      	cbnz	r3, 80068be <_svfiprintf_r+0x32>
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	f7fe f873 	bl	8004990 <_malloc_r>
 80068aa:	6028      	str	r0, [r5, #0]
 80068ac:	6128      	str	r0, [r5, #16]
 80068ae:	b920      	cbnz	r0, 80068ba <_svfiprintf_r+0x2e>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e0d1      	b.n	8006a5e <_svfiprintf_r+0x1d2>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	616b      	str	r3, [r5, #20]
 80068be:	2300      	movs	r3, #0
 80068c0:	9309      	str	r3, [sp, #36]	; 0x24
 80068c2:	2320      	movs	r3, #32
 80068c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c8:	2330      	movs	r3, #48	; 0x30
 80068ca:	f04f 0901 	mov.w	r9, #1
 80068ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80068d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a78 <_svfiprintf_r+0x1ec>
 80068d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068da:	4623      	mov	r3, r4
 80068dc:	469a      	mov	sl, r3
 80068de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e2:	b10a      	cbz	r2, 80068e8 <_svfiprintf_r+0x5c>
 80068e4:	2a25      	cmp	r2, #37	; 0x25
 80068e6:	d1f9      	bne.n	80068dc <_svfiprintf_r+0x50>
 80068e8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ec:	d00b      	beq.n	8006906 <_svfiprintf_r+0x7a>
 80068ee:	465b      	mov	r3, fp
 80068f0:	4622      	mov	r2, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ff6d 	bl	80067d4 <__ssputs_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	f000 80aa 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006902:	445a      	add	r2, fp
 8006904:	9209      	str	r2, [sp, #36]	; 0x24
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80a2 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691a:	f10a 0a01 	add.w	sl, sl, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006926:	931a      	str	r3, [sp, #104]	; 0x68
 8006928:	4654      	mov	r4, sl
 800692a:	2205      	movs	r2, #5
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	4851      	ldr	r0, [pc, #324]	; (8006a78 <_svfiprintf_r+0x1ec>)
 8006932:	f7ff fb97 	bl	8006064 <memchr>
 8006936:	9a04      	ldr	r2, [sp, #16]
 8006938:	b9d8      	cbnz	r0, 8006972 <_svfiprintf_r+0xe6>
 800693a:	06d0      	lsls	r0, r2, #27
 800693c:	bf44      	itt	mi
 800693e:	2320      	movmi	r3, #32
 8006940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006944:	0711      	lsls	r1, r2, #28
 8006946:	bf44      	itt	mi
 8006948:	232b      	movmi	r3, #43	; 0x2b
 800694a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694e:	f89a 3000 	ldrb.w	r3, [sl]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d015      	beq.n	8006982 <_svfiprintf_r+0xf6>
 8006956:	4654      	mov	r4, sl
 8006958:	2000      	movs	r0, #0
 800695a:	f04f 0c0a 	mov.w	ip, #10
 800695e:	9a07      	ldr	r2, [sp, #28]
 8006960:	4621      	mov	r1, r4
 8006962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006966:	3b30      	subs	r3, #48	; 0x30
 8006968:	2b09      	cmp	r3, #9
 800696a:	d94e      	bls.n	8006a0a <_svfiprintf_r+0x17e>
 800696c:	b1b0      	cbz	r0, 800699c <_svfiprintf_r+0x110>
 800696e:	9207      	str	r2, [sp, #28]
 8006970:	e014      	b.n	800699c <_svfiprintf_r+0x110>
 8006972:	eba0 0308 	sub.w	r3, r0, r8
 8006976:	fa09 f303 	lsl.w	r3, r9, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	46a2      	mov	sl, r4
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	e7d2      	b.n	8006928 <_svfiprintf_r+0x9c>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	1d19      	adds	r1, r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	9103      	str	r1, [sp, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbb      	ittet	lt
 800698e:	425b      	neglt	r3, r3
 8006990:	f042 0202 	orrlt.w	r2, r2, #2
 8006994:	9307      	strge	r3, [sp, #28]
 8006996:	9307      	strlt	r3, [sp, #28]
 8006998:	bfb8      	it	lt
 800699a:	9204      	strlt	r2, [sp, #16]
 800699c:	7823      	ldrb	r3, [r4, #0]
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d10c      	bne.n	80069bc <_svfiprintf_r+0x130>
 80069a2:	7863      	ldrb	r3, [r4, #1]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d135      	bne.n	8006a14 <_svfiprintf_r+0x188>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	3402      	adds	r4, #2
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	9203      	str	r2, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfb8      	it	lt
 80069b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a88 <_svfiprintf_r+0x1fc>
 80069c0:	2203      	movs	r2, #3
 80069c2:	4650      	mov	r0, sl
 80069c4:	7821      	ldrb	r1, [r4, #0]
 80069c6:	f7ff fb4d 	bl	8006064 <memchr>
 80069ca:	b140      	cbz	r0, 80069de <_svfiprintf_r+0x152>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	eba0 000a 	sub.w	r0, r0, sl
 80069d2:	fa03 f000 	lsl.w	r0, r3, r0
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	3401      	adds	r4, #1
 80069da:	4303      	orrs	r3, r0
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	2206      	movs	r2, #6
 80069e4:	4825      	ldr	r0, [pc, #148]	; (8006a7c <_svfiprintf_r+0x1f0>)
 80069e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ea:	f7ff fb3b 	bl	8006064 <memchr>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d038      	beq.n	8006a64 <_svfiprintf_r+0x1d8>
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <_svfiprintf_r+0x1f4>)
 80069f4:	bb1b      	cbnz	r3, 8006a3e <_svfiprintf_r+0x1b2>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3307      	adds	r3, #7
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	3308      	adds	r3, #8
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	4433      	add	r3, r6
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	e767      	b.n	80068da <_svfiprintf_r+0x4e>
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a12:	e7a5      	b.n	8006960 <_svfiprintf_r+0xd4>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f04f 0c0a 	mov.w	ip, #10
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	3401      	adds	r4, #1
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a26:	3a30      	subs	r2, #48	; 0x30
 8006a28:	2a09      	cmp	r2, #9
 8006a2a:	d903      	bls.n	8006a34 <_svfiprintf_r+0x1a8>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0c5      	beq.n	80069bc <_svfiprintf_r+0x130>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	e7c3      	b.n	80069bc <_svfiprintf_r+0x130>
 8006a34:	4604      	mov	r4, r0
 8006a36:	2301      	movs	r3, #1
 8006a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3c:	e7f0      	b.n	8006a20 <_svfiprintf_r+0x194>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4638      	mov	r0, r7
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a48:	a904      	add	r1, sp, #16
 8006a4a:	f7fe f899 	bl	8004b80 <_printf_float>
 8006a4e:	1c42      	adds	r2, r0, #1
 8006a50:	4606      	mov	r6, r0
 8006a52:	d1d6      	bne.n	8006a02 <_svfiprintf_r+0x176>
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	065b      	lsls	r3, r3, #25
 8006a58:	f53f af2c 	bmi.w	80068b4 <_svfiprintf_r+0x28>
 8006a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5e:	b01d      	add	sp, #116	; 0x74
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a6e:	a904      	add	r1, sp, #16
 8006a70:	f7fe fb22 	bl	80050b8 <_printf_i>
 8006a74:	e7eb      	b.n	8006a4e <_svfiprintf_r+0x1c2>
 8006a76:	bf00      	nop
 8006a78:	08007b74 	.word	0x08007b74
 8006a7c:	08007b7e 	.word	0x08007b7e
 8006a80:	08004b81 	.word	0x08004b81
 8006a84:	080067d5 	.word	0x080067d5
 8006a88:	08007b7a 	.word	0x08007b7a

08006a8c <__assert_func>:
 8006a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <__assert_func+0x2c>)
 8006a94:	4605      	mov	r5, r0
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68d8      	ldr	r0, [r3, #12]
 8006a9a:	b14c      	cbz	r4, 8006ab0 <__assert_func+0x24>
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <__assert_func+0x30>)
 8006a9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006aa2:	9100      	str	r1, [sp, #0]
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <__assert_func+0x34>)
 8006aa8:	f000 f80e 	bl	8006ac8 <fiprintf>
 8006aac:	f000 fa7e 	bl	8006fac <abort>
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <__assert_func+0x38>)
 8006ab2:	461c      	mov	r4, r3
 8006ab4:	e7f3      	b.n	8006a9e <__assert_func+0x12>
 8006ab6:	bf00      	nop
 8006ab8:	200000c8 	.word	0x200000c8
 8006abc:	08007b85 	.word	0x08007b85
 8006ac0:	08007b92 	.word	0x08007b92
 8006ac4:	08007bc0 	.word	0x08007bc0

08006ac8 <fiprintf>:
 8006ac8:	b40e      	push	{r1, r2, r3}
 8006aca:	b503      	push	{r0, r1, lr}
 8006acc:	4601      	mov	r1, r0
 8006ace:	ab03      	add	r3, sp, #12
 8006ad0:	4805      	ldr	r0, [pc, #20]	; (8006ae8 <fiprintf+0x20>)
 8006ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	f000 f869 	bl	8006bb0 <_vfiprintf_r>
 8006ade:	b002      	add	sp, #8
 8006ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae4:	b003      	add	sp, #12
 8006ae6:	4770      	bx	lr
 8006ae8:	200000c8 	.word	0x200000c8

08006aec <__retarget_lock_init_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_acquire_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <__retarget_lock_release_recursive>:
 8006af0:	4770      	bx	lr

08006af2 <__ascii_mbtowc>:
 8006af2:	b082      	sub	sp, #8
 8006af4:	b901      	cbnz	r1, 8006af8 <__ascii_mbtowc+0x6>
 8006af6:	a901      	add	r1, sp, #4
 8006af8:	b142      	cbz	r2, 8006b0c <__ascii_mbtowc+0x1a>
 8006afa:	b14b      	cbz	r3, 8006b10 <__ascii_mbtowc+0x1e>
 8006afc:	7813      	ldrb	r3, [r2, #0]
 8006afe:	600b      	str	r3, [r1, #0]
 8006b00:	7812      	ldrb	r2, [r2, #0]
 8006b02:	1e10      	subs	r0, r2, #0
 8006b04:	bf18      	it	ne
 8006b06:	2001      	movne	r0, #1
 8006b08:	b002      	add	sp, #8
 8006b0a:	4770      	bx	lr
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	e7fb      	b.n	8006b08 <__ascii_mbtowc+0x16>
 8006b10:	f06f 0001 	mvn.w	r0, #1
 8006b14:	e7f8      	b.n	8006b08 <__ascii_mbtowc+0x16>

08006b16 <_realloc_r>:
 8006b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	b921      	cbnz	r1, 8006b2a <_realloc_r+0x14>
 8006b20:	4611      	mov	r1, r2
 8006b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b26:	f7fd bf33 	b.w	8004990 <_malloc_r>
 8006b2a:	b922      	cbnz	r2, 8006b36 <_realloc_r+0x20>
 8006b2c:	f7fd fee4 	bl	80048f8 <_free_r>
 8006b30:	4625      	mov	r5, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b36:	f000 fc5d 	bl	80073f4 <_malloc_usable_size_r>
 8006b3a:	42a0      	cmp	r0, r4
 8006b3c:	d20f      	bcs.n	8006b5e <_realloc_r+0x48>
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7fd ff25 	bl	8004990 <_malloc_r>
 8006b46:	4605      	mov	r5, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0f2      	beq.n	8006b32 <_realloc_r+0x1c>
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4622      	mov	r2, r4
 8006b50:	f7ff fa96 	bl	8006080 <memcpy>
 8006b54:	4631      	mov	r1, r6
 8006b56:	4638      	mov	r0, r7
 8006b58:	f7fd fece 	bl	80048f8 <_free_r>
 8006b5c:	e7e9      	b.n	8006b32 <_realloc_r+0x1c>
 8006b5e:	4635      	mov	r5, r6
 8006b60:	e7e7      	b.n	8006b32 <_realloc_r+0x1c>

08006b62 <__sfputc_r>:
 8006b62:	6893      	ldr	r3, [r2, #8]
 8006b64:	b410      	push	{r4}
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	6093      	str	r3, [r2, #8]
 8006b6c:	da07      	bge.n	8006b7e <__sfputc_r+0x1c>
 8006b6e:	6994      	ldr	r4, [r2, #24]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	db01      	blt.n	8006b78 <__sfputc_r+0x16>
 8006b74:	290a      	cmp	r1, #10
 8006b76:	d102      	bne.n	8006b7e <__sfputc_r+0x1c>
 8006b78:	bc10      	pop	{r4}
 8006b7a:	f000 b949 	b.w	8006e10 <__swbuf_r>
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	1c58      	adds	r0, r3, #1
 8006b82:	6010      	str	r0, [r2, #0]
 8006b84:	7019      	strb	r1, [r3, #0]
 8006b86:	4608      	mov	r0, r1
 8006b88:	bc10      	pop	{r4}
 8006b8a:	4770      	bx	lr

08006b8c <__sfputs_r>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460f      	mov	r7, r1
 8006b92:	4614      	mov	r4, r2
 8006b94:	18d5      	adds	r5, r2, r3
 8006b96:	42ac      	cmp	r4, r5
 8006b98:	d101      	bne.n	8006b9e <__sfputs_r+0x12>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e007      	b.n	8006bae <__sfputs_r+0x22>
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba6:	f7ff ffdc 	bl	8006b62 <__sfputc_r>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	d1f3      	bne.n	8006b96 <__sfputs_r+0xa>
 8006bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bb0 <_vfiprintf_r>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	4698      	mov	r8, r3
 8006bba:	4606      	mov	r6, r0
 8006bbc:	b09d      	sub	sp, #116	; 0x74
 8006bbe:	b118      	cbz	r0, 8006bc8 <_vfiprintf_r+0x18>
 8006bc0:	6983      	ldr	r3, [r0, #24]
 8006bc2:	b90b      	cbnz	r3, 8006bc8 <_vfiprintf_r+0x18>
 8006bc4:	f000 fb14 	bl	80071f0 <__sinit>
 8006bc8:	4b89      	ldr	r3, [pc, #548]	; (8006df0 <_vfiprintf_r+0x240>)
 8006bca:	429d      	cmp	r5, r3
 8006bcc:	d11b      	bne.n	8006c06 <_vfiprintf_r+0x56>
 8006bce:	6875      	ldr	r5, [r6, #4]
 8006bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	d405      	bmi.n	8006be2 <_vfiprintf_r+0x32>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	059a      	lsls	r2, r3, #22
 8006bda:	d402      	bmi.n	8006be2 <_vfiprintf_r+0x32>
 8006bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bde:	f7ff ff86 	bl	8006aee <__retarget_lock_acquire_recursive>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	071b      	lsls	r3, r3, #28
 8006be6:	d501      	bpl.n	8006bec <_vfiprintf_r+0x3c>
 8006be8:	692b      	ldr	r3, [r5, #16]
 8006bea:	b9eb      	cbnz	r3, 8006c28 <_vfiprintf_r+0x78>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f96e 	bl	8006ed0 <__swsetup_r>
 8006bf4:	b1c0      	cbz	r0, 8006c28 <_vfiprintf_r+0x78>
 8006bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf8:	07dc      	lsls	r4, r3, #31
 8006bfa:	d50e      	bpl.n	8006c1a <_vfiprintf_r+0x6a>
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	b01d      	add	sp, #116	; 0x74
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	4b7b      	ldr	r3, [pc, #492]	; (8006df4 <_vfiprintf_r+0x244>)
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	d101      	bne.n	8006c10 <_vfiprintf_r+0x60>
 8006c0c:	68b5      	ldr	r5, [r6, #8]
 8006c0e:	e7df      	b.n	8006bd0 <_vfiprintf_r+0x20>
 8006c10:	4b79      	ldr	r3, [pc, #484]	; (8006df8 <_vfiprintf_r+0x248>)
 8006c12:	429d      	cmp	r5, r3
 8006c14:	bf08      	it	eq
 8006c16:	68f5      	ldreq	r5, [r6, #12]
 8006c18:	e7da      	b.n	8006bd0 <_vfiprintf_r+0x20>
 8006c1a:	89ab      	ldrh	r3, [r5, #12]
 8006c1c:	0598      	lsls	r0, r3, #22
 8006c1e:	d4ed      	bmi.n	8006bfc <_vfiprintf_r+0x4c>
 8006c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c22:	f7ff ff65 	bl	8006af0 <__retarget_lock_release_recursive>
 8006c26:	e7e9      	b.n	8006bfc <_vfiprintf_r+0x4c>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f04f 0901 	mov.w	r9, #1
 8006c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006dfc <_vfiprintf_r+0x24c>
 8006c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c44:	4623      	mov	r3, r4
 8006c46:	469a      	mov	sl, r3
 8006c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c4c:	b10a      	cbz	r2, 8006c52 <_vfiprintf_r+0xa2>
 8006c4e:	2a25      	cmp	r2, #37	; 0x25
 8006c50:	d1f9      	bne.n	8006c46 <_vfiprintf_r+0x96>
 8006c52:	ebba 0b04 	subs.w	fp, sl, r4
 8006c56:	d00b      	beq.n	8006c70 <_vfiprintf_r+0xc0>
 8006c58:	465b      	mov	r3, fp
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f7ff ff94 	bl	8006b8c <__sfputs_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	f000 80aa 	beq.w	8006dbe <_vfiprintf_r+0x20e>
 8006c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c6c:	445a      	add	r2, fp
 8006c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c70:	f89a 3000 	ldrb.w	r3, [sl]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80a2 	beq.w	8006dbe <_vfiprintf_r+0x20e>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c84:	f10a 0a01 	add.w	sl, sl, #1
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	9307      	str	r3, [sp, #28]
 8006c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c90:	931a      	str	r3, [sp, #104]	; 0x68
 8006c92:	4654      	mov	r4, sl
 8006c94:	2205      	movs	r2, #5
 8006c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9a:	4858      	ldr	r0, [pc, #352]	; (8006dfc <_vfiprintf_r+0x24c>)
 8006c9c:	f7ff f9e2 	bl	8006064 <memchr>
 8006ca0:	9a04      	ldr	r2, [sp, #16]
 8006ca2:	b9d8      	cbnz	r0, 8006cdc <_vfiprintf_r+0x12c>
 8006ca4:	06d1      	lsls	r1, r2, #27
 8006ca6:	bf44      	itt	mi
 8006ca8:	2320      	movmi	r3, #32
 8006caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cae:	0713      	lsls	r3, r2, #28
 8006cb0:	bf44      	itt	mi
 8006cb2:	232b      	movmi	r3, #43	; 0x2b
 8006cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbe:	d015      	beq.n	8006cec <_vfiprintf_r+0x13c>
 8006cc0:	4654      	mov	r4, sl
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f04f 0c0a 	mov.w	ip, #10
 8006cc8:	9a07      	ldr	r2, [sp, #28]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd0:	3b30      	subs	r3, #48	; 0x30
 8006cd2:	2b09      	cmp	r3, #9
 8006cd4:	d94e      	bls.n	8006d74 <_vfiprintf_r+0x1c4>
 8006cd6:	b1b0      	cbz	r0, 8006d06 <_vfiprintf_r+0x156>
 8006cd8:	9207      	str	r2, [sp, #28]
 8006cda:	e014      	b.n	8006d06 <_vfiprintf_r+0x156>
 8006cdc:	eba0 0308 	sub.w	r3, r0, r8
 8006ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	46a2      	mov	sl, r4
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	e7d2      	b.n	8006c92 <_vfiprintf_r+0xe2>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	1d19      	adds	r1, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	9103      	str	r1, [sp, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bfbb      	ittet	lt
 8006cf8:	425b      	neglt	r3, r3
 8006cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfe:	9307      	strge	r3, [sp, #28]
 8006d00:	9307      	strlt	r3, [sp, #28]
 8006d02:	bfb8      	it	lt
 8006d04:	9204      	strlt	r2, [sp, #16]
 8006d06:	7823      	ldrb	r3, [r4, #0]
 8006d08:	2b2e      	cmp	r3, #46	; 0x2e
 8006d0a:	d10c      	bne.n	8006d26 <_vfiprintf_r+0x176>
 8006d0c:	7863      	ldrb	r3, [r4, #1]
 8006d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d10:	d135      	bne.n	8006d7e <_vfiprintf_r+0x1ce>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	3402      	adds	r4, #2
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfb8      	it	lt
 8006d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e0c <_vfiprintf_r+0x25c>
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	7821      	ldrb	r1, [r4, #0]
 8006d30:	f7ff f998 	bl	8006064 <memchr>
 8006d34:	b140      	cbz	r0, 8006d48 <_vfiprintf_r+0x198>
 8006d36:	2340      	movs	r3, #64	; 0x40
 8006d38:	eba0 000a 	sub.w	r0, r0, sl
 8006d3c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	3401      	adds	r4, #1
 8006d44:	4303      	orrs	r3, r0
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4c:	2206      	movs	r2, #6
 8006d4e:	482c      	ldr	r0, [pc, #176]	; (8006e00 <_vfiprintf_r+0x250>)
 8006d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d54:	f7ff f986 	bl	8006064 <memchr>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d03f      	beq.n	8006ddc <_vfiprintf_r+0x22c>
 8006d5c:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <_vfiprintf_r+0x254>)
 8006d5e:	bb1b      	cbnz	r3, 8006da8 <_vfiprintf_r+0x1f8>
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	3307      	adds	r3, #7
 8006d64:	f023 0307 	bic.w	r3, r3, #7
 8006d68:	3308      	adds	r3, #8
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	443b      	add	r3, r7
 8006d70:	9309      	str	r3, [sp, #36]	; 0x24
 8006d72:	e767      	b.n	8006c44 <_vfiprintf_r+0x94>
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d7c:	e7a5      	b.n	8006cca <_vfiprintf_r+0x11a>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f04f 0c0a 	mov.w	ip, #10
 8006d84:	4619      	mov	r1, r3
 8006d86:	3401      	adds	r4, #1
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d90:	3a30      	subs	r2, #48	; 0x30
 8006d92:	2a09      	cmp	r2, #9
 8006d94:	d903      	bls.n	8006d9e <_vfiprintf_r+0x1ee>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0c5      	beq.n	8006d26 <_vfiprintf_r+0x176>
 8006d9a:	9105      	str	r1, [sp, #20]
 8006d9c:	e7c3      	b.n	8006d26 <_vfiprintf_r+0x176>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006da6:	e7f0      	b.n	8006d8a <_vfiprintf_r+0x1da>
 8006da8:	ab03      	add	r3, sp, #12
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4630      	mov	r0, r6
 8006db0:	4b15      	ldr	r3, [pc, #84]	; (8006e08 <_vfiprintf_r+0x258>)
 8006db2:	a904      	add	r1, sp, #16
 8006db4:	f7fd fee4 	bl	8004b80 <_printf_float>
 8006db8:	4607      	mov	r7, r0
 8006dba:	1c78      	adds	r0, r7, #1
 8006dbc:	d1d6      	bne.n	8006d6c <_vfiprintf_r+0x1bc>
 8006dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	d405      	bmi.n	8006dd0 <_vfiprintf_r+0x220>
 8006dc4:	89ab      	ldrh	r3, [r5, #12]
 8006dc6:	059a      	lsls	r2, r3, #22
 8006dc8:	d402      	bmi.n	8006dd0 <_vfiprintf_r+0x220>
 8006dca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dcc:	f7ff fe90 	bl	8006af0 <__retarget_lock_release_recursive>
 8006dd0:	89ab      	ldrh	r3, [r5, #12]
 8006dd2:	065b      	lsls	r3, r3, #25
 8006dd4:	f53f af12 	bmi.w	8006bfc <_vfiprintf_r+0x4c>
 8006dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dda:	e711      	b.n	8006c00 <_vfiprintf_r+0x50>
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <_vfiprintf_r+0x258>)
 8006de6:	a904      	add	r1, sp, #16
 8006de8:	f7fe f966 	bl	80050b8 <_printf_i>
 8006dec:	e7e4      	b.n	8006db8 <_vfiprintf_r+0x208>
 8006dee:	bf00      	nop
 8006df0:	08007cec 	.word	0x08007cec
 8006df4:	08007d0c 	.word	0x08007d0c
 8006df8:	08007ccc 	.word	0x08007ccc
 8006dfc:	08007b74 	.word	0x08007b74
 8006e00:	08007b7e 	.word	0x08007b7e
 8006e04:	08004b81 	.word	0x08004b81
 8006e08:	08006b8d 	.word	0x08006b8d
 8006e0c:	08007b7a 	.word	0x08007b7a

08006e10 <__swbuf_r>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	460e      	mov	r6, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	4605      	mov	r5, r0
 8006e18:	b118      	cbz	r0, 8006e22 <__swbuf_r+0x12>
 8006e1a:	6983      	ldr	r3, [r0, #24]
 8006e1c:	b90b      	cbnz	r3, 8006e22 <__swbuf_r+0x12>
 8006e1e:	f000 f9e7 	bl	80071f0 <__sinit>
 8006e22:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <__swbuf_r+0x98>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	d12b      	bne.n	8006e80 <__swbuf_r+0x70>
 8006e28:	686c      	ldr	r4, [r5, #4]
 8006e2a:	69a3      	ldr	r3, [r4, #24]
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	071a      	lsls	r2, r3, #28
 8006e32:	d52f      	bpl.n	8006e94 <__swbuf_r+0x84>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b36b      	cbz	r3, 8006e94 <__swbuf_r+0x84>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	b2f6      	uxtb	r6, r6
 8006e3e:	1ac0      	subs	r0, r0, r3
 8006e40:	6963      	ldr	r3, [r4, #20]
 8006e42:	4637      	mov	r7, r6
 8006e44:	4283      	cmp	r3, r0
 8006e46:	dc04      	bgt.n	8006e52 <__swbuf_r+0x42>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f93c 	bl	80070c8 <_fflush_r>
 8006e50:	bb30      	cbnz	r0, 8006ea0 <__swbuf_r+0x90>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	3001      	adds	r0, #1
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	701e      	strb	r6, [r3, #0]
 8006e62:	6963      	ldr	r3, [r4, #20]
 8006e64:	4283      	cmp	r3, r0
 8006e66:	d004      	beq.n	8006e72 <__swbuf_r+0x62>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	07db      	lsls	r3, r3, #31
 8006e6c:	d506      	bpl.n	8006e7c <__swbuf_r+0x6c>
 8006e6e:	2e0a      	cmp	r6, #10
 8006e70:	d104      	bne.n	8006e7c <__swbuf_r+0x6c>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f927 	bl	80070c8 <_fflush_r>
 8006e7a:	b988      	cbnz	r0, 8006ea0 <__swbuf_r+0x90>
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <__swbuf_r+0x9c>)
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d101      	bne.n	8006e8a <__swbuf_r+0x7a>
 8006e86:	68ac      	ldr	r4, [r5, #8]
 8006e88:	e7cf      	b.n	8006e2a <__swbuf_r+0x1a>
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <__swbuf_r+0xa0>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	bf08      	it	eq
 8006e90:	68ec      	ldreq	r4, [r5, #12]
 8006e92:	e7ca      	b.n	8006e2a <__swbuf_r+0x1a>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 f81a 	bl	8006ed0 <__swsetup_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d0cb      	beq.n	8006e38 <__swbuf_r+0x28>
 8006ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea4:	e7ea      	b.n	8006e7c <__swbuf_r+0x6c>
 8006ea6:	bf00      	nop
 8006ea8:	08007cec 	.word	0x08007cec
 8006eac:	08007d0c 	.word	0x08007d0c
 8006eb0:	08007ccc 	.word	0x08007ccc

08006eb4 <__ascii_wctomb>:
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	4608      	mov	r0, r1
 8006eb8:	b141      	cbz	r1, 8006ecc <__ascii_wctomb+0x18>
 8006eba:	2aff      	cmp	r2, #255	; 0xff
 8006ebc:	d904      	bls.n	8006ec8 <__ascii_wctomb+0x14>
 8006ebe:	228a      	movs	r2, #138	; 0x8a
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	4770      	bx	lr
 8006ec8:	2001      	movs	r0, #1
 8006eca:	700a      	strb	r2, [r1, #0]
 8006ecc:	4770      	bx	lr
	...

08006ed0 <__swsetup_r>:
 8006ed0:	4b32      	ldr	r3, [pc, #200]	; (8006f9c <__swsetup_r+0xcc>)
 8006ed2:	b570      	push	{r4, r5, r6, lr}
 8006ed4:	681d      	ldr	r5, [r3, #0]
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	b125      	cbz	r5, 8006ee6 <__swsetup_r+0x16>
 8006edc:	69ab      	ldr	r3, [r5, #24]
 8006ede:	b913      	cbnz	r3, 8006ee6 <__swsetup_r+0x16>
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 f985 	bl	80071f0 <__sinit>
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <__swsetup_r+0xd0>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	d10f      	bne.n	8006f0c <__swsetup_r+0x3c>
 8006eec:	686c      	ldr	r4, [r5, #4]
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef4:	0719      	lsls	r1, r3, #28
 8006ef6:	d42c      	bmi.n	8006f52 <__swsetup_r+0x82>
 8006ef8:	06dd      	lsls	r5, r3, #27
 8006efa:	d411      	bmi.n	8006f20 <__swsetup_r+0x50>
 8006efc:	2309      	movs	r3, #9
 8006efe:	6033      	str	r3, [r6, #0]
 8006f00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e03e      	b.n	8006f8a <__swsetup_r+0xba>
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <__swsetup_r+0xd4>)
 8006f0e:	429c      	cmp	r4, r3
 8006f10:	d101      	bne.n	8006f16 <__swsetup_r+0x46>
 8006f12:	68ac      	ldr	r4, [r5, #8]
 8006f14:	e7eb      	b.n	8006eee <__swsetup_r+0x1e>
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <__swsetup_r+0xd8>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	bf08      	it	eq
 8006f1c:	68ec      	ldreq	r4, [r5, #12]
 8006f1e:	e7e6      	b.n	8006eee <__swsetup_r+0x1e>
 8006f20:	0758      	lsls	r0, r3, #29
 8006f22:	d512      	bpl.n	8006f4a <__swsetup_r+0x7a>
 8006f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f26:	b141      	cbz	r1, 8006f3a <__swsetup_r+0x6a>
 8006f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	d002      	beq.n	8006f36 <__swsetup_r+0x66>
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7fd fce1 	bl	80048f8 <_free_r>
 8006f36:	2300      	movs	r3, #0
 8006f38:	6363      	str	r3, [r4, #52]	; 0x34
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	2300      	movs	r3, #0
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f043 0308 	orr.w	r3, r3, #8
 8006f50:	81a3      	strh	r3, [r4, #12]
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	b94b      	cbnz	r3, 8006f6a <__swsetup_r+0x9a>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f60:	d003      	beq.n	8006f6a <__swsetup_r+0x9a>
 8006f62:	4621      	mov	r1, r4
 8006f64:	4630      	mov	r0, r6
 8006f66:	f000 fa05 	bl	8007374 <__smakebuf_r>
 8006f6a:	89a0      	ldrh	r0, [r4, #12]
 8006f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f70:	f010 0301 	ands.w	r3, r0, #1
 8006f74:	d00a      	beq.n	8006f8c <__swsetup_r+0xbc>
 8006f76:	2300      	movs	r3, #0
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	6963      	ldr	r3, [r4, #20]
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	61a3      	str	r3, [r4, #24]
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	b943      	cbnz	r3, 8006f96 <__swsetup_r+0xc6>
 8006f84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f88:	d1ba      	bne.n	8006f00 <__swsetup_r+0x30>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	0781      	lsls	r1, r0, #30
 8006f8e:	bf58      	it	pl
 8006f90:	6963      	ldrpl	r3, [r4, #20]
 8006f92:	60a3      	str	r3, [r4, #8]
 8006f94:	e7f4      	b.n	8006f80 <__swsetup_r+0xb0>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e7f7      	b.n	8006f8a <__swsetup_r+0xba>
 8006f9a:	bf00      	nop
 8006f9c:	200000c8 	.word	0x200000c8
 8006fa0:	08007cec 	.word	0x08007cec
 8006fa4:	08007d0c 	.word	0x08007d0c
 8006fa8:	08007ccc 	.word	0x08007ccc

08006fac <abort>:
 8006fac:	2006      	movs	r0, #6
 8006fae:	b508      	push	{r3, lr}
 8006fb0:	f000 fa50 	bl	8007454 <raise>
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f7fb fbe0 	bl	800277a <_exit>
	...

08006fbc <__sflush_r>:
 8006fbc:	898a      	ldrh	r2, [r1, #12]
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	0710      	lsls	r0, r2, #28
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	d458      	bmi.n	800707c <__sflush_r+0xc0>
 8006fca:	684b      	ldr	r3, [r1, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dc05      	bgt.n	8006fdc <__sflush_r+0x20>
 8006fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dc02      	bgt.n	8006fdc <__sflush_r+0x20>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	d0f9      	beq.n	8006fd6 <__sflush_r+0x1a>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe8:	682f      	ldr	r7, [r5, #0]
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	d032      	beq.n	8007054 <__sflush_r+0x98>
 8006fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	075a      	lsls	r2, r3, #29
 8006ff4:	d505      	bpl.n	8007002 <__sflush_r+0x46>
 8006ff6:	6863      	ldr	r3, [r4, #4]
 8006ff8:	1ac0      	subs	r0, r0, r3
 8006ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ffc:	b10b      	cbz	r3, 8007002 <__sflush_r+0x46>
 8006ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007000:	1ac0      	subs	r0, r0, r3
 8007002:	2300      	movs	r3, #0
 8007004:	4602      	mov	r2, r0
 8007006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007008:	4628      	mov	r0, r5
 800700a:	6a21      	ldr	r1, [r4, #32]
 800700c:	47b0      	blx	r6
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	d106      	bne.n	8007022 <__sflush_r+0x66>
 8007014:	6829      	ldr	r1, [r5, #0]
 8007016:	291d      	cmp	r1, #29
 8007018:	d82c      	bhi.n	8007074 <__sflush_r+0xb8>
 800701a:	4a2a      	ldr	r2, [pc, #168]	; (80070c4 <__sflush_r+0x108>)
 800701c:	40ca      	lsrs	r2, r1
 800701e:	07d6      	lsls	r6, r2, #31
 8007020:	d528      	bpl.n	8007074 <__sflush_r+0xb8>
 8007022:	2200      	movs	r2, #0
 8007024:	6062      	str	r2, [r4, #4]
 8007026:	6922      	ldr	r2, [r4, #16]
 8007028:	04d9      	lsls	r1, r3, #19
 800702a:	6022      	str	r2, [r4, #0]
 800702c:	d504      	bpl.n	8007038 <__sflush_r+0x7c>
 800702e:	1c42      	adds	r2, r0, #1
 8007030:	d101      	bne.n	8007036 <__sflush_r+0x7a>
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	b903      	cbnz	r3, 8007038 <__sflush_r+0x7c>
 8007036:	6560      	str	r0, [r4, #84]	; 0x54
 8007038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800703a:	602f      	str	r7, [r5, #0]
 800703c:	2900      	cmp	r1, #0
 800703e:	d0ca      	beq.n	8006fd6 <__sflush_r+0x1a>
 8007040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007044:	4299      	cmp	r1, r3
 8007046:	d002      	beq.n	800704e <__sflush_r+0x92>
 8007048:	4628      	mov	r0, r5
 800704a:	f7fd fc55 	bl	80048f8 <_free_r>
 800704e:	2000      	movs	r0, #0
 8007050:	6360      	str	r0, [r4, #52]	; 0x34
 8007052:	e7c1      	b.n	8006fd8 <__sflush_r+0x1c>
 8007054:	6a21      	ldr	r1, [r4, #32]
 8007056:	2301      	movs	r3, #1
 8007058:	4628      	mov	r0, r5
 800705a:	47b0      	blx	r6
 800705c:	1c41      	adds	r1, r0, #1
 800705e:	d1c7      	bne.n	8006ff0 <__sflush_r+0x34>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0c4      	beq.n	8006ff0 <__sflush_r+0x34>
 8007066:	2b1d      	cmp	r3, #29
 8007068:	d001      	beq.n	800706e <__sflush_r+0xb2>
 800706a:	2b16      	cmp	r3, #22
 800706c:	d101      	bne.n	8007072 <__sflush_r+0xb6>
 800706e:	602f      	str	r7, [r5, #0]
 8007070:	e7b1      	b.n	8006fd6 <__sflush_r+0x1a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	e7ad      	b.n	8006fd8 <__sflush_r+0x1c>
 800707c:	690f      	ldr	r7, [r1, #16]
 800707e:	2f00      	cmp	r7, #0
 8007080:	d0a9      	beq.n	8006fd6 <__sflush_r+0x1a>
 8007082:	0793      	lsls	r3, r2, #30
 8007084:	bf18      	it	ne
 8007086:	2300      	movne	r3, #0
 8007088:	680e      	ldr	r6, [r1, #0]
 800708a:	bf08      	it	eq
 800708c:	694b      	ldreq	r3, [r1, #20]
 800708e:	eba6 0807 	sub.w	r8, r6, r7
 8007092:	600f      	str	r7, [r1, #0]
 8007094:	608b      	str	r3, [r1, #8]
 8007096:	f1b8 0f00 	cmp.w	r8, #0
 800709a:	dd9c      	ble.n	8006fd6 <__sflush_r+0x1a>
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	6a21      	ldr	r1, [r4, #32]
 80070a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070a6:	47b0      	blx	r6
 80070a8:	2800      	cmp	r0, #0
 80070aa:	dc06      	bgt.n	80070ba <__sflush_r+0xfe>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	e78e      	b.n	8006fd8 <__sflush_r+0x1c>
 80070ba:	4407      	add	r7, r0
 80070bc:	eba8 0800 	sub.w	r8, r8, r0
 80070c0:	e7e9      	b.n	8007096 <__sflush_r+0xda>
 80070c2:	bf00      	nop
 80070c4:	20400001 	.word	0x20400001

080070c8 <_fflush_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	4605      	mov	r5, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	b913      	cbnz	r3, 80070d8 <_fflush_r+0x10>
 80070d2:	2500      	movs	r5, #0
 80070d4:	4628      	mov	r0, r5
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	b118      	cbz	r0, 80070e2 <_fflush_r+0x1a>
 80070da:	6983      	ldr	r3, [r0, #24]
 80070dc:	b90b      	cbnz	r3, 80070e2 <_fflush_r+0x1a>
 80070de:	f000 f887 	bl	80071f0 <__sinit>
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <_fflush_r+0x6c>)
 80070e4:	429c      	cmp	r4, r3
 80070e6:	d11b      	bne.n	8007120 <_fflush_r+0x58>
 80070e8:	686c      	ldr	r4, [r5, #4]
 80070ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0ef      	beq.n	80070d2 <_fflush_r+0xa>
 80070f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070f4:	07d0      	lsls	r0, r2, #31
 80070f6:	d404      	bmi.n	8007102 <_fflush_r+0x3a>
 80070f8:	0599      	lsls	r1, r3, #22
 80070fa:	d402      	bmi.n	8007102 <_fflush_r+0x3a>
 80070fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070fe:	f7ff fcf6 	bl	8006aee <__retarget_lock_acquire_recursive>
 8007102:	4628      	mov	r0, r5
 8007104:	4621      	mov	r1, r4
 8007106:	f7ff ff59 	bl	8006fbc <__sflush_r>
 800710a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800710c:	4605      	mov	r5, r0
 800710e:	07da      	lsls	r2, r3, #31
 8007110:	d4e0      	bmi.n	80070d4 <_fflush_r+0xc>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	059b      	lsls	r3, r3, #22
 8007116:	d4dd      	bmi.n	80070d4 <_fflush_r+0xc>
 8007118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711a:	f7ff fce9 	bl	8006af0 <__retarget_lock_release_recursive>
 800711e:	e7d9      	b.n	80070d4 <_fflush_r+0xc>
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <_fflush_r+0x70>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <_fflush_r+0x62>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7df      	b.n	80070ea <_fflush_r+0x22>
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <_fflush_r+0x74>)
 800712c:	429c      	cmp	r4, r3
 800712e:	bf08      	it	eq
 8007130:	68ec      	ldreq	r4, [r5, #12]
 8007132:	e7da      	b.n	80070ea <_fflush_r+0x22>
 8007134:	08007cec 	.word	0x08007cec
 8007138:	08007d0c 	.word	0x08007d0c
 800713c:	08007ccc 	.word	0x08007ccc

08007140 <std>:
 8007140:	2300      	movs	r3, #0
 8007142:	b510      	push	{r4, lr}
 8007144:	4604      	mov	r4, r0
 8007146:	e9c0 3300 	strd	r3, r3, [r0]
 800714a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714e:	6083      	str	r3, [r0, #8]
 8007150:	8181      	strh	r1, [r0, #12]
 8007152:	6643      	str	r3, [r0, #100]	; 0x64
 8007154:	81c2      	strh	r2, [r0, #14]
 8007156:	6183      	str	r3, [r0, #24]
 8007158:	4619      	mov	r1, r3
 800715a:	2208      	movs	r2, #8
 800715c:	305c      	adds	r0, #92	; 0x5c
 800715e:	f7fd fbc3 	bl	80048e8 <memset>
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x38>)
 8007164:	6224      	str	r4, [r4, #32]
 8007166:	6263      	str	r3, [r4, #36]	; 0x24
 8007168:	4b04      	ldr	r3, [pc, #16]	; (800717c <std+0x3c>)
 800716a:	62a3      	str	r3, [r4, #40]	; 0x28
 800716c:	4b04      	ldr	r3, [pc, #16]	; (8007180 <std+0x40>)
 800716e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <std+0x44>)
 8007172:	6323      	str	r3, [r4, #48]	; 0x30
 8007174:	bd10      	pop	{r4, pc}
 8007176:	bf00      	nop
 8007178:	0800748d 	.word	0x0800748d
 800717c:	080074af 	.word	0x080074af
 8007180:	080074e7 	.word	0x080074e7
 8007184:	0800750b 	.word	0x0800750b

08007188 <_cleanup_r>:
 8007188:	4901      	ldr	r1, [pc, #4]	; (8007190 <_cleanup_r+0x8>)
 800718a:	f000 b8af 	b.w	80072ec <_fwalk_reent>
 800718e:	bf00      	nop
 8007190:	080070c9 	.word	0x080070c9

08007194 <__sfmoreglue>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	2568      	movs	r5, #104	; 0x68
 8007198:	1e4a      	subs	r2, r1, #1
 800719a:	4355      	muls	r5, r2
 800719c:	460e      	mov	r6, r1
 800719e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071a2:	f7fd fbf5 	bl	8004990 <_malloc_r>
 80071a6:	4604      	mov	r4, r0
 80071a8:	b140      	cbz	r0, 80071bc <__sfmoreglue+0x28>
 80071aa:	2100      	movs	r1, #0
 80071ac:	e9c0 1600 	strd	r1, r6, [r0]
 80071b0:	300c      	adds	r0, #12
 80071b2:	60a0      	str	r0, [r4, #8]
 80071b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071b8:	f7fd fb96 	bl	80048e8 <memset>
 80071bc:	4620      	mov	r0, r4
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <__sfp_lock_acquire>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sfp_lock_acquire+0x8>)
 80071c2:	f7ff bc94 	b.w	8006aee <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	2000072c 	.word	0x2000072c

080071cc <__sfp_lock_release>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__sfp_lock_release+0x8>)
 80071ce:	f7ff bc8f 	b.w	8006af0 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	2000072c 	.word	0x2000072c

080071d8 <__sinit_lock_acquire>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sinit_lock_acquire+0x8>)
 80071da:	f7ff bc88 	b.w	8006aee <__retarget_lock_acquire_recursive>
 80071de:	bf00      	nop
 80071e0:	20000727 	.word	0x20000727

080071e4 <__sinit_lock_release>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__sinit_lock_release+0x8>)
 80071e6:	f7ff bc83 	b.w	8006af0 <__retarget_lock_release_recursive>
 80071ea:	bf00      	nop
 80071ec:	20000727 	.word	0x20000727

080071f0 <__sinit>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	f7ff fff0 	bl	80071d8 <__sinit_lock_acquire>
 80071f8:	69a3      	ldr	r3, [r4, #24]
 80071fa:	b11b      	cbz	r3, 8007204 <__sinit+0x14>
 80071fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007200:	f7ff bff0 	b.w	80071e4 <__sinit_lock_release>
 8007204:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007208:	6523      	str	r3, [r4, #80]	; 0x50
 800720a:	4b13      	ldr	r3, [pc, #76]	; (8007258 <__sinit+0x68>)
 800720c:	4a13      	ldr	r2, [pc, #76]	; (800725c <__sinit+0x6c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	62a2      	str	r2, [r4, #40]	; 0x28
 8007212:	42a3      	cmp	r3, r4
 8007214:	bf08      	it	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	4620      	mov	r0, r4
 800721a:	bf08      	it	eq
 800721c:	61a3      	streq	r3, [r4, #24]
 800721e:	f000 f81f 	bl	8007260 <__sfp>
 8007222:	6060      	str	r0, [r4, #4]
 8007224:	4620      	mov	r0, r4
 8007226:	f000 f81b 	bl	8007260 <__sfp>
 800722a:	60a0      	str	r0, [r4, #8]
 800722c:	4620      	mov	r0, r4
 800722e:	f000 f817 	bl	8007260 <__sfp>
 8007232:	2200      	movs	r2, #0
 8007234:	2104      	movs	r1, #4
 8007236:	60e0      	str	r0, [r4, #12]
 8007238:	6860      	ldr	r0, [r4, #4]
 800723a:	f7ff ff81 	bl	8007140 <std>
 800723e:	2201      	movs	r2, #1
 8007240:	2109      	movs	r1, #9
 8007242:	68a0      	ldr	r0, [r4, #8]
 8007244:	f7ff ff7c 	bl	8007140 <std>
 8007248:	2202      	movs	r2, #2
 800724a:	2112      	movs	r1, #18
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	f7ff ff77 	bl	8007140 <std>
 8007252:	2301      	movs	r3, #1
 8007254:	61a3      	str	r3, [r4, #24]
 8007256:	e7d1      	b.n	80071fc <__sinit+0xc>
 8007258:	0800794c 	.word	0x0800794c
 800725c:	08007189 	.word	0x08007189

08007260 <__sfp>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	4607      	mov	r7, r0
 8007264:	f7ff ffac 	bl	80071c0 <__sfp_lock_acquire>
 8007268:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <__sfp+0x84>)
 800726a:	681e      	ldr	r6, [r3, #0]
 800726c:	69b3      	ldr	r3, [r6, #24]
 800726e:	b913      	cbnz	r3, 8007276 <__sfp+0x16>
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ffbd 	bl	80071f0 <__sinit>
 8007276:	3648      	adds	r6, #72	; 0x48
 8007278:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800727c:	3b01      	subs	r3, #1
 800727e:	d503      	bpl.n	8007288 <__sfp+0x28>
 8007280:	6833      	ldr	r3, [r6, #0]
 8007282:	b30b      	cbz	r3, 80072c8 <__sfp+0x68>
 8007284:	6836      	ldr	r6, [r6, #0]
 8007286:	e7f7      	b.n	8007278 <__sfp+0x18>
 8007288:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800728c:	b9d5      	cbnz	r5, 80072c4 <__sfp+0x64>
 800728e:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <__sfp+0x88>)
 8007290:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007294:	60e3      	str	r3, [r4, #12]
 8007296:	6665      	str	r5, [r4, #100]	; 0x64
 8007298:	f7ff fc28 	bl	8006aec <__retarget_lock_init_recursive>
 800729c:	f7ff ff96 	bl	80071cc <__sfp_lock_release>
 80072a0:	2208      	movs	r2, #8
 80072a2:	4629      	mov	r1, r5
 80072a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072ac:	6025      	str	r5, [r4, #0]
 80072ae:	61a5      	str	r5, [r4, #24]
 80072b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b4:	f7fd fb18 	bl	80048e8 <memset>
 80072b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072c0:	4620      	mov	r0, r4
 80072c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c4:	3468      	adds	r4, #104	; 0x68
 80072c6:	e7d9      	b.n	800727c <__sfp+0x1c>
 80072c8:	2104      	movs	r1, #4
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ff62 	bl	8007194 <__sfmoreglue>
 80072d0:	4604      	mov	r4, r0
 80072d2:	6030      	str	r0, [r6, #0]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1d5      	bne.n	8007284 <__sfp+0x24>
 80072d8:	f7ff ff78 	bl	80071cc <__sfp_lock_release>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	e7ee      	b.n	80072c0 <__sfp+0x60>
 80072e2:	bf00      	nop
 80072e4:	0800794c 	.word	0x0800794c
 80072e8:	ffff0001 	.word	0xffff0001

080072ec <_fwalk_reent>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4606      	mov	r6, r0
 80072f2:	4688      	mov	r8, r1
 80072f4:	2700      	movs	r7, #0
 80072f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007302:	d505      	bpl.n	8007310 <_fwalk_reent+0x24>
 8007304:	6824      	ldr	r4, [r4, #0]
 8007306:	2c00      	cmp	r4, #0
 8007308:	d1f7      	bne.n	80072fa <_fwalk_reent+0xe>
 800730a:	4638      	mov	r0, r7
 800730c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007310:	89ab      	ldrh	r3, [r5, #12]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d907      	bls.n	8007326 <_fwalk_reent+0x3a>
 8007316:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800731a:	3301      	adds	r3, #1
 800731c:	d003      	beq.n	8007326 <_fwalk_reent+0x3a>
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	47c0      	blx	r8
 8007324:	4307      	orrs	r7, r0
 8007326:	3568      	adds	r5, #104	; 0x68
 8007328:	e7e9      	b.n	80072fe <_fwalk_reent+0x12>

0800732a <__swhatbuf_r>:
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	460e      	mov	r6, r1
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	4614      	mov	r4, r2
 8007334:	2900      	cmp	r1, #0
 8007336:	461d      	mov	r5, r3
 8007338:	b096      	sub	sp, #88	; 0x58
 800733a:	da07      	bge.n	800734c <__swhatbuf_r+0x22>
 800733c:	2300      	movs	r3, #0
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	89b3      	ldrh	r3, [r6, #12]
 8007342:	061a      	lsls	r2, r3, #24
 8007344:	d410      	bmi.n	8007368 <__swhatbuf_r+0x3e>
 8007346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734a:	e00e      	b.n	800736a <__swhatbuf_r+0x40>
 800734c:	466a      	mov	r2, sp
 800734e:	f000 f903 	bl	8007558 <_fstat_r>
 8007352:	2800      	cmp	r0, #0
 8007354:	dbf2      	blt.n	800733c <__swhatbuf_r+0x12>
 8007356:	9a01      	ldr	r2, [sp, #4]
 8007358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800735c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007360:	425a      	negs	r2, r3
 8007362:	415a      	adcs	r2, r3
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	e7ee      	b.n	8007346 <__swhatbuf_r+0x1c>
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2000      	movs	r0, #0
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	b016      	add	sp, #88	; 0x58
 8007370:	bd70      	pop	{r4, r5, r6, pc}
	...

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	466a      	mov	r2, sp
 8007392:	ab01      	add	r3, sp, #4
 8007394:	f7ff ffc9 	bl	800732a <__swhatbuf_r>
 8007398:	9900      	ldr	r1, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4630      	mov	r0, r6
 800739e:	f7fd faf7 	bl	8004990 <_malloc_r>
 80073a2:	b948      	cbnz	r0, 80073b8 <__smakebuf_r+0x44>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d4ef      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	e7e3      	b.n	8007380 <__smakebuf_r+0xc>
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__smakebuf_r+0x7c>)
 80073ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	6120      	str	r0, [r4, #16]
 80073ca:	6163      	str	r3, [r4, #20]
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	b15b      	cbz	r3, 80073e8 <__smakebuf_r+0x74>
 80073d0:	4630      	mov	r0, r6
 80073d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d6:	f000 f8d1 	bl	800757c <_isatty_r>
 80073da:	b128      	cbz	r0, 80073e8 <__smakebuf_r+0x74>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	89a0      	ldrh	r0, [r4, #12]
 80073ea:	4305      	orrs	r5, r0
 80073ec:	81a5      	strh	r5, [r4, #12]
 80073ee:	e7cd      	b.n	800738c <__smakebuf_r+0x18>
 80073f0:	08007189 	.word	0x08007189

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_raise_r>:
 8007404:	291f      	cmp	r1, #31
 8007406:	b538      	push	{r3, r4, r5, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800741a:	b112      	cbz	r2, 8007422 <_raise_r+0x1e>
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	b94b      	cbnz	r3, 8007436 <_raise_r+0x32>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f830 	bl	8007488 <_getpid_r>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b817 	b.w	8007464 <_kill_r>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <_raise_r+0x4c>
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	d103      	bne.n	8007446 <_raise_r+0x42>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	e7e7      	b.n	8007416 <_raise_r+0x12>
 8007446:	2400      	movs	r4, #0
 8007448:	4628      	mov	r0, r5
 800744a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744e:	4798      	blx	r3
 8007450:	2000      	movs	r0, #0
 8007452:	e7e0      	b.n	8007416 <_raise_r+0x12>

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd3 	b.w	8007404 <_raise_r>
 800745e:	bf00      	nop
 8007460:	200000c8 	.word	0x200000c8

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	2300      	movs	r3, #0
 8007468:	4d06      	ldr	r5, [pc, #24]	; (8007484 <_kill_r+0x20>)
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7fb f972 	bl	800275a <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	20000720 	.word	0x20000720

08007488 <_getpid_r>:
 8007488:	f7fb b960 	b.w	800274c <_getpid>

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f894 	bl	80075c0 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	4605      	mov	r5, r0
 80074b8:	05db      	lsls	r3, r3, #23
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	2302      	movs	r3, #2
 80074c2:	2200      	movs	r2, #0
 80074c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c8:	f000 f868 	bl	800759c <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	4632      	mov	r2, r6
 80074d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	4628      	mov	r0, r5
 80074d8:	463b      	mov	r3, r7
 80074da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b817 	b.w	8007514 <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f855 	bl	800759c <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b813 	b.w	8007538 <_close_r>
	...

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	2200      	movs	r2, #0
 800751e:	4d05      	ldr	r5, [pc, #20]	; (8007534 <_write_r+0x20>)
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7fb f950 	bl	80027c8 <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000720 	.word	0x20000720

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d05      	ldr	r5, [pc, #20]	; (8007554 <_close_r+0x1c>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7fb f95c 	bl	8002800 <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000720 	.word	0x20000720

08007558 <_fstat_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	2300      	movs	r3, #0
 800755c:	4d06      	ldr	r5, [pc, #24]	; (8007578 <_fstat_r+0x20>)
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7fb f956 	bl	8002816 <_fstat>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_fstat_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_fstat_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20000720 	.word	0x20000720

0800757c <_isatty_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	2300      	movs	r3, #0
 8007580:	4d05      	ldr	r5, [pc, #20]	; (8007598 <_isatty_r+0x1c>)
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fb f954 	bl	8002834 <_isatty>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_isatty_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_isatty_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000720 	.word	0x20000720

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	2200      	movs	r2, #0
 80075a6:	4d05      	ldr	r5, [pc, #20]	; (80075bc <_lseek_r+0x20>)
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fb f94c 	bl	8002848 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000720 	.word	0x20000720

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	2200      	movs	r2, #0
 80075ca:	4d05      	ldr	r5, [pc, #20]	; (80075e0 <_read_r+0x20>)
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fb f8dd 	bl	800278e <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000720 	.word	0x20000720

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
