
TestLcd2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08007448  08007448  00017448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b74  08007b74  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  08007b74  08007b74  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b74  08007b74  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b74  08007b74  00017b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08007b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000298  08007e14  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08007e14  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139c3  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002982  00000000  00000000  00033c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00036608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004336  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e95  00000000  00000000  0003c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4d0  00000000  00000000  0004e263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  000da788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	0800742c 	.word	0x0800742c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	0800742c 	.word	0x0800742c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <Impostazioni>:
 * nb. per abilitare sprintf abilitare questo flag :
 * -u _printf_float in Properties -> C/C++ Build -> Settings -> MCU GCC Linker -> Miscellaneous -> Linker flags
 *
 * */

void Impostazioni() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
	unsigned char previous = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]
	unsigned char next = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	737b      	strb	r3, [r7, #13]
	bool stay = true;
 8001042:	2301      	movs	r3, #1
 8001044:	733b      	strb	r3, [r7, #12]
	bool innerstay = true;
 8001046:	2301      	movs	r3, #1
 8001048:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 800104a:	f000 fe43 	bl	8001cd4 <lcd_clear>
	lcd_cursor_pos(0, 2);
 800104e:	2102      	movs	r1, #2
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fea9 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(">");
 8001056:	486a      	ldr	r0, [pc, #424]	; (8001200 <Impostazioni+0x1d0>)
 8001058:	f000 fe90 	bl	8001d7c <lcd_send_string>
	lcd_cursor_pos(19, 2);
 800105c:	2102      	movs	r1, #2
 800105e:	2013      	movs	r0, #19
 8001060:	f000 fea2 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_char('<');
 8001064:	203c      	movs	r0, #60	; 0x3c
 8001066:	f000 fecd 	bl	8001e04 <lcd_send_char>
	lcd_cursor_pos(0, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fe9b 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[0]);
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <Impostazioni+0x1d4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fe80 	bl	8001d7c <lcd_send_string>

	int oldMenuPosition = menuPosition;
 800107c:	4b62      	ldr	r3, [pc, #392]	; (8001208 <Impostazioni+0x1d8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	607b      	str	r3, [r7, #4]

	menuPosition = 1;
 8001082:	4b61      	ldr	r3, [pc, #388]	; (8001208 <Impostazioni+0x1d8>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

	while (stay) {
 8001088:	e0b0      	b.n	80011ec <Impostazioni+0x1bc>

		switch (current) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <Impostazioni+0x66>
 8001090:	2b13      	cmp	r3, #19
 8001092:	d003      	beq.n	800109c <Impostazioni+0x6c>
 8001094:	e005      	b.n	80010a2 <Impostazioni+0x72>
		case 0:
			current = 18;
 8001096:	2312      	movs	r3, #18
 8001098:	73fb      	strb	r3, [r7, #15]
			break;
 800109a:	e002      	b.n	80010a2 <Impostazioni+0x72>
		case 19:
			current = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
			break;
 80010a0:	bf00      	nop
		}
		previous = current - 1;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	73bb      	strb	r3, [r7, #14]
		next = current + 1;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3301      	adds	r3, #1
 80010ac:	737b      	strb	r3, [r7, #13]
		if (previous == 0)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <Impostazioni+0x88>
			previous = 18;
 80010b4:	2312      	movs	r3, #18
 80010b6:	73bb      	strb	r3, [r7, #14]
		if (next == 19)
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	2b13      	cmp	r3, #19
 80010bc:	d101      	bne.n	80010c2 <Impostazioni+0x92>
			next = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	737b      	strb	r3, [r7, #13]

		lcd_cursor_pos(1, 1);
 80010c2:	2101      	movs	r1, #1
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fe6f 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                   ");
 80010ca:	4850      	ldr	r0, [pc, #320]	; (800120c <Impostazioni+0x1dc>)
 80010cc:	f000 fe56 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 1);
 80010d0:	2101      	movs	r1, #1
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fe68 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[previous]);
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <Impostazioni+0x1d4>)
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fe4b 	bl	8001d7c <lcd_send_string>

		lcd_cursor_pos(1, 2);
 80010e6:	2102      	movs	r1, #2
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fe5d 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                   ");
 80010ee:	4847      	ldr	r0, [pc, #284]	; (800120c <Impostazioni+0x1dc>)
 80010f0:	f000 fe44 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 2);
 80010f4:	2102      	movs	r1, #2
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fe56 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[current]);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	4a41      	ldr	r2, [pc, #260]	; (8001204 <Impostazioni+0x1d4>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fe39 	bl	8001d7c <lcd_send_string>

		lcd_cursor_pos(1, 3);
 800110a:	2103      	movs	r1, #3
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fe4b 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                   ");
 8001112:	483e      	ldr	r0, [pc, #248]	; (800120c <Impostazioni+0x1dc>)
 8001114:	f000 fe32 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 3);
 8001118:	2103      	movs	r1, #3
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fe44 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[next]);
 8001120:	7b7b      	ldrb	r3, [r7, #13]
 8001122:	4a38      	ldr	r2, [pc, #224]	; (8001204 <Impostazioni+0x1d4>)
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fe27 	bl	8001d7c <lcd_send_string>

		innerstay = true;
 800112e:	2301      	movs	r3, #1
 8001130:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 8001132:	e054      	b.n	80011de <Impostazioni+0x1ae>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 8001134:	2120      	movs	r1, #32
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <Impostazioni+0x1e0>)
 8001138:	f001 fe48 	bl	8002dcc <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d122      	bne.n	8001188 <Impostazioni+0x158>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 8001142:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001146:	f001 fb8b 	bl	8002860 <HAL_Delay>
				ImpostazioniCambiaValore(current);
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f863 	bl	8001218 <ImpostazioniCambiaValore>
				lcd_clear();
 8001152:	f000 fdbf 	bl	8001cd4 <lcd_clear>
				lcd_cursor_pos(0, 2);
 8001156:	2102      	movs	r1, #2
 8001158:	2000      	movs	r0, #0
 800115a:	f000 fe25 	bl	8001da8 <lcd_cursor_pos>
				lcd_send_string(">");
 800115e:	4828      	ldr	r0, [pc, #160]	; (8001200 <Impostazioni+0x1d0>)
 8001160:	f000 fe0c 	bl	8001d7c <lcd_send_string>
				lcd_cursor_pos(19, 2);
 8001164:	2102      	movs	r1, #2
 8001166:	2013      	movs	r0, #19
 8001168:	f000 fe1e 	bl	8001da8 <lcd_cursor_pos>
				lcd_send_char('<');
 800116c:	203c      	movs	r0, #60	; 0x3c
 800116e:	f000 fe49 	bl	8001e04 <lcd_send_char>
				lcd_cursor_pos(0, 0);
 8001172:	2100      	movs	r1, #0
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fe17 	bl	8001da8 <lcd_cursor_pos>
				lcd_send_string(MenuImpostazioni[0]);
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <Impostazioni+0x1d4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fdfc 	bl	8001d7c <lcd_send_string>
				innerstay = false;
 8001184:	2300      	movs	r3, #0
 8001186:	72fb      	strb	r3, [r7, #11]

			}
			if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118c:	4821      	ldr	r0, [pc, #132]	; (8001214 <Impostazioni+0x1e4>)
 800118e:	f001 fe1d 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10a      	bne.n	80011ae <Impostazioni+0x17e>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 8001198:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800119c:	f001 fb60 	bl	8002860 <HAL_Delay>
				stay = false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	733b      	strb	r3, [r7, #12]
				innerstay = false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	72fb      	strb	r3, [r7, #11]
				menuPosition = oldMenuPosition;
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <Impostazioni+0x1d8>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
			}
			if (current != menuPosition) {
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <Impostazioni+0x1d8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d012      	beq.n	80011de <Impostazioni+0x1ae>
				if (menuPosition > 18)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <Impostazioni+0x1d8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	dd02      	ble.n	80011c6 <Impostazioni+0x196>
					menuPosition = 1;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <Impostazioni+0x1d8>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <Impostazioni+0x1d8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <Impostazioni+0x1a4>
					menuPosition = 18;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <Impostazioni+0x1d8>)
 80011d0:	2212      	movs	r2, #18
 80011d2:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <Impostazioni+0x1d8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	73fb      	strb	r3, [r7, #15]
				innerstay = false;
 80011da:	2300      	movs	r3, #0
 80011dc:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1a7      	bne.n	8001134 <Impostazioni+0x104>

			}
		}
		HAL_Delay(300);
 80011e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011e8:	f001 fb3a 	bl	8002860 <HAL_Delay>
	while (stay) {
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f47f af4b 	bne.w	800108a <Impostazioni+0x5a>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	080075d4 	.word	0x080075d4
 8001204:	20000000 	.word	0x20000000
 8001208:	200006c8 	.word	0x200006c8
 800120c:	080075d8 	.word	0x080075d8
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40010800 	.word	0x40010800

08001218 <ImpostazioniCambiaValore>:

void ImpostazioniCambiaValore(unsigned char current) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

	int oldMenuPosition = menuPosition;
 8001222:	4ba9      	ldr	r3, [pc, #676]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	60fb      	str	r3, [r7, #12]
	menuPosition = 0;
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	int previousMenuPosition = menuPosition;
 800122e:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]
	int variation = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
	bool stay = true;
 8001238:	2301      	movs	r3, #1
 800123a:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 800123c:	f000 fd4a 	bl	8001cd4 <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f000 fdb0 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[current]);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4aa0      	ldr	r2, [pc, #640]	; (80014cc <ImpostazioniCambiaValore+0x2b4>)
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fd93 	bl	8001d7c <lcd_send_string>
	lcd_cursor_pos(0, 3);
 8001256:	2103      	movs	r1, #3
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fda5 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string("SEL:OK");
 800125e:	489c      	ldr	r0, [pc, #624]	; (80014d0 <ImpostazioniCambiaValore+0x2b8>)
 8001260:	f000 fd8c 	bl	8001d7c <lcd_send_string>
	lcd_cursor_pos(0, 1);
 8001264:	2101      	movs	r1, #1
 8001266:	2000      	movs	r0, #0
 8001268:	f000 fd9e 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa8c 	bl	800178c <ImpostazioniGetStringValueFromMenuIndex>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fd80 	bl	8001d7c <lcd_send_string>

	while (stay) {
 800127c:	e271      	b.n	8001762 <ImpostazioniCambiaValore+0x54a>
		if (current == 18
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d12e      	bne.n	80012e2 <ImpostazioniCambiaValore+0xca>
				&& HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin)
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	4892      	ldr	r0, [pc, #584]	; (80014d4 <ImpostazioniCambiaValore+0x2bc>)
 800128a:	f001 fd9f 	bl	8002dcc <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d126      	bne.n	80012e2 <ImpostazioniCambiaValore+0xca>
						== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001298:	f001 fae2 	bl	8002860 <HAL_Delay>
			lcd_clear();
 800129c:	f000 fd1a 	bl	8001cd4 <lcd_clear>
			lcd_cursor_pos(0, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 fd80 	bl	8001da8 <lcd_cursor_pos>
			lcd_send_string(MenuImpostazioni[current]);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a88      	ldr	r2, [pc, #544]	; (80014cc <ImpostazioniCambiaValore+0x2b4>)
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fd63 	bl	8001d7c <lcd_send_string>
			lcd_cursor_pos(0, 3);
 80012b6:	2103      	movs	r1, #3
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 fd75 	bl	8001da8 <lcd_cursor_pos>
			lcd_send_string("....................");
 80012be:	4886      	ldr	r0, [pc, #536]	; (80014d8 <ImpostazioniCambiaValore+0x2c0>)
 80012c0:	f000 fd5c 	bl	8001d7c <lcd_send_string>
			lcd_cursor_pos(0, 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 fd6e 	bl	8001da8 <lcd_cursor_pos>
			lcd_send_string("Ripristino in corso");
 80012cc:	4883      	ldr	r0, [pc, #524]	; (80014dc <ImpostazioniCambiaValore+0x2c4>)
 80012ce:	f000 fd55 	bl	8001d7c <lcd_send_string>
			HAL_Delay(2000);
 80012d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012d6:	f001 fac3 	bl	8002860 <HAL_Delay>
			menuPosition = oldMenuPosition;
 80012da:	4a7b      	ldr	r2, [pc, #492]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6013      	str	r3, [r2, #0]
			return;
 80012e0:	e243      	b.n	800176a <ImpostazioniCambiaValore+0x552>
		}
		if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 80012e2:	2120      	movs	r1, #32
 80012e4:	487b      	ldr	r0, [pc, #492]	; (80014d4 <ImpostazioniCambiaValore+0x2bc>)
 80012e6:	f001 fd71 	bl	8002dcc <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <ImpostazioniCambiaValore+0xe8>
				== GPIO_PIN_RESET) {
			HAL_Delay(300);
 80012f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012f4:	f001 fab4 	bl	8002860 <HAL_Delay>
			menuPosition = oldMenuPosition;
 80012f8:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6013      	str	r3, [r2, #0]
			return;
 80012fe:	e234      	b.n	800176a <ImpostazioniCambiaValore+0x552>

		}
		if (previousMenuPosition != menuPosition) {
 8001300:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	429a      	cmp	r2, r3
 8001308:	f000 822b 	beq.w	8001762 <ImpostazioniCambiaValore+0x54a>
			if (menuPosition < previousMenuPosition) {
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	429a      	cmp	r2, r3
 8001314:	dd03      	ble.n	800131e <ImpostazioniCambiaValore+0x106>
				variation = -1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	e006      	b.n	800132c <ImpostazioniCambiaValore+0x114>
			} else if (menuPosition > previousMenuPosition) {
 800131e:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	da01      	bge.n	800132c <ImpostazioniCambiaValore+0x114>
				variation = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
			}
			previousMenuPosition = menuPosition;
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <ImpostazioniCambiaValore+0x2b0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	617b      	str	r3, [r7, #20]

			switch (current) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3b01      	subs	r3, #1
 8001336:	2b10      	cmp	r3, #16
 8001338:	f200 81fc 	bhi.w	8001734 <ImpostazioniCambiaValore+0x51c>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <ImpostazioniCambiaValore+0x12c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001389 	.word	0x08001389
 8001348:	080013a5 	.word	0x080013a5
 800134c:	080013c1 	.word	0x080013c1
 8001350:	08001433 	.word	0x08001433
 8001354:	0800145f 	.word	0x0800145f
 8001358:	0800148b 	.word	0x0800148b
 800135c:	08001501 	.word	0x08001501
 8001360:	08001535 	.word	0x08001535
 8001364:	08001569 	.word	0x08001569
 8001368:	0800159d 	.word	0x0800159d
 800136c:	080015d1 	.word	0x080015d1
 8001370:	08001605 	.word	0x08001605
 8001374:	08001639 	.word	0x08001639
 8001378:	0800166b 	.word	0x0800166b
 800137c:	0800169d 	.word	0x0800169d
 8001380:	080016b7 	.word	0x080016b7
 8001384:	080016e5 	.word	0x080016e5
			case 1:
				if (one_turn_mandrel_steps + variation > 0)
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	f340 81b4 	ble.w	80016fe <ImpostazioniCambiaValore+0x4e6>
					one_turn_mandrel_steps += variation;
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4413      	add	r3, r2
 800139e:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <ImpostazioniCambiaValore+0x2c8>)
 80013a0:	6013      	str	r3, [r2, #0]
				break;
 80013a2:	e1ac      	b.n	80016fe <ImpostazioniCambiaValore+0x4e6>
			case 2:
				if (one_turn_screw_steps + variation > 0)
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 81a8 	beq.w	8001702 <ImpostazioniCambiaValore+0x4ea>
					one_turn_screw_steps += variation;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <ImpostazioniCambiaValore+0x2cc>)
 80013bc:	6013      	str	r3, [r2, #0]
				break;
 80013be:	e1a0      	b.n	8001702 <ImpostazioniCambiaValore+0x4ea>
			case 3:
				if ((((screw_pitch * 1000) + (variation)) / 1000) > 0)
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4949      	ldr	r1, [pc, #292]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc6c 	bl	8000ca4 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461c      	mov	r4, r3
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f7ff fc13 	bl	8000bfc <__aeabi_i2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fb5a 	bl	8000a94 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd11 	bl	8000e0c <__aeabi_fdiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe13 	bl	800101c <__aeabi_fcmpgt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d100      	bne.n	80013fe <ImpostazioniCambiaValore+0x1e6>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
				break;
 80013fc:	e19a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc4d 	bl	8000ca4 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	461c      	mov	r4, r3
 800140e:	6938      	ldr	r0, [r7, #16]
 8001410:	f7ff fbf4 	bl	8000bfc <__aeabi_i2f>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fb3b 	bl	8000a94 <__addsf3>
 800141e:	4603      	mov	r3, r0
 8001420:	4932      	ldr	r1, [pc, #200]	; (80014ec <ImpostazioniCambiaValore+0x2d4>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fcf2 	bl	8000e0c <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <ImpostazioniCambiaValore+0x2d0>)
 800142e:	601a      	str	r2, [r3, #0]
				break;
 8001430:	e180      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
			case 4:
				if (AccelerationDelay + variation * 5 > 0)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 815f 	beq.w	8001706 <ImpostazioniCambiaValore+0x4ee>
					AccelerationDelay += (variation * 5);
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <ImpostazioniCambiaValore+0x2d8>)
 800145a:	6013      	str	r3, [r2, #0]
				break;
 800145c:	e153      	b.n	8001706 <ImpostazioniCambiaValore+0x4ee>
			case 5:
				if (DecelerationDelay + variation * 5 > 0)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	461a      	mov	r2, r3
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4413      	add	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 814b 	beq.w	800170a <ImpostazioniCambiaValore+0x4f2>
					DecelerationDelay += (variation * 5);
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <ImpostazioniCambiaValore+0x2dc>)
 8001486:	6013      	str	r3, [r2, #0]
				break;
 8001488:	e13f      	b.n	800170a <ImpostazioniCambiaValore+0x4f2>
			case 6:
				CW = !(CW);
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <ImpostazioniCambiaValore+0x2e0>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <ImpostazioniCambiaValore+0x2e0>)
 80014a6:	701a      	strb	r2, [r3, #0]
				CCW = !(CCW);
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <ImpostazioniCambiaValore+0x2e4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <ImpostazioniCambiaValore+0x2e4>)
 80014c4:	701a      	strb	r2, [r3, #0]
				break;
 80014c6:	e135      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
 80014c8:	200006c8 	.word	0x200006c8
 80014cc:	20000000 	.word	0x20000000
 80014d0:	080075ec 	.word	0x080075ec
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	080075f4 	.word	0x080075f4
 80014dc:	0800760c 	.word	0x0800760c
 80014e0:	20000080 	.word	0x20000080
 80014e4:	20000088 	.word	0x20000088
 80014e8:	20000084 	.word	0x20000084
 80014ec:	447a0000 	.word	0x447a0000
 80014f0:	2000008c 	.word	0x2000008c
 80014f4:	20000090 	.word	0x20000090
 80014f8:	20000094 	.word	0x20000094
 80014fc:	200002b8 	.word	0x200002b8
			case 7:
				if (av_carro[0] + variation / 5 > 0)
 8001500:	4b9b      	ldr	r3, [pc, #620]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	499b      	ldr	r1, [pc, #620]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001508:	fb81 0103 	smull	r0, r1, r1, r3
 800150c:	1049      	asrs	r1, r1, #1
 800150e:	17db      	asrs	r3, r3, #31
 8001510:	1acb      	subs	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80fa 	beq.w	800170e <ImpostazioniCambiaValore+0x4f6>
					av_carro[0] += (variation / 5);
 800151a:	4b95      	ldr	r3, [pc, #596]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4994      	ldr	r1, [pc, #592]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001522:	fb81 0103 	smull	r0, r1, r1, r3
 8001526:	1049      	asrs	r1, r1, #1
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1acb      	subs	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	4a90      	ldr	r2, [pc, #576]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001530:	6013      	str	r3, [r2, #0]
				break;
 8001532:	e0ec      	b.n	800170e <ImpostazioniCambiaValore+0x4f6>
			case 8:
				if (av_trasv[0] + variation / 5 > 0)
 8001534:	4b90      	ldr	r3, [pc, #576]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	498e      	ldr	r1, [pc, #568]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800153c:	fb81 0103 	smull	r0, r1, r1, r3
 8001540:	1049      	asrs	r1, r1, #1
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1acb      	subs	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80e2 	beq.w	8001712 <ImpostazioniCambiaValore+0x4fa>
					av_trasv[0] += (variation / 5);
 800154e:	4b8a      	ldr	r3, [pc, #552]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4987      	ldr	r1, [pc, #540]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001556:	fb81 0103 	smull	r0, r1, r1, r3
 800155a:	1049      	asrs	r1, r1, #1
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	4a85      	ldr	r2, [pc, #532]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001564:	6013      	str	r3, [r2, #0]
				break;
 8001566:	e0d4      	b.n	8001712 <ImpostazioniCambiaValore+0x4fa>
			case 9:
				if (av_carro[1] + variation / 5 > 0)
 8001568:	4b81      	ldr	r3, [pc, #516]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4981      	ldr	r1, [pc, #516]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001570:	fb81 0103 	smull	r0, r1, r1, r3
 8001574:	1049      	asrs	r1, r1, #1
 8001576:	17db      	asrs	r3, r3, #31
 8001578:	1acb      	subs	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80ca 	beq.w	8001716 <ImpostazioniCambiaValore+0x4fe>
					av_carro[1] += (variation / 5);
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	497a      	ldr	r1, [pc, #488]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800158a:	fb81 0103 	smull	r0, r1, r1, r3
 800158e:	1049      	asrs	r1, r1, #1
 8001590:	17db      	asrs	r3, r3, #31
 8001592:	1acb      	subs	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	4a76      	ldr	r2, [pc, #472]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001598:	6053      	str	r3, [r2, #4]
				break;
 800159a:	e0bc      	b.n	8001716 <ImpostazioniCambiaValore+0x4fe>
			case 10:
				if (av_trasv[1] + variation / 5 > 0)
 800159c:	4b76      	ldr	r3, [pc, #472]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4974      	ldr	r1, [pc, #464]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015a4:	fb81 0103 	smull	r0, r1, r1, r3
 80015a8:	1049      	asrs	r1, r1, #1
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80b2 	beq.w	800171a <ImpostazioniCambiaValore+0x502>
					av_trasv[1] += (variation / 5);
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	496d      	ldr	r1, [pc, #436]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015be:	fb81 0103 	smull	r0, r1, r1, r3
 80015c2:	1049      	asrs	r1, r1, #1
 80015c4:	17db      	asrs	r3, r3, #31
 80015c6:	1acb      	subs	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4a6b      	ldr	r2, [pc, #428]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 80015cc:	6053      	str	r3, [r2, #4]
				break;
 80015ce:	e0a4      	b.n	800171a <ImpostazioniCambiaValore+0x502>
			case 11:
				if (av_carro[2] + variation / 5 > 0)
 80015d0:	4b67      	ldr	r3, [pc, #412]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4967      	ldr	r1, [pc, #412]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015d8:	fb81 0103 	smull	r0, r1, r1, r3
 80015dc:	1049      	asrs	r1, r1, #1
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1acb      	subs	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 809a 	beq.w	800171e <ImpostazioniCambiaValore+0x506>
					av_carro[2] += (variation / 5);
 80015ea:	4b61      	ldr	r3, [pc, #388]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4960      	ldr	r1, [pc, #384]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 80015f2:	fb81 0103 	smull	r0, r1, r1, r3
 80015f6:	1049      	asrs	r1, r1, #1
 80015f8:	17db      	asrs	r3, r3, #31
 80015fa:	1acb      	subs	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	4a5c      	ldr	r2, [pc, #368]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001600:	6093      	str	r3, [r2, #8]
				break;
 8001602:	e08c      	b.n	800171e <ImpostazioniCambiaValore+0x506>
			case 12:
				if (av_trasv[2] + variation / 5 > 0)
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	495a      	ldr	r1, [pc, #360]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800160c:	fb81 0103 	smull	r0, r1, r1, r3
 8001610:	1049      	asrs	r1, r1, #1
 8001612:	17db      	asrs	r3, r3, #31
 8001614:	1acb      	subs	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8082 	beq.w	8001722 <ImpostazioniCambiaValore+0x50a>
					av_trasv[2] += (variation / 5);
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4953      	ldr	r1, [pc, #332]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001626:	fb81 0103 	smull	r0, r1, r1, r3
 800162a:	1049      	asrs	r1, r1, #1
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1acb      	subs	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	4a51      	ldr	r2, [pc, #324]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001634:	6093      	str	r3, [r2, #8]
				break;
 8001636:	e074      	b.n	8001722 <ImpostazioniCambiaValore+0x50a>
			case 13:
				if (av_carro[3] + variation / 5 > 0)
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	494d      	ldr	r1, [pc, #308]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001640:	fb81 0103 	smull	r0, r1, r1, r3
 8001644:	1049      	asrs	r1, r1, #1
 8001646:	17db      	asrs	r3, r3, #31
 8001648:	1acb      	subs	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06a      	beq.n	8001726 <ImpostazioniCambiaValore+0x50e>
					av_carro[3] += (variation / 5);
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4947      	ldr	r1, [pc, #284]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001658:	fb81 0103 	smull	r0, r1, r1, r3
 800165c:	1049      	asrs	r1, r1, #1
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	4a42      	ldr	r2, [pc, #264]	; (8001770 <ImpostazioniCambiaValore+0x558>)
 8001666:	60d3      	str	r3, [r2, #12]
				break;
 8001668:	e05d      	b.n	8001726 <ImpostazioniCambiaValore+0x50e>
			case 14:
				if (av_trasv[3] + variation / 5 > 0)
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4940      	ldr	r1, [pc, #256]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 8001672:	fb81 0103 	smull	r0, r1, r1, r3
 8001676:	1049      	asrs	r1, r1, #1
 8001678:	17db      	asrs	r3, r3, #31
 800167a:	1acb      	subs	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d053      	beq.n	800172a <ImpostazioniCambiaValore+0x512>
					av_trasv[3] += (variation / 5);
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	493a      	ldr	r1, [pc, #232]	; (8001774 <ImpostazioniCambiaValore+0x55c>)
 800168a:	fb81 0103 	smull	r0, r1, r1, r3
 800168e:	1049      	asrs	r1, r1, #1
 8001690:	17db      	asrs	r3, r3, #31
 8001692:	1acb      	subs	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <ImpostazioniCambiaValore+0x560>)
 8001698:	60d3      	str	r3, [r2, #12]
				break;
 800169a:	e046      	b.n	800172a <ImpostazioniCambiaValore+0x512>
			case 15:
				if (thread_offset_steps + variation > 0)
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <ImpostazioniCambiaValore+0x564>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4413      	add	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dd42      	ble.n	800172e <ImpostazioniCambiaValore+0x516>
					thread_offset_steps += variation;
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <ImpostazioniCambiaValore+0x564>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <ImpostazioniCambiaValore+0x564>)
 80016b2:	6013      	str	r3, [r2, #0]
				break;
 80016b4:	e03b      	b.n	800172e <ImpostazioniCambiaValore+0x516>
			case 16:
				if (NORTON_gearbox + variation > 0)
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4413      	add	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dd07      	ble.n	80016d4 <ImpostazioniCambiaValore+0x4bc>
					NORTON_gearbox += variation;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016d2:	701a      	strb	r2, [r3, #0]
				if (NORTON_gearbox > 3)
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d92a      	bls.n	8001732 <ImpostazioniCambiaValore+0x51a>
					NORTON_gearbox = 3;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <ImpostazioniCambiaValore+0x568>)
 80016de:	2203      	movs	r2, #3
 80016e0:	701a      	strb	r2, [r3, #0]
				break;
 80016e2:	e026      	b.n	8001732 <ImpostazioniCambiaValore+0x51a>
			case 17:
				if (MaxStepperSpeed + variation > 0)
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d021      	beq.n	8001734 <ImpostazioniCambiaValore+0x51c>
					MaxStepperSpeed += variation;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <ImpostazioniCambiaValore+0x56c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e01a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 80016fe:	bf00      	nop
 8001700:	e018      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001702:	bf00      	nop
 8001704:	e016      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001706:	bf00      	nop
 8001708:	e014      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800170a:	bf00      	nop
 800170c:	e012      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800170e:	bf00      	nop
 8001710:	e010      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001712:	bf00      	nop
 8001714:	e00e      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001716:	bf00      	nop
 8001718:	e00c      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800171a:	bf00      	nop
 800171c:	e00a      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800171e:	bf00      	nop
 8001720:	e008      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001722:	bf00      	nop
 8001724:	e006      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <ImpostazioniCambiaValore+0x51c>
				break;
 8001732:	bf00      	nop
			}
			lcd_cursor_pos(0, 1);
 8001734:	2101      	movs	r1, #1
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fb36 	bl	8001da8 <lcd_cursor_pos>
			lcd_send_string("                    ");
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <ImpostazioniCambiaValore+0x570>)
 800173e:	f000 fb1d 	bl	8001d7c <lcd_send_string>
			lcd_cursor_pos(0, 1);
 8001742:	2101      	movs	r1, #1
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fb2f 	bl	8001da8 <lcd_cursor_pos>
			lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f81d 	bl	800178c <ImpostazioniGetStringValueFromMenuIndex>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fb11 	bl	8001d7c <lcd_send_string>
			HAL_Delay(300);
 800175a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800175e:	f001 f87f 	bl	8002860 <HAL_Delay>
	while (stay) {
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f ad8a 	bne.w	800127e <ImpostazioniCambiaValore+0x66>
		}
	}
}
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	20000060 	.word	0x20000060
 8001774:	66666667 	.word	0x66666667
 8001778:	20000070 	.word	0x20000070
 800177c:	20000098 	.word	0x20000098
 8001780:	200002d0 	.word	0x200002d0
 8001784:	2000009c 	.word	0x2000009c
 8001788:	08007620 	.word	0x08007620

0800178c <ImpostazioniGetStringValueFromMenuIndex>:

char* ImpostazioniGetStringValueFromMenuIndex(unsigned char current) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	char *buff;
	buff = malloc(sizeof(char) * 20);
 8001796:	2014      	movs	r0, #20
 8001798:	f002 ffa8 	bl	80046ec <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]

	switch (current) {
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	f200 80c5 	bhi.w	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <ImpostazioniGetStringValueFromMenuIndex+0x24>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017f9 	.word	0x080017f9
 80017b4:	08001809 	.word	0x08001809
 80017b8:	08001819 	.word	0x08001819
 80017bc:	08001831 	.word	0x08001831
 80017c0:	08001841 	.word	0x08001841
 80017c4:	08001851 	.word	0x08001851
 80017c8:	08001875 	.word	0x08001875
 80017cc:	08001885 	.word	0x08001885
 80017d0:	08001895 	.word	0x08001895
 80017d4:	080018a5 	.word	0x080018a5
 80017d8:	080018b5 	.word	0x080018b5
 80017dc:	080018c5 	.word	0x080018c5
 80017e0:	080018d5 	.word	0x080018d5
 80017e4:	080018e5 	.word	0x080018e5
 80017e8:	080018f5 	.word	0x080018f5
 80017ec:	08001905 	.word	0x08001905
 80017f0:	08001917 	.word	0x08001917
 80017f4:	08001927 	.word	0x08001927
	case 1:
		sprintf(buff, "%d", one_turn_mandrel_steps);
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <ImpostazioniGetStringValueFromMenuIndex+0x200>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4964      	ldr	r1, [pc, #400]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001800:	68b8      	ldr	r0, [r7, #8]
 8001802:	f003 fcb3 	bl	800516c <siprintf>
		break;
 8001806:	e095      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 2:
		sprintf(buff, "%d", one_turn_screw_steps);
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <ImpostazioniGetStringValueFromMenuIndex+0x208>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4960      	ldr	r1, [pc, #384]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f003 fcab 	bl	800516c <siprintf>
		break;
 8001816:	e08d      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 3:
		sprintf(buff, "%.3f", screw_pitch);
 8001818:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <ImpostazioniGetStringValueFromMenuIndex+0x20c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe03 	bl	8000428 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	495d      	ldr	r1, [pc, #372]	; (800199c <ImpostazioniGetStringValueFromMenuIndex+0x210>)
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f003 fc9f 	bl	800516c <siprintf>
		break;
 800182e:	e081      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 4:
		sprintf(buff, "%d", AccelerationDelay);
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <ImpostazioniGetStringValueFromMenuIndex+0x214>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4956      	ldr	r1, [pc, #344]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f003 fc97 	bl	800516c <siprintf>
		break;
 800183e:	e079      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 5:
		sprintf(buff, "%d", DecelerationDelay);
 8001840:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <ImpostazioniGetStringValueFromMenuIndex+0x218>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4952      	ldr	r1, [pc, #328]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f003 fc8f 	bl	800516c <siprintf>
		break;
 800184e:	e071      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 6:
		if (CCW)
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <ImpostazioniGetStringValueFromMenuIndex+0x21c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <ImpostazioniGetStringValueFromMenuIndex+0xda>
			sprintf(buff, MenuImpostazioni[19]);
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	4619      	mov	r1, r3
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f003 fc84 	bl	800516c <siprintf>
		else
			sprintf(buff, MenuImpostazioni[20]);
		break;
 8001864:	e066      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
			sprintf(buff, MenuImpostazioni[20]);
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186a:	4619      	mov	r1, r3
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f003 fc7d 	bl	800516c <siprintf>
		break;
 8001872:	e05f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>

	case 7:
		sprintf(buff, "%d", av_carro[0]);
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4945      	ldr	r1, [pc, #276]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f003 fc75 	bl	800516c <siprintf>
		break;
 8001882:	e057      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 8:
		sprintf(buff, "%d", av_trasv[0]);
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4941      	ldr	r1, [pc, #260]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f003 fc6d 	bl	800516c <siprintf>
		break;
 8001892:	e04f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 9:
		sprintf(buff, "%d", av_carro[1]);
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	461a      	mov	r2, r3
 800189a:	493d      	ldr	r1, [pc, #244]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f003 fc65 	bl	800516c <siprintf>
		break;
 80018a2:	e047      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 10:
		sprintf(buff, "%d", av_trasv[1]);
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4939      	ldr	r1, [pc, #228]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f003 fc5d 	bl	800516c <siprintf>
		break;
 80018b2:	e03f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 11:
		sprintf(buff, "%d", av_carro[2]);
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4935      	ldr	r1, [pc, #212]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018bc:	68b8      	ldr	r0, [r7, #8]
 80018be:	f003 fc55 	bl	800516c <siprintf>
		break;
 80018c2:	e037      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 12:
		sprintf(buff, "%d", av_trasv[2]);
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4931      	ldr	r1, [pc, #196]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f003 fc4d 	bl	800516c <siprintf>
		break;
 80018d2:	e02f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 13:
		sprintf(buff, "%d", av_carro[3]);
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	461a      	mov	r2, r3
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	f003 fc45 	bl	800516c <siprintf>
		break;
 80018e2:	e027      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 14:
		sprintf(buff, "%d", av_trasv[3]);
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4929      	ldr	r1, [pc, #164]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f003 fc3d 	bl	800516c <siprintf>
		break;
 80018f2:	e01f      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 15:
		sprintf(buff, "%d", thread_offset_steps);
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <ImpostazioniGetStringValueFromMenuIndex+0x22c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4925      	ldr	r1, [pc, #148]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018fc:	68b8      	ldr	r0, [r7, #8]
 80018fe:	f003 fc35 	bl	800516c <siprintf>
		break;
 8001902:	e017      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 16:
		sprintf(buff, "%d", NORTON_gearbox + 1);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <ImpostazioniGetStringValueFromMenuIndex+0x230>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	461a      	mov	r2, r3
 800190c:	4920      	ldr	r1, [pc, #128]	; (8001990 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f003 fc2c 	bl	800516c <siprintf>
		break;
 8001914:	e00e      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 17:
		sprintf(buff, "%lu", MaxStepperSpeed);
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <ImpostazioniGetStringValueFromMenuIndex+0x234>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4929      	ldr	r1, [pc, #164]	; (80019c4 <ImpostazioniGetStringValueFromMenuIndex+0x238>)
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f003 fc24 	bl	800516c <siprintf>
		break;
 8001924:	e006      	b.n	8001934 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 18:
		sprintf(buff, MenuImpostazioni[21]);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	4619      	mov	r1, r3
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f003 fc1d 	bl	800516c <siprintf>
		break;
 8001932:	bf00      	nop
	}

	//ltrim string
	int nhead = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]

	while (buff[nhead++] == ' ')
 8001938:	bf00      	nop
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60fa      	str	r2, [r7, #12]
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b20      	cmp	r3, #32
 800194a:	d0f6      	beq.n	800193a <ImpostazioniGetStringValueFromMenuIndex+0x1ae>
		;

	nhead--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3b01      	subs	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
	memmove(buff, &buff[nhead], strlen(buff) - (nhead));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f7fe fbf9 	bl	8000150 <strlen>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4621      	mov	r1, r4
 8001968:	68b8      	ldr	r0, [r7, #8]
 800196a:	f002 fec7 	bl	80046fc <memmove>
	buff[strlen(buff) - (nhead)] = '\0';
 800196e:	68b8      	ldr	r0, [r7, #8]
 8001970:	f7fe fbee 	bl	8000150 <strlen>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

	return buff;
 8001982:	68bb      	ldr	r3, [r7, #8]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	20000080 	.word	0x20000080
 8001990:	08007638 	.word	0x08007638
 8001994:	20000088 	.word	0x20000088
 8001998:	20000084 	.word	0x20000084
 800199c:	0800763c 	.word	0x0800763c
 80019a0:	2000008c 	.word	0x2000008c
 80019a4:	20000090 	.word	0x20000090
 80019a8:	200002b8 	.word	0x200002b8
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000060 	.word	0x20000060
 80019b4:	20000070 	.word	0x20000070
 80019b8:	20000098 	.word	0x20000098
 80019bc:	200002d0 	.word	0x200002d0
 80019c0:	2000009c 	.word	0x2000009c
 80019c4:	08007644 	.word	0x08007644

080019c8 <PosizioneAngolare>:
extern char buff[];
extern uint32_t steps;
extern TIM_HandleTypeDef htim3;
extern volatile int giri;

void PosizioneAngolare() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
	float Degrees = 0.00;                       //variable used to store degrees
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
	float old_Degrees = 0.01; //variable to check if the position is changed. Set different from Degrees to print LCD output on the first cycle
 80019d4:	4b49      	ldr	r3, [pc, #292]	; (8001afc <PosizioneAngolare+0x134>)
 80019d6:	60bb      	str	r3, [r7, #8]
	float AngularRatio = 360.0/(float)one_turn_mandrel_steps; //calculates the degrees per single mandrel encoder step
 80019d8:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <PosizioneAngolare+0x138>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f90d 	bl	8000bfc <__aeabi_i2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4847      	ldr	r0, [pc, #284]	; (8001b04 <PosizioneAngolare+0x13c>)
 80019e8:	f7ff fa10 	bl	8000e0c <__aeabi_fdiv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	607b      	str	r3, [r7, #4]

	lcd_clear();
 80019f0:	f000 f970 	bl	8001cd4 <lcd_clear>
	lcd_cursor_pos(0, 0);
 80019f4:	2100      	movs	r1, #0
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f9d6 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[0]);
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <PosizioneAngolare+0x140>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f9bb 	bl	8001d7c <lcd_send_string>
	lcd_cursor_pos(0, 3);
 8001a06:	2103      	movs	r1, #3
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f9cd 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[1]);
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <PosizioneAngolare+0x140>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f9b2 	bl	8001d7c <lcd_send_string>



	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001a18:	e060      	b.n	8001adc <PosizioneAngolare+0x114>
		if (HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin) == GPIO_PIN_RESET){
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	483b      	ldr	r0, [pc, #236]	; (8001b0c <PosizioneAngolare+0x144>)
 8001a20:	f001 f9d4 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <PosizioneAngolare+0x76>
			HAL_Delay(300);
 8001a2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a2e:	f000 ff17 	bl	8002860 <HAL_Delay>
			steps = 0;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <PosizioneAngolare+0x148>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
			Degrees = 0;
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
		}

		Degrees = ((float) ((abs(steps) % one_turn_mandrel_steps))
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <PosizioneAngolare+0x148>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bfb8      	it	lt
 8001a46:	425b      	neglt	r3, r3
 8001a48:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <PosizioneAngolare+0x138>)
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a50:	fb02 f201 	mul.w	r2, r2, r1
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8d0 	bl	8000bfc <__aeabi_i2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f91f 	bl	8000ca4 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	60fb      	str	r3, [r7, #12]
				* AngularRatio);
		steps = TIM3->CNT;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <PosizioneAngolare+0x14c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <PosizioneAngolare+0x148>)
 8001a70:	6013      	str	r3, [r2, #0]


		if (steps < 0)
			Degrees = 360 - Degrees;
		if (Degrees == 360)
 8001a72:	4924      	ldr	r1, [pc, #144]	; (8001b04 <PosizioneAngolare+0x13c>)
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff faa9 	bl	8000fcc <__aeabi_fcmpeq>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <PosizioneAngolare+0xbe>
			Degrees = 0;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
		if (Degrees != old_Degrees) {
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fa9f 	bl	8000fcc <__aeabi_fcmpeq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d115      	bne.n	8001ac0 <PosizioneAngolare+0xf8>
			lcd_cursor_pos(1, 1);
 8001a94:	2101      	movs	r1, #1
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 f986 	bl	8001da8 <lcd_cursor_pos>
			sprintf(buff,"gradi:%.3f" , Degrees);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7fe fcc3 	bl	8000428 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	491c      	ldr	r1, [pc, #112]	; (8001b18 <PosizioneAngolare+0x150>)
 8001aa8:	481c      	ldr	r0, [pc, #112]	; (8001b1c <PosizioneAngolare+0x154>)
 8001aaa:	f003 fb5f 	bl	800516c <siprintf>
			lcd_send_string(buff);
 8001aae:	481b      	ldr	r0, [pc, #108]	; (8001b1c <PosizioneAngolare+0x154>)
 8001ab0:	f000 f964 	bl	8001d7c <lcd_send_string>
			old_Degrees = Degrees;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	60bb      	str	r3, [r7, #8]
			HAL_Delay(300);
 8001ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001abc:	f000 fed0 	bl	8002860 <HAL_Delay>

		}
		lcd_cursor_pos(1, 2);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 f970 	bl	8001da8 <lcd_cursor_pos>
		sprintf(buff,"giri:%d" , giri);
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <PosizioneAngolare+0x158>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4915      	ldr	r1, [pc, #84]	; (8001b24 <PosizioneAngolare+0x15c>)
 8001ad0:	4812      	ldr	r0, [pc, #72]	; (8001b1c <PosizioneAngolare+0x154>)
 8001ad2:	f003 fb4b 	bl	800516c <siprintf>
		lcd_send_string(buff);
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <PosizioneAngolare+0x154>)
 8001ad8:	f000 f950 	bl	8001d7c <lcd_send_string>
	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae0:	4811      	ldr	r0, [pc, #68]	; (8001b28 <PosizioneAngolare+0x160>)
 8001ae2:	f001 f973 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d196      	bne.n	8001a1a <PosizioneAngolare+0x52>
	}
	HAL_Delay(300);
 8001aec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001af0:	f000 feb6 	bl	8002860 <HAL_Delay>
}
 8001af4:	bf00      	nop
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	3c23d70a 	.word	0x3c23d70a
 8001b00:	20000080 	.word	0x20000080
 8001b04:	43b40000 	.word	0x43b40000
 8001b08:	20000058 	.word	0x20000058
 8001b0c:	40010c00 	.word	0x40010c00
 8001b10:	200002bc 	.word	0x200002bc
 8001b14:	40000400 	.word	0x40000400
 8001b18:	08007678 	.word	0x08007678
 8001b1c:	20000648 	.word	0x20000648
 8001b20:	200002b4 	.word	0x200002b4
 8001b24:	08007684 	.word	0x08007684
 8001b28:	40010800 	.word	0x40010800

08001b2c <MandrelSpeed>:
extern volatile int menuPosition;
extern int steps;
extern char buff[];
extern TIM_HandleTypeDef htim3;
extern volatile int giri;
void MandrelSpeed() {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
	uint32_t tick = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
	giri = 0;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <MandrelSpeed+0xc0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
	int giri_old = giri;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <MandrelSpeed+0xc0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]
	int oldMenuPosition = menuPosition;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MandrelSpeed+0xc4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60bb      	str	r3, [r7, #8]
	bool stay = true; //boolean to determine if stay or not in the reading cycle
 8001b48:	2301      	movs	r3, #1
 8001b4a:	74fb      	strb	r3, [r7, #19]

	lcd_clear();
 8001b4c:	f000 f8c2 	bl	8001cd4 <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001b50:	2100      	movs	r1, #0
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f928 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string("*VELOCITA' MANDRINO*");
 8001b58:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <MandrelSpeed+0xc8>)
 8001b5a:	f000 f90f 	bl	8001d7c <lcd_send_string>
	tick = HAL_GetTick();
 8001b5e:	f000 fe75 	bl	800284c <HAL_GetTick>
 8001b62:	60f8      	str	r0, [r7, #12]

	while (stay) {
 8001b64:	e039      	b.n	8001bda <MandrelSpeed+0xae>
		if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6a:	4823      	ldr	r0, [pc, #140]	; (8001bf8 <MandrelSpeed+0xcc>)
 8001b6c:	f001 f92e 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <MandrelSpeed+0x5c>
				== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001b76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b7a:	f000 fe71 	bl	8002860 <HAL_Delay>
			stay = false;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	74fb      	strb	r3, [r7, #19]
			menuPosition = oldMenuPosition;
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <MandrelSpeed+0xc4>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GetTick() - tick > 1000L) {
 8001b88:	f000 fe60 	bl	800284c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b96:	d920      	bls.n	8001bda <MandrelSpeed+0xae>
			if (giri != giri_old) {
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MandrelSpeed+0xc0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d01b      	beq.n	8001bda <MandrelSpeed+0xae>
				lcd_cursor_pos(1, 2);
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 f8ff 	bl	8001da8 <lcd_cursor_pos>
				int diff = giri-giri_old;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MandrelSpeed+0xc0>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	607b      	str	r3, [r7, #4]
				sprintf(buff, "RPM:%d", diff * 60 );
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <MandrelSpeed+0xd0>)
 8001bc2:	480f      	ldr	r0, [pc, #60]	; (8001c00 <MandrelSpeed+0xd4>)
 8001bc4:	f003 fad2 	bl	800516c <siprintf>
				lcd_send_string("                    ");
 8001bc8:	480e      	ldr	r0, [pc, #56]	; (8001c04 <MandrelSpeed+0xd8>)
 8001bca:	f000 f8d7 	bl	8001d7c <lcd_send_string>
				lcd_send_string(buff);
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MandrelSpeed+0xd4>)
 8001bd0:	f000 f8d4 	bl	8001d7c <lcd_send_string>
				giri_old = giri;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <MandrelSpeed+0xc0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	617b      	str	r3, [r7, #20]
	while (stay) {
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1c2      	bne.n	8001b66 <MandrelSpeed+0x3a>
		}


	}

}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200002b4 	.word	0x200002b4
 8001bf0:	200006c8 	.word	0x200006c8
 8001bf4:	0800768c 	.word	0x0800768c
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	080076a4 	.word	0x080076a4
 8001c00:	20000648 	.word	0x20000648
 8001c04:	080076ac 	.word	0x080076ac

08001c08 <LoadFromEEPROM>:


}

void LoadFromEEPROM() //Loads the parameters from the EEPROM and put them in the proper variables
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	CCW = bytes_to_store[51] == 1 ? true : false;
	NORTON_gearbox = (unsigned char)bytes_to_store[52];
	MaxStepperSpeed = value_otto_ulong(54, bytes_to_store);
	single_step_pitch = screw_pitch / (float)one_turn_screw_steps; //calculates the linear movement (in mm) of the carriage for a single step of the stepper motor
*/
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd(char cmd) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f023 030f 	bic.w	r3, r3, #15
 8001c24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	f043 030c 	orr.w	r3, r3, #12
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8001c40:	7bbb      	ldrb	r3, [r7, #14]
 8001c42:	f043 030c 	orr.w	r3, r3, #12
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001c54:	f107 0208 	add.w	r2, r7, #8
 8001c58:	2364      	movs	r3, #100	; 0x64
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	214e      	movs	r1, #78	; 0x4e
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <lcd_send_cmd+0x5c>)
 8001c62:	f001 fa49 	bl	80030f8 <HAL_I2C_Master_Transmit>
			100);
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200005f4 	.word	0x200005f4

08001c74 <lcd_send_data>:

void lcd_send_data(char data) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f023 030f 	bic.w	r3, r3, #15
 8001c84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	f043 030d 	orr.w	r3, r3, #13
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	f043 0309 	orr.w	r3, r3, #9
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	f043 030d 	orr.w	r3, r3, #13
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	f043 0309 	orr.w	r3, r3, #9
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001cb4:	f107 0208 	add.w	r2, r7, #8
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	214e      	movs	r1, #78	; 0x4e
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <lcd_send_data+0x5c>)
 8001cc2:	f001 fa19 	bl	80030f8 <HAL_I2C_Master_Transmit>
			100);
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200005f4 	.word	0x200005f4

08001cd4 <lcd_clear>:

void lcd_clear(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff ff9a 	bl	8001c14 <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	e005      	b.n	8001cf2 <lcd_clear+0x1e>
		lcd_send_data(' ');
 8001ce6:	2020      	movs	r0, #32
 8001ce8:	f7ff ffc4 	bl	8001c74 <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b63      	cmp	r3, #99	; 0x63
 8001cf6:	ddf6      	ble.n	8001ce6 <lcd_clear+0x12>
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <lcd_init>:

void lcd_init(void) {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d06:	2032      	movs	r0, #50	; 0x32
 8001d08:	f000 fdaa 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d0c:	2030      	movs	r0, #48	; 0x30
 8001d0e:	f7ff ff81 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d12:	2005      	movs	r0, #5
 8001d14:	f000 fda4 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d18:	2030      	movs	r0, #48	; 0x30
 8001d1a:	f7ff ff7b 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 fd9e 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001d24:	2030      	movs	r0, #48	; 0x30
 8001d26:	f7ff ff75 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(10);
 8001d2a:	200a      	movs	r0, #10
 8001d2c:	f000 fd98 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8001d30:	2020      	movs	r0, #32
 8001d32:	f7ff ff6f 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(10);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f000 fd92 	bl	8002860 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d3c:	2028      	movs	r0, #40	; 0x28
 8001d3e:	f7ff ff69 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 fd8c 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001d48:	2008      	movs	r0, #8
 8001d4a:	f7ff ff63 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fd86 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7ff ff5d 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fd80 	bl	8002860 <HAL_Delay>
	HAL_Delay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 fd7d 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001d66:	2006      	movs	r0, #6
 8001d68:	f7ff ff54 	bl	8001c14 <lcd_send_cmd>
	HAL_Delay(1);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f000 fd77 	bl	8002860 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001d72:	200c      	movs	r0, #12
 8001d74:	f7ff ff4e 	bl	8001c14 <lcd_send_cmd>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <lcd_send_string>:

void lcd_send_string(char *str) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	while (*str)
 8001d84:	e006      	b.n	8001d94 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff70 	bl	8001c74 <lcd_send_data>
	while (*str)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f4      	bne.n	8001d86 <lcd_send_string+0xa>
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <lcd_cursor_pos>:
// -------------------------------------------
// Set cursor position
// -------------------------------------------
void lcd_cursor_pos(char col, char row) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <lcd_cursor_pos+0x58>)
 8001dba:	f107 040c 	add.w	r4, r7, #12
 8001dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > LCD_ROWS) {
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d901      	bls.n	8001dce <lcd_cursor_pos+0x26>
			row = LCD_ROWS-1;    // we count rows starting w/0
 8001dca:	2303      	movs	r3, #3
 8001dcc:	71bb      	strb	r3, [r7, #6]
		}
	char cmd = 0x80|(col + (char)row_offsets[(int)row]);
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	f107 0220 	add.w	r2, r7, #32
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	77fb      	strb	r3, [r7, #31]
	lcd_send_cmd(cmd);
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff0f 	bl	8001c14 <lcd_send_cmd>
}
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	080076c4 	.word	0x080076c4

08001e04 <lcd_send_char>:

void lcd_send_char(char chr) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(chr);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff2f 	bl	8001c74 <lcd_send_data>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
     //int count = __HAL_TIM_GetCounter(&htim3);
    	 giri++;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e38:	6013      	str	r3, [r2, #0]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000660 	.word	0x20000660
 8001e48:	200002b4 	.word	0x200002b4

08001e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e52:	f000 fca3 	bl	800279c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e56:	f000 f837 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5a:	f000 f8fd 	bl	8002058 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e5e:	f000 f879 	bl	8001f54 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001e62:	f000 f8a5 	bl	8001fb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 8001e66:	213c      	movs	r1, #60	; 0x3c
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <main+0x78>)
 8001e6a:	f002 f945 	bl	80040f8 <HAL_TIM_Encoder_Start_IT>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <main+0x2c>
	  Error_Handler();
 8001e74:	f000 f984 	bl	8002180 <Error_Handler>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <main+0x78>)
 8001e7a:	f002 f849 	bl	8003f10 <HAL_TIM_Base_Start_IT>

//   WriteToEEPROM();
  LoadFromEEPROM();
 8001e7e:	f7ff fec3 	bl	8001c08 <LoadFromEEPROM>
	lcd_init();
 8001e82:	f7ff ff3e 	bl	8001d02 <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
		char scelta;
				  while (true)
				  {
				    scelta = Principale();
 8001e86:	f000 f981 	bl	800218c <Principale>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
				    switch (scelta) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d00b      	beq.n	8001eac <main+0x60>
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	dcf6      	bgt.n	8001e86 <main+0x3a>
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d002      	beq.n	8001ea2 <main+0x56>
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d00a      	beq.n	8001eb6 <main+0x6a>
 8001ea0:	e00e      	b.n	8001ec0 <main+0x74>
				    case 1: lcd_clear(); Impostazioni(); break;
 8001ea2:	f7ff ff17 	bl	8001cd4 <lcd_clear>
 8001ea6:	f7ff f8c3 	bl	8001030 <Impostazioni>
 8001eaa:	e009      	b.n	8001ec0 <main+0x74>
				    case 6: lcd_clear(); PosizioneAngolare(); break;
 8001eac:	f7ff ff12 	bl	8001cd4 <lcd_clear>
 8001eb0:	f7ff fd8a 	bl	80019c8 <PosizioneAngolare>
 8001eb4:	e004      	b.n	8001ec0 <main+0x74>
				    case 5: lcd_clear(); MandrelSpeed(); break;
 8001eb6:	f7ff ff0d 	bl	8001cd4 <lcd_clear>
 8001eba:	f7ff fe37 	bl	8001b2c <MandrelSpeed>
 8001ebe:	bf00      	nop
				    scelta = Principale();
 8001ec0:	e7e1      	b.n	8001e86 <main+0x3a>
 8001ec2:	bf00      	nop
 8001ec4:	20000660 	.word	0x20000660

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b090      	sub	sp, #64	; 0x40
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	2228      	movs	r2, #40	; 0x28
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fc2a 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efc:	2302      	movs	r3, #2
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fbf7 	bl	8003704 <HAL_RCC_OscConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f1c:	f000 f930 	bl	8002180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f20:	230f      	movs	r3, #15
 8001f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f24:	2302      	movs	r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 fe62 	bl	8003c04 <HAL_RCC_ClockConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f46:	f000 f91b 	bl	8002180 <Error_Handler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3740      	adds	r7, #64	; 0x40
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <MX_I2C1_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_I2C1_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f92:	f000 ff6d 	bl	8002e70 <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f9c:	f000 f8f0 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200005f4 	.word	0x200005f4
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fbb6 	bl	8004730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <MX_TIM3_Init+0xa4>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1599;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fe0:	f240 623f 	movw	r2, #1599	; 0x63f
 8001fe4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_TIM3_Init+0xa0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002006:	2302      	movs	r3, #2
 8002008:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200a:	2301      	movs	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM3_Init+0xa0>)
 800201e:	f001 ffc9 	bl	8003fb4 <HAL_TIM_Encoder_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002028:	f000 f8aa 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800202c:	2320      	movs	r3, #32
 800202e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM3_Init+0xa0>)
 800203a:	f002 fabd 	bl	80045b8 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002044:	f000 f89c 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3730      	adds	r7, #48	; 0x30
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000660 	.word	0x20000660
 8002054:	40000400 	.word	0x40000400

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <MX_GPIO_Init+0x114>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a3e      	ldr	r2, [pc, #248]	; (800216c <MX_GPIO_Init+0x114>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <MX_GPIO_Init+0x114>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <MX_GPIO_Init+0x114>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <MX_GPIO_Init+0x114>)
 800208a:	f043 0320 	orr.w	r3, r3, #32
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <MX_GPIO_Init+0x114>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <MX_GPIO_Init+0x114>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a32      	ldr	r2, [pc, #200]	; (800216c <MX_GPIO_Init+0x114>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <MX_GPIO_Init+0x114>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <MX_GPIO_Init+0x114>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <MX_GPIO_Init+0x114>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <MX_GPIO_Init+0x114>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d2:	4827      	ldr	r0, [pc, #156]	; (8002170 <MX_GPIO_Init+0x118>)
 80020d4:	f000 fe91 	bl	8002dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	4619      	mov	r1, r3
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <MX_GPIO_Init+0x118>)
 80020f2:	f000 fce7 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_RESET_Pin MENU_BUTTON_Pin */
  GPIO_InitStruct.Pin = MENU_RESET_Pin|MENU_BUTTON_Pin;
 80020f6:	f248 0320 	movw	r3, #32800	; 0x8020
 80020fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002100:	2301      	movs	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	481a      	ldr	r0, [pc, #104]	; (8002174 <MX_GPIO_Init+0x11c>)
 800210c:	f000 fcda 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_ESC_Pin */
  GPIO_InitStruct.Pin = MENU_ESC_Pin;
 8002110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_ESC_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	4814      	ldr	r0, [pc, #80]	; (8002178 <MX_GPIO_Init+0x120>)
 8002126:	f000 fccd 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_ENCODER_A_Pin MENU_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = MENU_ENCODER_A_Pin|MENU_ENCODER_B_Pin;
 800212a:	2318      	movs	r3, #24
 800212c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_GPIO_Init+0x124>)
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4619      	mov	r1, r3
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_GPIO_Init+0x11c>)
 800213e:	f000 fcc1 	bl	8002ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2009      	movs	r0, #9
 8002148:	f000 fc85 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800214c:	2009      	movs	r0, #9
 800214e:	f000 fc9e 	bl	8002a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	200a      	movs	r0, #10
 8002158:	f000 fc7d 	bl	8002a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800215c:	200a      	movs	r0, #10
 800215e:	f000 fc96 	bl	8002a8e <HAL_NVIC_EnableIRQ>

}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40011000 	.word	0x40011000
 8002174:	40010c00 	.word	0x40010c00
 8002178:	40010800 	.word	0x40010800
 800217c:	10310000 	.word	0x10310000

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002188:	e7fe      	b.n	8002188 <Error_Handler+0x8>
	...

0800218c <Principale>:
		"Filettatura", "Movimento Libero",  "Velocita' mandrino","Posizione angolare" };

extern int timeToggle;
extern int menuPosition;

char Principale() {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	71fb      	strb	r3, [r7, #7]
	unsigned char previous = 6;
 8002196:	2306      	movs	r3, #6
 8002198:	71bb      	strb	r3, [r7, #6]
	unsigned char next = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	717b      	strb	r3, [r7, #5]
	bool stay = true;
 800219e:	2301      	movs	r3, #1
 80021a0:	713b      	strb	r3, [r7, #4]
	bool innerstay = true;
 80021a2:	2301      	movs	r3, #1
 80021a4:	70fb      	strb	r3, [r7, #3]

	lcd_clear();
 80021a6:	f7ff fd95 	bl	8001cd4 <lcd_clear>
	lcd_cursor_pos(0, 2);
 80021aa:	2102      	movs	r1, #2
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fdfb 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(">");
 80021b2:	4851      	ldr	r0, [pc, #324]	; (80022f8 <Principale+0x16c>)
 80021b4:	f7ff fde2 	bl	8001d7c <lcd_send_string>
	lcd_cursor_pos(19, 2);
 80021b8:	2102      	movs	r1, #2
 80021ba:	2013      	movs	r0, #19
 80021bc:	f7ff fdf4 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_char('<');
 80021c0:	203c      	movs	r0, #60	; 0x3c
 80021c2:	f7ff fe1f 	bl	8001e04 <lcd_send_char>
	lcd_cursor_pos(0, 0);
 80021c6:	2100      	movs	r1, #0
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff fded 	bl	8001da8 <lcd_cursor_pos>
	lcd_send_string(MenuPrincipale[0]);
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <Principale+0x170>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fdd2 	bl	8001d7c <lcd_send_string>
	menuPosition = 1;
 80021d8:	4b49      	ldr	r3, [pc, #292]	; (8002300 <Principale+0x174>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

	while (stay) {
 80021de:	e082      	b.n	80022e6 <Principale+0x15a>
		// LED ON
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//HAL_Delay(timeToggle);

		switch (current) {
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <Principale+0x60>
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	d003      	beq.n	80021f2 <Principale+0x66>
 80021ea:	e005      	b.n	80021f8 <Principale+0x6c>
		case 0:
			current = 6;
 80021ec:	2306      	movs	r3, #6
 80021ee:	71fb      	strb	r3, [r7, #7]
			break;
 80021f0:	e002      	b.n	80021f8 <Principale+0x6c>
		case 7:
			current = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	71fb      	strb	r3, [r7, #7]
			break;
 80021f6:	bf00      	nop
		}
		previous = current - 1;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	71bb      	strb	r3, [r7, #6]
		next = current + 1;
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	3301      	adds	r3, #1
 8002202:	717b      	strb	r3, [r7, #5]
		if (previous == 0)
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <Principale+0x82>
			previous = 6;
 800220a:	2306      	movs	r3, #6
 800220c:	71bb      	strb	r3, [r7, #6]
		if (next == 7)
 800220e:	797b      	ldrb	r3, [r7, #5]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d101      	bne.n	8002218 <Principale+0x8c>
			next = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	717b      	strb	r3, [r7, #5]

		lcd_cursor_pos(1, 1);
 8002218:	2101      	movs	r1, #1
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff fdc4 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002220:	4838      	ldr	r0, [pc, #224]	; (8002304 <Principale+0x178>)
 8002222:	f7ff fdab 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 1);
 8002226:	2101      	movs	r1, #1
 8002228:	2001      	movs	r0, #1
 800222a:	f7ff fdbd 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[previous]);
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <Principale+0x170>)
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fda0 	bl	8001d7c <lcd_send_string>

		lcd_cursor_pos(1, 2);
 800223c:	2102      	movs	r1, #2
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff fdb2 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002244:	482f      	ldr	r0, [pc, #188]	; (8002304 <Principale+0x178>)
 8002246:	f7ff fd99 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 2);
 800224a:	2102      	movs	r1, #2
 800224c:	2001      	movs	r0, #1
 800224e:	f7ff fdab 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[current]);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4a29      	ldr	r2, [pc, #164]	; (80022fc <Principale+0x170>)
 8002256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fd8e 	bl	8001d7c <lcd_send_string>

		lcd_cursor_pos(1, 3);
 8002260:	2103      	movs	r1, #3
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff fda0 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002268:	4826      	ldr	r0, [pc, #152]	; (8002304 <Principale+0x178>)
 800226a:	f7ff fd87 	bl	8001d7c <lcd_send_string>
		lcd_cursor_pos(1, 3);
 800226e:	2103      	movs	r1, #3
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fd99 	bl	8001da8 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[next]);
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	4a20      	ldr	r2, [pc, #128]	; (80022fc <Principale+0x170>)
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fd7c 	bl	8001d7c <lcd_send_string>

		innerstay = true;
 8002284:	2301      	movs	r3, #1
 8002286:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 8002288:	e026      	b.n	80022d8 <Principale+0x14c>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 800228a:	2120      	movs	r1, #32
 800228c:	481e      	ldr	r0, [pc, #120]	; (8002308 <Principale+0x17c>)
 800228e:	f000 fd9d 	bl	8002dcc <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <Principale+0x11c>
					== GPIO_PIN_RESET) {
				stay = false;
 8002298:	2300      	movs	r3, #0
 800229a:	713b      	strb	r3, [r7, #4]
				innerstay = false;
 800229c:	2300      	movs	r3, #0
 800229e:	70fb      	strb	r3, [r7, #3]
				HAL_Delay(300);
 80022a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022a4:	f000 fadc 	bl	8002860 <HAL_Delay>
			}
			if (current != menuPosition) {
 80022a8:	79fa      	ldrb	r2, [r7, #7]
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <Principale+0x174>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d012      	beq.n	80022d8 <Principale+0x14c>
				if (menuPosition >6) menuPosition = 1;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <Principale+0x174>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	dd02      	ble.n	80022c0 <Principale+0x134>
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <Principale+0x174>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1) menuPosition = 6;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <Principale+0x174>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	dc02      	bgt.n	80022ce <Principale+0x142>
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <Principale+0x174>)
 80022ca:	2206      	movs	r2, #6
 80022cc:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <Principale+0x174>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
				innerstay = false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1d5      	bne.n	800228a <Principale+0xfe>
			}
		}
		HAL_Delay(300);
 80022de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022e2:	f000 fabd 	bl	8002860 <HAL_Delay>
	while (stay) {
 80022e6:	793b      	ldrb	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f af79 	bne.w	80021e0 <Principale+0x54>
	}

	return current;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	08007750 	.word	0x08007750
 80022fc:	200000a0 	.word	0x200000a0
 8002300:	200006c8 	.word	0x200006c8
 8002304:	08007754 	.word	0x08007754
 8002308:	40010c00 	.word	0x40010c00

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_MspInit+0x5c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_MspInit+0x5c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_MspInit+0x5c>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_MspInit+0x5c>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_MspInit+0x5c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_MspInit+0x5c>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_MspInit+0x60>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_MspInit+0x60>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000

08002370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <HAL_I2C_MspInit+0x70>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d123      	bne.n	80023d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ac:	2312      	movs	r3, #18
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	4619      	mov	r1, r3
 80023ba:	480b      	ldr	r0, [pc, #44]	; (80023e8 <HAL_I2C_MspInit+0x78>)
 80023bc:	f000 fb82 	bl	8002ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 80023c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ca:	61d3      	str	r3, [r2, #28]
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_I2C_MspInit+0x74>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40005400 	.word	0x40005400
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010c00 	.word	0x40010c00

080023ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_TIM_Encoder_MspInit+0x80>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12b      	bne.n	8002464 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	61d3      	str	r3, [r2, #28]
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_TIM_Encoder_MspInit+0x84>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CHANNEL_A_Pin|CHANNEL_B_Pin;
 800243c:	23c0      	movs	r3, #192	; 0xc0
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002444:	2301      	movs	r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <HAL_TIM_Encoder_MspInit+0x88>)
 8002450:	f000 fb38 	bl	8002ac4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201d      	movs	r0, #29
 800245a:	f000 fafc 	bl	8002a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800245e:	201d      	movs	r0, #29
 8002460:	f000 fb15 	bl	8002a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40000400 	.word	0x40000400
 8002470:	40021000 	.word	0x40021000
 8002474:	40010800 	.word	0x40010800

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024be:	f000 f9b3 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 80024ce:	2108      	movs	r1, #8
 80024d0:	4817      	ldr	r0, [pc, #92]	; (8002530 <EXTI3_IRQHandler+0x68>)
 80024d2:	f000 fc7b 	bl	8002dcc <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 80024da:	2110      	movs	r1, #16
 80024dc:	4814      	ldr	r0, [pc, #80]	; (8002530 <EXTI3_IRQHandler+0x68>)
 80024de:	f000 fc75 	bl	8002dcc <HAL_GPIO_ReadPin>
 80024e2:	4603      	mov	r3, r0
 80024e4:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <EXTI3_IRQHandler+0x6c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d104      	bne.n	800250c <EXTI3_IRQHandler+0x44>
		menuPosition++;
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <EXTI3_IRQHandler+0x70>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <EXTI3_IRQHandler+0x70>)
 800250a:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d104      	bne.n	800251c <EXTI3_IRQHandler+0x54>
		menuPosition--;
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <EXTI3_IRQHandler+0x70>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3b01      	subs	r3, #1
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <EXTI3_IRQHandler+0x70>)
 800251a:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 800251c:	4a05      	ldr	r2, [pc, #20]	; (8002534 <EXTI3_IRQHandler+0x6c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_A_Pin);
 8002522:	2008      	movs	r0, #8
 8002524:	f000 fc82 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010c00 	.word	0x40010c00
 8002534:	200006ac 	.word	0x200006ac
 8002538:	200006c8 	.word	0x200006c8

0800253c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 8002542:	2108      	movs	r1, #8
 8002544:	4817      	ldr	r0, [pc, #92]	; (80025a4 <EXTI4_IRQHandler+0x68>)
 8002546:	f000 fc41 	bl	8002dcc <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 800254e:	2110      	movs	r1, #16
 8002550:	4814      	ldr	r0, [pc, #80]	; (80025a4 <EXTI4_IRQHandler+0x68>)
 8002552:	f000 fc3b 	bl	8002dcc <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <EXTI4_IRQHandler+0x6c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b08      	cmp	r3, #8
 8002574:	d104      	bne.n	8002580 <EXTI4_IRQHandler+0x44>
		menuPosition++;
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <EXTI4_IRQHandler+0x70>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <EXTI4_IRQHandler+0x70>)
 800257e:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d104      	bne.n	8002590 <EXTI4_IRQHandler+0x54>
		menuPosition--;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <EXTI4_IRQHandler+0x70>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <EXTI4_IRQHandler+0x70>)
 800258e:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <EXTI4_IRQHandler+0x6c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_B_Pin);
 8002596:	2010      	movs	r0, #16
 8002598:	f000 fc48 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	200006ac 	.word	0x200006ac
 80025ac:	200006c8 	.word	0x200006c8

080025b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM3_IRQHandler+0x10>)
 80025b6:	f001 fe4d 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000660 	.word	0x20000660

080025c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
	return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <_kill>:

int _kill(int pid, int sig)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025dc:	f002 f85c 	bl	8004698 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2216      	movs	r2, #22
 80025e4:	601a      	str	r2, [r3, #0]
	return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_exit>:

void _exit (int status)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025fa:	f04f 31ff 	mov.w	r1, #4294967295
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffe7 	bl	80025d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002604:	e7fe      	b.n	8002604 <_exit+0x12>

08002606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e00a      	b.n	800262e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002618:	f3af 8000 	nop.w
 800261c:	4601      	mov	r1, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	b2ca      	uxtb	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	dbf0      	blt.n	8002618 <_read+0x12>
	}

return len;
 8002636:	687b      	ldr	r3, [r7, #4]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e009      	b.n	8002666 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	60ba      	str	r2, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbf1      	blt.n	8002652 <_write+0x12>
	}
	return len;
 800266e:	687b      	ldr	r3, [r7, #4]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_close>:

int _close(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269e:	605a      	str	r2, [r3, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <_isatty>:

int _isatty(int file)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <_sbrk+0x5c>)
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <_sbrk+0x60>)
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d102      	bne.n	80026fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <_sbrk+0x64>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <_sbrk+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <_sbrk+0x64>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	429a      	cmp	r2, r3
 8002706:	d207      	bcs.n	8002718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002708:	f001 ffc6 	bl	8004698 <__errno>
 800270c:	4603      	mov	r3, r0
 800270e:	220c      	movs	r2, #12
 8002710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	e009      	b.n	800272c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <_sbrk+0x64>)
 8002728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272a:	68fb      	ldr	r3, [r7, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20005000 	.word	0x20005000
 8002738:	00000400 	.word	0x00000400
 800273c:	200002c0 	.word	0x200002c0
 8002740:	200006e8 	.word	0x200006e8

08002744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002750:	480c      	ldr	r0, [pc, #48]	; (8002784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002752:	490d      	ldr	r1, [pc, #52]	; (8002788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002768:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002776:	f7ff ffe5 	bl	8002744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277a:	f001 ff93 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800277e:	f7ff fb65 	bl	8001e4c <main>
  bx lr
 8002782:	4770      	bx	lr
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 800278c:	08007b7c 	.word	0x08007b7c
  ldr r2, =_sbss
 8002790:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8002794:	200006e4 	.word	0x200006e4

08002798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC1_2_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x28>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x28>)
 80027a6:	f043 0310 	orr.w	r3, r3, #16
 80027aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f947 	bl	8002a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	200f      	movs	r0, #15
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fda8 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f95f 	bl	8002aaa <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 f927 	bl	8002a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200000bc 	.word	0x200000bc
 8002820:	200000c4 	.word	0x200000c4
 8002824:	200000c0 	.word	0x200000c0

08002828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_IncTick+0x1c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_IncTick+0x20>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_IncTick+0x20>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	200000c4 	.word	0x200000c4
 8002848:	200006d0 	.word	0x200006d0

0800284c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_GetTick+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	200006d0 	.word	0x200006d0

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff fff0 	bl	800284c <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffe0 	bl	800284c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200000c4 	.word	0x200000c4

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4906      	ldr	r1, [pc, #24]	; (8002940 <__NVIC_EnableIRQ+0x34>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0c:	d301      	bcc.n	8002a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00f      	b.n	8002a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <SysTick_Config+0x40>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f7ff ff90 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <SysTick_Config+0x40>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <SysTick_Config+0x40>)
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff2d 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a68:	f7ff ff42 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f7ff ff90 	bl	8002998 <NVIC_EncodePriority>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff5f 	bl	8002944 <__NVIC_SetPriority>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff35 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffa2 	bl	80029fc <SysTick_Config>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e169      	b.n	8002dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 8158 	bne.w	8002da6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a9a      	ldr	r2, [pc, #616]	; (8002d64 <HAL_GPIO_Init+0x2a0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d05e      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b00:	4a98      	ldr	r2, [pc, #608]	; (8002d64 <HAL_GPIO_Init+0x2a0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d875      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b06:	4a98      	ldr	r2, [pc, #608]	; (8002d68 <HAL_GPIO_Init+0x2a4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d058      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b0c:	4a96      	ldr	r2, [pc, #600]	; (8002d68 <HAL_GPIO_Init+0x2a4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d86f      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b12:	4a96      	ldr	r2, [pc, #600]	; (8002d6c <HAL_GPIO_Init+0x2a8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d052      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b18:	4a94      	ldr	r2, [pc, #592]	; (8002d6c <HAL_GPIO_Init+0x2a8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d869      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b1e:	4a94      	ldr	r2, [pc, #592]	; (8002d70 <HAL_GPIO_Init+0x2ac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04c      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b24:	4a92      	ldr	r2, [pc, #584]	; (8002d70 <HAL_GPIO_Init+0x2ac>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d863      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b2a:	4a92      	ldr	r2, [pc, #584]	; (8002d74 <HAL_GPIO_Init+0x2b0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d046      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
 8002b30:	4a90      	ldr	r2, [pc, #576]	; (8002d74 <HAL_GPIO_Init+0x2b0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d85d      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d82a      	bhi.n	8002b90 <HAL_GPIO_Init+0xcc>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d859      	bhi.n	8002bf2 <HAL_GPIO_Init+0x12e>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_GPIO_Init+0x80>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002bbf 	.word	0x08002bbf
 8002b48:	08002b99 	.word	0x08002b99
 8002b4c:	08002bab 	.word	0x08002bab
 8002b50:	08002bed 	.word	0x08002bed
 8002b54:	08002bf3 	.word	0x08002bf3
 8002b58:	08002bf3 	.word	0x08002bf3
 8002b5c:	08002bf3 	.word	0x08002bf3
 8002b60:	08002bf3 	.word	0x08002bf3
 8002b64:	08002bf3 	.word	0x08002bf3
 8002b68:	08002bf3 	.word	0x08002bf3
 8002b6c:	08002bf3 	.word	0x08002bf3
 8002b70:	08002bf3 	.word	0x08002bf3
 8002b74:	08002bf3 	.word	0x08002bf3
 8002b78:	08002bf3 	.word	0x08002bf3
 8002b7c:	08002bf3 	.word	0x08002bf3
 8002b80:	08002bf3 	.word	0x08002bf3
 8002b84:	08002bf3 	.word	0x08002bf3
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	4a79      	ldr	r2, [pc, #484]	; (8002d78 <HAL_GPIO_Init+0x2b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b96:	e02c      	b.n	8002bf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e029      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e024      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e01f      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e01a      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e013      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	611a      	str	r2, [r3, #16]
          break;
 8002bde:	e009      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be0:	2308      	movs	r3, #8
 8002be2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	615a      	str	r2, [r3, #20]
          break;
 8002bea:	e003      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x130>
          break;
 8002bf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2bff      	cmp	r3, #255	; 0xff
 8002bf8:	d801      	bhi.n	8002bfe <HAL_GPIO_Init+0x13a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	e001      	b.n	8002c02 <HAL_GPIO_Init+0x13e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2bff      	cmp	r3, #255	; 0xff
 8002c08:	d802      	bhi.n	8002c10 <HAL_GPIO_Init+0x14c>
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x152>
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	3b08      	subs	r3, #8
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	6a39      	ldr	r1, [r7, #32]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80b1 	beq.w	8002da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c44:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c5c:	4a48      	ldr	r2, [pc, #288]	; (8002d80 <HAL_GPIO_Init+0x2bc>)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <HAL_GPIO_Init+0x2c0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_GPIO_Init+0x1ec>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <HAL_GPIO_Init+0x2c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00d      	beq.n	8002cac <HAL_GPIO_Init+0x1e8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <HAL_GPIO_Init+0x2c8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_Init+0x1e4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <HAL_GPIO_Init+0x2cc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_GPIO_Init+0x1e0>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e006      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e004      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e002      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_GPIO_Init+0x1ee>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cc2:	492f      	ldr	r1, [pc, #188]	; (8002d80 <HAL_GPIO_Init+0x2bc>)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	492c      	ldr	r1, [pc, #176]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4928      	ldr	r1, [pc, #160]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4922      	ldr	r1, [pc, #136]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	491e      	ldr	r1, [pc, #120]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4918      	ldr	r1, [pc, #96]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4914      	ldr	r1, [pc, #80]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d021      	beq.n	8002d98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	490e      	ldr	r1, [pc, #56]	; (8002d94 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
 8002d60:	e021      	b.n	8002da6 <HAL_GPIO_Init+0x2e2>
 8002d62:	bf00      	nop
 8002d64:	10320000 	.word	0x10320000
 8002d68:	10310000 	.word	0x10310000
 8002d6c:	10220000 	.word	0x10220000
 8002d70:	10210000 	.word	0x10210000
 8002d74:	10120000 	.word	0x10120000
 8002d78:	10110000 	.word	0x10110000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010800 	.word	0x40010800
 8002d88:	40010c00 	.word	0x40010c00
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	4909      	ldr	r1, [pc, #36]	; (8002dc8 <HAL_GPIO_Init+0x304>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f ae8e 	bne.w	8002ad8 <HAL_GPIO_Init+0x14>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	372c      	adds	r7, #44	; 0x2c
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e001      	b.n	8002dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	807b      	strh	r3, [r7, #2]
 8002e06:	4613      	mov	r3, r2
 8002e08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0a:	787b      	ldrb	r3, [r7, #1]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e10:	887a      	ldrh	r2, [r7, #2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e16:	e003      	b.n	8002e20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	041a      	lsls	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	611a      	str	r2, [r3, #16]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f806 	bl	8002e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e12b      	b.n	80030da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fa6a 	bl	8002370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f000 ffea 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8002ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a81      	ldr	r2, [pc, #516]	; (80030e4 <HAL_I2C_Init+0x274>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d807      	bhi.n	8002ef4 <HAL_I2C_Init+0x84>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a80      	ldr	r2, [pc, #512]	; (80030e8 <HAL_I2C_Init+0x278>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e006      	b.n	8002f02 <HAL_I2C_Init+0x92>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4a7d      	ldr	r2, [pc, #500]	; (80030ec <HAL_I2C_Init+0x27c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bf94      	ite	ls
 8002efc:	2301      	movls	r3, #1
 8002efe:	2300      	movhi	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0e7      	b.n	80030da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a78      	ldr	r2, [pc, #480]	; (80030f0 <HAL_I2C_Init+0x280>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9b      	lsrs	r3, r3, #18
 8002f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_I2C_Init+0x274>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d802      	bhi.n	8002f44 <HAL_I2C_Init+0xd4>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	e009      	b.n	8002f58 <HAL_I2C_Init+0xe8>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	4a69      	ldr	r2, [pc, #420]	; (80030f4 <HAL_I2C_Init+0x284>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	3301      	adds	r3, #1
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	495c      	ldr	r1, [pc, #368]	; (80030e4 <HAL_I2C_Init+0x274>)
 8002f74:	428b      	cmp	r3, r1
 8002f76:	d819      	bhi.n	8002fac <HAL_I2C_Init+0x13c>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e59      	subs	r1, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_I2C_Init+0x138>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1e59      	subs	r1, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	e051      	b.n	800304c <HAL_I2C_Init+0x1dc>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	e04f      	b.n	800304c <HAL_I2C_Init+0x1dc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_I2C_Init+0x168>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1e58      	subs	r0, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	440b      	add	r3, r1
 8002fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e012      	b.n	8002ffe <HAL_I2C_Init+0x18e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	0099      	lsls	r1, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x196>
 8003002:	2301      	movs	r3, #1
 8003004:	e022      	b.n	800304c <HAL_I2C_Init+0x1dc>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10e      	bne.n	800302c <HAL_I2C_Init+0x1bc>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e58      	subs	r0, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	440b      	add	r3, r1
 800301c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003020:	3301      	adds	r3, #1
 8003022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302a:	e00f      	b.n	800304c <HAL_I2C_Init+0x1dc>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e58      	subs	r0, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	0099      	lsls	r1, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	6809      	ldr	r1, [r1, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800307a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6911      	ldr	r1, [r2, #16]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68d2      	ldr	r2, [r2, #12]
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	430b      	orrs	r3, r1
 800308e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	000186a0 	.word	0x000186a0
 80030e8:	001e847f 	.word	0x001e847f
 80030ec:	003d08ff 	.word	0x003d08ff
 80030f0:	431bde83 	.word	0x431bde83
 80030f4:	10624dd3 	.word	0x10624dd3

080030f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
 8003108:	4613      	mov	r3, r2
 800310a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff fb9e 	bl	800284c <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 80e0 	bne.w	80032e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	4970      	ldr	r1, [pc, #448]	; (80032ec <HAL_I2C_Master_Transmit+0x1f4>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f964 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	e0d3      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x50>
 8003144:	2302      	movs	r3, #2
 8003146:	e0cc      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d007      	beq.n	800316e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2221      	movs	r2, #33	; 0x21
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2210      	movs	r2, #16
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	893a      	ldrh	r2, [r7, #8]
 800319e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a50      	ldr	r2, [pc, #320]	; (80032f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f89c 	bl	80032f4 <I2C_MasterRequestWrite>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e08d      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031dc:	e066      	b.n	80032ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	6a39      	ldr	r1, [r7, #32]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9de 	bl	80035a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d107      	bne.n	8003206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06b      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d11b      	bne.n	8003280 <HAL_I2C_Master_Transmit+0x188>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d017      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	6a39      	ldr	r1, [r7, #32]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f9ce 	bl	8003626 <I2C_WaitOnBTFFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00d      	beq.n	80032ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2b04      	cmp	r3, #4
 8003296:	d107      	bne.n	80032a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e01a      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d194      	bne.n	80031de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	00100002 	.word	0x00100002
 80032f0:	ffff0000 	.word	0xffff0000

080032f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d006      	beq.n	800331e <I2C_MasterRequestWrite+0x2a>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <I2C_MasterRequestWrite+0x2a>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e00b      	b.n	8003348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	2b12      	cmp	r3, #18
 8003336:	d107      	bne.n	8003348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f84f 	bl	80033f8 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d103      	bne.n	8003378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e035      	b.n	80033e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	e01b      	b.n	80033d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003398:	897b      	ldrh	r3, [r7, #10]
 800339a:	11db      	asrs	r3, r3, #7
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0306 	and.w	r3, r3, #6
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f063 030f 	orn	r3, r3, #15
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <I2C_MasterRequestWrite+0xfc>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f875 	bl	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e010      	b.n	80033e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <I2C_MasterRequestWrite+0x100>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f865 	bl	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	00010008 	.word	0x00010008
 80033f4:	00010002 	.word	0x00010002

080033f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003408:	e025      	b.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d021      	beq.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7ff fa1b 	bl	800284c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d116      	bne.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e023      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10d      	bne.n	800347c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	e00c      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d0b6      	beq.n	800340a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b4:	e051      	b.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d123      	bne.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e046      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d021      	beq.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7ff f999 	bl	800284c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e020      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d10c      	bne.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e00b      	b.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d18d      	bne.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b0:	e02d      	b.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f878 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e02d      	b.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d021      	beq.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7ff f93f 	bl	800284c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d1ca      	bne.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003632:	e02d      	b.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f837 	bl	80036a8 <I2C_IsAcknowledgeFailed>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e02d      	b.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d021      	beq.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7ff f8fe 	bl	800284c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d1ca      	bne.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036be:	d11b      	bne.n	80036f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e26c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8087 	beq.w	8003832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003724:	4b92      	ldr	r3, [pc, #584]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b04      	cmp	r3, #4
 800372e:	d00c      	beq.n	800374a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003730:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d112      	bne.n	8003762 <HAL_RCC_OscConfig+0x5e>
 800373c:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d10b      	bne.n	8003762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374a:	4b89      	ldr	r3, [pc, #548]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d06c      	beq.n	8003830 <HAL_RCC_OscConfig+0x12c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d168      	bne.n	8003830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e246      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x76>
 800376c:	4b80      	ldr	r3, [pc, #512]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7f      	ldr	r2, [pc, #508]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e02e      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b78      	ldr	r3, [pc, #480]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a77      	ldr	r2, [pc, #476]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0xbc>
 80037a6:	4b72      	ldr	r3, [pc, #456]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a71      	ldr	r2, [pc, #452]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6e      	ldr	r2, [pc, #440]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 80037c0:	4b6b      	ldr	r3, [pc, #428]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b68      	ldr	r3, [pc, #416]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7ff f834 	bl	800284c <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7ff f830 	bl	800284c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1fa      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xe4>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7ff f820 	bl	800284c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7ff f81c 	bl	800284c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1e6      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x10c>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x18c>
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x176>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1ba      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4939      	ldr	r1, [pc, #228]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCC_OscConfig+0x270>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe ffd5 	bl	800284c <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fe ffd1 	bl	800284c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e19b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4927      	ldr	r1, [pc, #156]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_RCC_OscConfig+0x270>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe ffb4 	bl	800284c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe ffb0 	bl	800284c <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e17a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03a      	beq.n	8003988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d019      	beq.n	800394e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b17      	ldr	r3, [pc, #92]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003920:	f7fe ff94 	bl	800284c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe ff90 	bl	800284c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e15a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <HAL_RCC_OscConfig+0x26c>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003946:	2001      	movs	r0, #1
 8003948:	f000 fac4 	bl	8003ed4 <RCC_Delay>
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003954:	f7fe ff7a 	bl	800284c <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395a:	e00f      	b.n	800397c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe ff76 	bl	800284c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d908      	bls.n	800397c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e140      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	42420000 	.word	0x42420000
 8003978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	4b9e      	ldr	r3, [pc, #632]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e9      	bne.n	800395c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a6 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399a:	4b97      	ldr	r3, [pc, #604]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b94      	ldr	r3, [pc, #592]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a93      	ldr	r2, [pc, #588]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b91      	ldr	r3, [pc, #580]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b8e      	ldr	r3, [pc, #568]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b8b      	ldr	r3, [pc, #556]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a8a      	ldr	r2, [pc, #552]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fe ff37 	bl	800284c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe ff33 	bl	800284c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0fd      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_OscConfig+0x4f8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x312>
 8003a08:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a7a      	ldr	r2, [pc, #488]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	e02d      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a75      	ldr	r2, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a72      	ldr	r2, [pc, #456]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	e01c      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x356>
 8003a40:	4b6d      	ldr	r3, [pc, #436]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a6c      	ldr	r2, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a69      	ldr	r2, [pc, #420]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	e00b      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a66      	ldr	r2, [pc, #408]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6213      	str	r3, [r2, #32]
 8003a66:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fee7 	bl	800284c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe fee3 	bl	800284c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0ab      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ee      	beq.n	8003a82 <HAL_RCC_OscConfig+0x37e>
 8003aa4:	e014      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fed1 	bl	800284c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fecd 	bl	800284c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e095      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4a47      	ldr	r2, [pc, #284]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8081 	beq.w	8003bee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d061      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d146      	bne.n	8003b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_OscConfig+0x4fc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fe fea1 	bl	800284c <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe fe9d 	bl	800284c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e067      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b20:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b34:	d108      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	492d      	ldr	r1, [pc, #180]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a19      	ldr	r1, [r3, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	4927      	ldr	r1, [pc, #156]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x4fc>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fe fe71 	bl	800284c <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe fe6d 	bl	800284c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e037      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x46a>
 8003b8c:	e02f      	b.n	8003bee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_RCC_OscConfig+0x4fc>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fe5a 	bl	800284c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe fe56 	bl	800284c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e020      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x498>
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e013      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42420060 	.word	0x42420060

08003c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0d0      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4965      	ldr	r1, [pc, #404]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0b8      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	494d      	ldr	r1, [pc, #308]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d040      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e073      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06b      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4936      	ldr	r1, [pc, #216]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe fdaa 	bl	800284c <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fe fda6 	bl	800284c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e053      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 020c 	and.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1eb      	bne.n	8003cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d210      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4922      	ldr	r1, [pc, #136]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e032      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d92:	f000 f821 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490a      	ldr	r1, [pc, #40]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fd08 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08007778 	.word	0x08007778
 8003dd0:	200000bc 	.word	0x200000bc
 8003dd4:	200000c0 	.word	0x200000c0

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b490      	push	{r4, r7}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003de0:	1d3c      	adds	r4, r7, #4
 8003de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003de8:	f240 2301 	movw	r3, #513	; 0x201
 8003dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x40>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x46>
 8003e16:	e02d      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	e02d      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	0c9b      	lsrs	r3, r3, #18
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0c5b      	lsrs	r3, r3, #17
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e56:	fb02 f203 	mul.w	r2, r2, r3
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e004      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	623b      	str	r3, [r7, #32]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e76:	623b      	str	r3, [r7, #32]
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3728      	adds	r7, #40	; 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc90      	pop	{r4, r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	08007768 	.word	0x08007768
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	007a1200 	.word	0x007a1200
 8003e94:	003d0900 	.word	0x003d0900

08003e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e9c:	4b02      	ldr	r3, [pc, #8]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	200000bc 	.word	0x200000bc

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f7ff fff2 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08007788 	.word	0x08007788

08003ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <RCC_Delay+0x34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <RCC_Delay+0x38>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ef0:	bf00      	nop
  }
  while (Delay --);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f9      	bne.n	8003ef0 <RCC_Delay+0x1c>
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	200000bc 	.word	0x200000bc
 8003f0c:	10624dd3 	.word	0x10624dd3

08003f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d001      	beq.n	8003f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e03a      	b.n	8003f9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_TIM_Base_Start_IT+0x98>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d009      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <HAL_TIM_Base_Start_IT+0x9c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x58>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d111      	bne.n	8003f8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d010      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	e007      	b.n	8003f9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800

08003fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e093      	b.n	80040f0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fe fa05 	bl	80023ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fa4f 	bl	80044ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	4313      	orrs	r3, r2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004054:	f023 030c 	bic.w	r3, r3, #12
 8004058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	031b      	lsls	r3, r3, #12
 8004084:	4313      	orrs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	4313      	orrs	r3, r2
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004108:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004110:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004118:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004120:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d001      	beq.n	8004138 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e089      	b.n	800424c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	e031      	b.n	80041ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d110      	bne.n	8004172 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004156:	7b3b      	ldrb	r3, [r7, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e075      	b.n	800424c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004170:	e01d      	b.n	80041ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d102      	bne.n	800418a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004184:	7b3b      	ldrb	r3, [r7, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e05e      	b.n	800424c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_TIM_Encoder_Start_IT+0xc4>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d010      	beq.n	80041dc <HAL_TIM_Encoder_Start_IT+0xe4>
 80041ba:	e01f      	b.n	80041fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f9d3 	bl	8004570 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0202 	orr.w	r2, r2, #2
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e02e      	b.n	800423a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2201      	movs	r2, #1
 80041e2:	2104      	movs	r1, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f9c3 	bl	8004570 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0204 	orr.w	r2, r2, #4
 80041f8:	60da      	str	r2, [r3, #12]
      break;
 80041fa:	e01e      	b.n	800423a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f9b3 	bl	8004570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	2104      	movs	r1, #4
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f9ac 	bl	8004570 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0202 	orr.w	r2, r2, #2
 8004226:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0204 	orr.w	r2, r2, #4
 8004236:	60da      	str	r2, [r3, #12]
      break;
 8004238:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0202 	mvn.w	r2, #2
 8004280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8ed 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8e0 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8ef 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0204 	mvn.w	r2, #4
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8c3 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8b6 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8c5 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f899 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f88c 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f89b 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0210 	mvn.w	r2, #16
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2208      	movs	r2, #8
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f86f 	bl	8004476 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f862 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f871 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0201 	mvn.w	r2, #1
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fd24 	bl	8001e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f941 	bl	8004686 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f835 	bl	800449a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f90c 	bl	8004674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0xb8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00b      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d007      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a26      	ldr	r2, [pc, #152]	; (8004568 <TIM_Base_SetConfig+0xbc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_Base_SetConfig+0x30>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <TIM_Base_SetConfig+0xc0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <TIM_Base_SetConfig+0xb8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00b      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d007      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <TIM_Base_SetConfig+0xbc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d003      	beq.n	800450e <TIM_Base_SetConfig+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <TIM_Base_SetConfig+0xc0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d108      	bne.n	8004520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <TIM_Base_SetConfig+0xb8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d103      	bne.n	8004554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	615a      	str	r2, [r3, #20]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800

08004570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2201      	movs	r2, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e046      	b.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461c:	d009      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10c      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800

08004674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	; (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	200000c8 	.word	0x200000c8

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	2600      	movs	r6, #0
 80046a8:	4d0c      	ldr	r5, [pc, #48]	; (80046dc <__libc_init_array+0x38>)
 80046aa:	4c0d      	ldr	r4, [pc, #52]	; (80046e0 <__libc_init_array+0x3c>)
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	f002 feba 	bl	800742c <_init>
 80046b8:	2600      	movs	r6, #0
 80046ba:	4d0a      	ldr	r5, [pc, #40]	; (80046e4 <__libc_init_array+0x40>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <__libc_init_array+0x44>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08007b74 	.word	0x08007b74
 80046e0:	08007b74 	.word	0x08007b74
 80046e4:	08007b74 	.word	0x08007b74
 80046e8:	08007b78 	.word	0x08007b78

080046ec <malloc>:
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <malloc+0xc>)
 80046ee:	4601      	mov	r1, r0
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f000 b871 	b.w	80047d8 <_malloc_r>
 80046f6:	bf00      	nop
 80046f8:	200000c8 	.word	0x200000c8

080046fc <memmove>:
 80046fc:	4288      	cmp	r0, r1
 80046fe:	b510      	push	{r4, lr}
 8004700:	eb01 0402 	add.w	r4, r1, r2
 8004704:	d902      	bls.n	800470c <memmove+0x10>
 8004706:	4284      	cmp	r4, r0
 8004708:	4623      	mov	r3, r4
 800470a:	d807      	bhi.n	800471c <memmove+0x20>
 800470c:	1e43      	subs	r3, r0, #1
 800470e:	42a1      	cmp	r1, r4
 8004710:	d008      	beq.n	8004724 <memmove+0x28>
 8004712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800471a:	e7f8      	b.n	800470e <memmove+0x12>
 800471c:	4601      	mov	r1, r0
 800471e:	4402      	add	r2, r0
 8004720:	428a      	cmp	r2, r1
 8004722:	d100      	bne.n	8004726 <memmove+0x2a>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800472a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800472e:	e7f7      	b.n	8004720 <memmove+0x24>

08004730 <memset>:
 8004730:	4603      	mov	r3, r0
 8004732:	4402      	add	r2, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_free_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4605      	mov	r5, r0
 8004744:	2900      	cmp	r1, #0
 8004746:	d043      	beq.n	80047d0 <_free_r+0x90>
 8004748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474c:	1f0c      	subs	r4, r1, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfb8      	it	lt
 8004752:	18e4      	addlt	r4, r4, r3
 8004754:	f001 fbc6 	bl	8005ee4 <__malloc_lock>
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <_free_r+0x94>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	4610      	mov	r0, r2
 800475e:	b933      	cbnz	r3, 800476e <_free_r+0x2e>
 8004760:	6063      	str	r3, [r4, #4]
 8004762:	6014      	str	r4, [r2, #0]
 8004764:	4628      	mov	r0, r5
 8004766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800476a:	f001 bbc1 	b.w	8005ef0 <__malloc_unlock>
 800476e:	42a3      	cmp	r3, r4
 8004770:	d90a      	bls.n	8004788 <_free_r+0x48>
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	1862      	adds	r2, r4, r1
 8004776:	4293      	cmp	r3, r2
 8004778:	bf01      	itttt	eq
 800477a:	681a      	ldreq	r2, [r3, #0]
 800477c:	685b      	ldreq	r3, [r3, #4]
 800477e:	1852      	addeq	r2, r2, r1
 8004780:	6022      	streq	r2, [r4, #0]
 8004782:	6063      	str	r3, [r4, #4]
 8004784:	6004      	str	r4, [r0, #0]
 8004786:	e7ed      	b.n	8004764 <_free_r+0x24>
 8004788:	461a      	mov	r2, r3
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	b10b      	cbz	r3, 8004792 <_free_r+0x52>
 800478e:	42a3      	cmp	r3, r4
 8004790:	d9fa      	bls.n	8004788 <_free_r+0x48>
 8004792:	6811      	ldr	r1, [r2, #0]
 8004794:	1850      	adds	r0, r2, r1
 8004796:	42a0      	cmp	r0, r4
 8004798:	d10b      	bne.n	80047b2 <_free_r+0x72>
 800479a:	6820      	ldr	r0, [r4, #0]
 800479c:	4401      	add	r1, r0
 800479e:	1850      	adds	r0, r2, r1
 80047a0:	4283      	cmp	r3, r0
 80047a2:	6011      	str	r1, [r2, #0]
 80047a4:	d1de      	bne.n	8004764 <_free_r+0x24>
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4401      	add	r1, r0
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	6053      	str	r3, [r2, #4]
 80047b0:	e7d8      	b.n	8004764 <_free_r+0x24>
 80047b2:	d902      	bls.n	80047ba <_free_r+0x7a>
 80047b4:	230c      	movs	r3, #12
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	e7d4      	b.n	8004764 <_free_r+0x24>
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	1821      	adds	r1, r4, r0
 80047be:	428b      	cmp	r3, r1
 80047c0:	bf01      	itttt	eq
 80047c2:	6819      	ldreq	r1, [r3, #0]
 80047c4:	685b      	ldreq	r3, [r3, #4]
 80047c6:	1809      	addeq	r1, r1, r0
 80047c8:	6021      	streq	r1, [r4, #0]
 80047ca:	6063      	str	r3, [r4, #4]
 80047cc:	6054      	str	r4, [r2, #4]
 80047ce:	e7c9      	b.n	8004764 <_free_r+0x24>
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	bf00      	nop
 80047d4:	200002c4 	.word	0x200002c4

080047d8 <_malloc_r>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	1ccd      	adds	r5, r1, #3
 80047dc:	f025 0503 	bic.w	r5, r5, #3
 80047e0:	3508      	adds	r5, #8
 80047e2:	2d0c      	cmp	r5, #12
 80047e4:	bf38      	it	cc
 80047e6:	250c      	movcc	r5, #12
 80047e8:	2d00      	cmp	r5, #0
 80047ea:	4606      	mov	r6, r0
 80047ec:	db01      	blt.n	80047f2 <_malloc_r+0x1a>
 80047ee:	42a9      	cmp	r1, r5
 80047f0:	d903      	bls.n	80047fa <_malloc_r+0x22>
 80047f2:	230c      	movs	r3, #12
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	2000      	movs	r0, #0
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fa:	f001 fb73 	bl	8005ee4 <__malloc_lock>
 80047fe:	4921      	ldr	r1, [pc, #132]	; (8004884 <_malloc_r+0xac>)
 8004800:	680a      	ldr	r2, [r1, #0]
 8004802:	4614      	mov	r4, r2
 8004804:	b99c      	cbnz	r4, 800482e <_malloc_r+0x56>
 8004806:	4f20      	ldr	r7, [pc, #128]	; (8004888 <_malloc_r+0xb0>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b923      	cbnz	r3, 8004816 <_malloc_r+0x3e>
 800480c:	4621      	mov	r1, r4
 800480e:	4630      	mov	r0, r6
 8004810:	f000 fc9c 	bl	800514c <_sbrk_r>
 8004814:	6038      	str	r0, [r7, #0]
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f000 fc97 	bl	800514c <_sbrk_r>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	d123      	bne.n	800486a <_malloc_r+0x92>
 8004822:	230c      	movs	r3, #12
 8004824:	4630      	mov	r0, r6
 8004826:	6033      	str	r3, [r6, #0]
 8004828:	f001 fb62 	bl	8005ef0 <__malloc_unlock>
 800482c:	e7e3      	b.n	80047f6 <_malloc_r+0x1e>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	1b5b      	subs	r3, r3, r5
 8004832:	d417      	bmi.n	8004864 <_malloc_r+0x8c>
 8004834:	2b0b      	cmp	r3, #11
 8004836:	d903      	bls.n	8004840 <_malloc_r+0x68>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	441c      	add	r4, r3
 800483c:	6025      	str	r5, [r4, #0]
 800483e:	e004      	b.n	800484a <_malloc_r+0x72>
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	42a2      	cmp	r2, r4
 8004844:	bf0c      	ite	eq
 8004846:	600b      	streq	r3, [r1, #0]
 8004848:	6053      	strne	r3, [r2, #4]
 800484a:	4630      	mov	r0, r6
 800484c:	f001 fb50 	bl	8005ef0 <__malloc_unlock>
 8004850:	f104 000b 	add.w	r0, r4, #11
 8004854:	1d23      	adds	r3, r4, #4
 8004856:	f020 0007 	bic.w	r0, r0, #7
 800485a:	1ac2      	subs	r2, r0, r3
 800485c:	d0cc      	beq.n	80047f8 <_malloc_r+0x20>
 800485e:	1a1b      	subs	r3, r3, r0
 8004860:	50a3      	str	r3, [r4, r2]
 8004862:	e7c9      	b.n	80047f8 <_malloc_r+0x20>
 8004864:	4622      	mov	r2, r4
 8004866:	6864      	ldr	r4, [r4, #4]
 8004868:	e7cc      	b.n	8004804 <_malloc_r+0x2c>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d0e3      	beq.n	800483c <_malloc_r+0x64>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4630      	mov	r0, r6
 8004878:	f000 fc68 	bl	800514c <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d1dd      	bne.n	800483c <_malloc_r+0x64>
 8004880:	e7cf      	b.n	8004822 <_malloc_r+0x4a>
 8004882:	bf00      	nop
 8004884:	200002c4 	.word	0x200002c4
 8004888:	200002c8 	.word	0x200002c8

0800488c <__cvt>:
 800488c:	2b00      	cmp	r3, #0
 800488e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004892:	461f      	mov	r7, r3
 8004894:	bfbb      	ittet	lt
 8004896:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800489a:	461f      	movlt	r7, r3
 800489c:	2300      	movge	r3, #0
 800489e:	232d      	movlt	r3, #45	; 0x2d
 80048a0:	b088      	sub	sp, #32
 80048a2:	4614      	mov	r4, r2
 80048a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048a8:	7013      	strb	r3, [r2, #0]
 80048aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048b0:	f023 0820 	bic.w	r8, r3, #32
 80048b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048b8:	d005      	beq.n	80048c6 <__cvt+0x3a>
 80048ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048be:	d100      	bne.n	80048c2 <__cvt+0x36>
 80048c0:	3501      	adds	r5, #1
 80048c2:	2302      	movs	r3, #2
 80048c4:	e000      	b.n	80048c8 <__cvt+0x3c>
 80048c6:	2303      	movs	r3, #3
 80048c8:	aa07      	add	r2, sp, #28
 80048ca:	9204      	str	r2, [sp, #16]
 80048cc:	aa06      	add	r2, sp, #24
 80048ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048d2:	e9cd 3500 	strd	r3, r5, [sp]
 80048d6:	4622      	mov	r2, r4
 80048d8:	463b      	mov	r3, r7
 80048da:	f000 fcf5 	bl	80052c8 <_dtoa_r>
 80048de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048e2:	4606      	mov	r6, r0
 80048e4:	d102      	bne.n	80048ec <__cvt+0x60>
 80048e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048e8:	07db      	lsls	r3, r3, #31
 80048ea:	d522      	bpl.n	8004932 <__cvt+0xa6>
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f0:	eb06 0905 	add.w	r9, r6, r5
 80048f4:	d110      	bne.n	8004918 <__cvt+0x8c>
 80048f6:	7833      	ldrb	r3, [r6, #0]
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d10a      	bne.n	8004912 <__cvt+0x86>
 80048fc:	2200      	movs	r2, #0
 80048fe:	2300      	movs	r3, #0
 8004900:	4620      	mov	r0, r4
 8004902:	4639      	mov	r1, r7
 8004904:	f7fc f850 	bl	80009a8 <__aeabi_dcmpeq>
 8004908:	b918      	cbnz	r0, 8004912 <__cvt+0x86>
 800490a:	f1c5 0501 	rsb	r5, r5, #1
 800490e:	f8ca 5000 	str.w	r5, [sl]
 8004912:	f8da 3000 	ldr.w	r3, [sl]
 8004916:	4499      	add	r9, r3
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	4620      	mov	r0, r4
 800491e:	4639      	mov	r1, r7
 8004920:	f7fc f842 	bl	80009a8 <__aeabi_dcmpeq>
 8004924:	b108      	cbz	r0, 800492a <__cvt+0x9e>
 8004926:	f8cd 901c 	str.w	r9, [sp, #28]
 800492a:	2230      	movs	r2, #48	; 0x30
 800492c:	9b07      	ldr	r3, [sp, #28]
 800492e:	454b      	cmp	r3, r9
 8004930:	d307      	bcc.n	8004942 <__cvt+0xb6>
 8004932:	4630      	mov	r0, r6
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004938:	1b9b      	subs	r3, r3, r6
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	b008      	add	sp, #32
 800493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	9107      	str	r1, [sp, #28]
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e7f0      	b.n	800492c <__cvt+0xa0>

0800494a <__exponent>:
 800494a:	4603      	mov	r3, r0
 800494c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800494e:	2900      	cmp	r1, #0
 8004950:	f803 2b02 	strb.w	r2, [r3], #2
 8004954:	bfb6      	itet	lt
 8004956:	222d      	movlt	r2, #45	; 0x2d
 8004958:	222b      	movge	r2, #43	; 0x2b
 800495a:	4249      	neglt	r1, r1
 800495c:	2909      	cmp	r1, #9
 800495e:	7042      	strb	r2, [r0, #1]
 8004960:	dd2b      	ble.n	80049ba <__exponent+0x70>
 8004962:	f10d 0407 	add.w	r4, sp, #7
 8004966:	46a4      	mov	ip, r4
 8004968:	270a      	movs	r7, #10
 800496a:	fb91 f6f7 	sdiv	r6, r1, r7
 800496e:	460a      	mov	r2, r1
 8004970:	46a6      	mov	lr, r4
 8004972:	fb07 1516 	mls	r5, r7, r6, r1
 8004976:	2a63      	cmp	r2, #99	; 0x63
 8004978:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800497c:	4631      	mov	r1, r6
 800497e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004982:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004986:	dcf0      	bgt.n	800496a <__exponent+0x20>
 8004988:	3130      	adds	r1, #48	; 0x30
 800498a:	f1ae 0502 	sub.w	r5, lr, #2
 800498e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004992:	4629      	mov	r1, r5
 8004994:	1c44      	adds	r4, r0, #1
 8004996:	4561      	cmp	r1, ip
 8004998:	d30a      	bcc.n	80049b0 <__exponent+0x66>
 800499a:	f10d 0209 	add.w	r2, sp, #9
 800499e:	eba2 020e 	sub.w	r2, r2, lr
 80049a2:	4565      	cmp	r5, ip
 80049a4:	bf88      	it	hi
 80049a6:	2200      	movhi	r2, #0
 80049a8:	4413      	add	r3, r2
 80049aa:	1a18      	subs	r0, r3, r0
 80049ac:	b003      	add	sp, #12
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049b8:	e7ed      	b.n	8004996 <__exponent+0x4c>
 80049ba:	2330      	movs	r3, #48	; 0x30
 80049bc:	3130      	adds	r1, #48	; 0x30
 80049be:	7083      	strb	r3, [r0, #2]
 80049c0:	70c1      	strb	r1, [r0, #3]
 80049c2:	1d03      	adds	r3, r0, #4
 80049c4:	e7f1      	b.n	80049aa <__exponent+0x60>
	...

080049c8 <_printf_float>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	b091      	sub	sp, #68	; 0x44
 80049ce:	460c      	mov	r4, r1
 80049d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049d4:	4616      	mov	r6, r2
 80049d6:	461f      	mov	r7, r3
 80049d8:	4605      	mov	r5, r0
 80049da:	f001 fa63 	bl	8005ea4 <_localeconv_r>
 80049de:	6803      	ldr	r3, [r0, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	9309      	str	r3, [sp, #36]	; 0x24
 80049e4:	f7fb fbb4 	bl	8000150 <strlen>
 80049e8:	2300      	movs	r3, #0
 80049ea:	930e      	str	r3, [sp, #56]	; 0x38
 80049ec:	f8d8 3000 	ldr.w	r3, [r8]
 80049f0:	900a      	str	r0, [sp, #40]	; 0x28
 80049f2:	3307      	adds	r3, #7
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	f103 0208 	add.w	r2, r3, #8
 80049fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a00:	f8d4 b000 	ldr.w	fp, [r4]
 8004a04:	f8c8 2000 	str.w	r2, [r8]
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a10:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a14:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4b9c      	ldr	r3, [pc, #624]	; (8004c94 <_printf_float+0x2cc>)
 8004a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a24:	f7fb fff2 	bl	8000a0c <__aeabi_dcmpun>
 8004a28:	bb70      	cbnz	r0, 8004a88 <_printf_float+0xc0>
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	4640      	mov	r0, r8
 8004a30:	4b98      	ldr	r3, [pc, #608]	; (8004c94 <_printf_float+0x2cc>)
 8004a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a34:	f7fb ffcc 	bl	80009d0 <__aeabi_dcmple>
 8004a38:	bb30      	cbnz	r0, 8004a88 <_printf_float+0xc0>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4640      	mov	r0, r8
 8004a40:	4651      	mov	r1, sl
 8004a42:	f7fb ffbb 	bl	80009bc <__aeabi_dcmplt>
 8004a46:	b110      	cbz	r0, 8004a4e <_printf_float+0x86>
 8004a48:	232d      	movs	r3, #45	; 0x2d
 8004a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4e:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <_printf_float+0x2d0>)
 8004a50:	4892      	ldr	r0, [pc, #584]	; (8004c9c <_printf_float+0x2d4>)
 8004a52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a56:	bf94      	ite	ls
 8004a58:	4698      	movls	r8, r3
 8004a5a:	4680      	movhi	r8, r0
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	f04f 0a00 	mov.w	sl, #0
 8004a62:	6123      	str	r3, [r4, #16]
 8004a64:	f02b 0304 	bic.w	r3, fp, #4
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	4633      	mov	r3, r6
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	9700      	str	r7, [sp, #0]
 8004a72:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a74:	f000 f9d4 	bl	8004e20 <_printf_common>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f040 8090 	bne.w	8004b9e <_printf_float+0x1d6>
 8004a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a82:	b011      	add	sp, #68	; 0x44
 8004a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a88:	4642      	mov	r2, r8
 8004a8a:	4653      	mov	r3, sl
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4651      	mov	r1, sl
 8004a90:	f7fb ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8004a94:	b148      	cbz	r0, 8004aaa <_printf_float+0xe2>
 8004a96:	f1ba 0f00 	cmp.w	sl, #0
 8004a9a:	bfb8      	it	lt
 8004a9c:	232d      	movlt	r3, #45	; 0x2d
 8004a9e:	4880      	ldr	r0, [pc, #512]	; (8004ca0 <_printf_float+0x2d8>)
 8004aa0:	bfb8      	it	lt
 8004aa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004aa6:	4b7f      	ldr	r3, [pc, #508]	; (8004ca4 <_printf_float+0x2dc>)
 8004aa8:	e7d3      	b.n	8004a52 <_printf_float+0x8a>
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	d142      	bne.n	8004b3a <_printf_float+0x172>
 8004ab4:	2306      	movs	r3, #6
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	9206      	str	r2, [sp, #24]
 8004abc:	aa0e      	add	r2, sp, #56	; 0x38
 8004abe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ac2:	aa0d      	add	r2, sp, #52	; 0x34
 8004ac4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ac8:	9203      	str	r2, [sp, #12]
 8004aca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ace:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	4628      	mov	r0, r5
 8004adc:	4653      	mov	r3, sl
 8004ade:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ae0:	f7ff fed4 	bl	800488c <__cvt>
 8004ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae6:	4680      	mov	r8, r0
 8004ae8:	2947      	cmp	r1, #71	; 0x47
 8004aea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aec:	d108      	bne.n	8004b00 <_printf_float+0x138>
 8004aee:	1cc8      	adds	r0, r1, #3
 8004af0:	db02      	blt.n	8004af8 <_printf_float+0x130>
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	4299      	cmp	r1, r3
 8004af6:	dd40      	ble.n	8004b7a <_printf_float+0x1b2>
 8004af8:	f1a9 0902 	sub.w	r9, r9, #2
 8004afc:	fa5f f989 	uxtb.w	r9, r9
 8004b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b04:	d81f      	bhi.n	8004b46 <_printf_float+0x17e>
 8004b06:	464a      	mov	r2, r9
 8004b08:	3901      	subs	r1, #1
 8004b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b0e:	910d      	str	r1, [sp, #52]	; 0x34
 8004b10:	f7ff ff1b 	bl	800494a <__exponent>
 8004b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b16:	4682      	mov	sl, r0
 8004b18:	1813      	adds	r3, r2, r0
 8004b1a:	2a01      	cmp	r2, #1
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	dc02      	bgt.n	8004b26 <_printf_float+0x15e>
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	07d2      	lsls	r2, r2, #31
 8004b24:	d501      	bpl.n	8004b2a <_printf_float+0x162>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d09b      	beq.n	8004a6a <_printf_float+0xa2>
 8004b32:	232d      	movs	r3, #45	; 0x2d
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b38:	e797      	b.n	8004a6a <_printf_float+0xa2>
 8004b3a:	2947      	cmp	r1, #71	; 0x47
 8004b3c:	d1bc      	bne.n	8004ab8 <_printf_float+0xf0>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ba      	bne.n	8004ab8 <_printf_float+0xf0>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7b7      	b.n	8004ab6 <_printf_float+0xee>
 8004b46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b4a:	d118      	bne.n	8004b7e <_printf_float+0x1b6>
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	6863      	ldr	r3, [r4, #4]
 8004b50:	dd0b      	ble.n	8004b6a <_printf_float+0x1a2>
 8004b52:	6121      	str	r1, [r4, #16]
 8004b54:	b913      	cbnz	r3, 8004b5c <_printf_float+0x194>
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	07d0      	lsls	r0, r2, #31
 8004b5a:	d502      	bpl.n	8004b62 <_printf_float+0x19a>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	440b      	add	r3, r1
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	f04f 0a00 	mov.w	sl, #0
 8004b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b68:	e7df      	b.n	8004b2a <_printf_float+0x162>
 8004b6a:	b913      	cbnz	r3, 8004b72 <_printf_float+0x1aa>
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	07d2      	lsls	r2, r2, #31
 8004b70:	d501      	bpl.n	8004b76 <_printf_float+0x1ae>
 8004b72:	3302      	adds	r3, #2
 8004b74:	e7f4      	b.n	8004b60 <_printf_float+0x198>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e7f2      	b.n	8004b60 <_printf_float+0x198>
 8004b7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b80:	4299      	cmp	r1, r3
 8004b82:	db05      	blt.n	8004b90 <_printf_float+0x1c8>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	6121      	str	r1, [r4, #16]
 8004b88:	07d8      	lsls	r0, r3, #31
 8004b8a:	d5ea      	bpl.n	8004b62 <_printf_float+0x19a>
 8004b8c:	1c4b      	adds	r3, r1, #1
 8004b8e:	e7e7      	b.n	8004b60 <_printf_float+0x198>
 8004b90:	2900      	cmp	r1, #0
 8004b92:	bfcc      	ite	gt
 8004b94:	2201      	movgt	r2, #1
 8004b96:	f1c1 0202 	rsble	r2, r1, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	e7e0      	b.n	8004b60 <_printf_float+0x198>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	055a      	lsls	r2, r3, #21
 8004ba2:	d407      	bmi.n	8004bb4 <_printf_float+0x1ec>
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	4642      	mov	r2, r8
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d12b      	bne.n	8004c0a <_printf_float+0x242>
 8004bb2:	e764      	b.n	8004a7e <_printf_float+0xb6>
 8004bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bb8:	f240 80dd 	bls.w	8004d76 <_printf_float+0x3ae>
 8004bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f7fb fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d033      	beq.n	8004c34 <_printf_float+0x26c>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <_printf_float+0x2e0>)
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f af51 	beq.w	8004a7e <_printf_float+0xb6>
 8004bdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004be0:	429a      	cmp	r2, r3
 8004be2:	db02      	blt.n	8004bea <_printf_float+0x222>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	07d8      	lsls	r0, r3, #31
 8004be8:	d50f      	bpl.n	8004c0a <_printf_float+0x242>
 8004bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f43f af42 	beq.w	8004a7e <_printf_float+0xb6>
 8004bfa:	f04f 0800 	mov.w	r8, #0
 8004bfe:	f104 091a 	add.w	r9, r4, #26
 8004c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4543      	cmp	r3, r8
 8004c08:	dc09      	bgt.n	8004c1e <_printf_float+0x256>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	079b      	lsls	r3, r3, #30
 8004c0e:	f100 8102 	bmi.w	8004e16 <_printf_float+0x44e>
 8004c12:	68e0      	ldr	r0, [r4, #12]
 8004c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c16:	4298      	cmp	r0, r3
 8004c18:	bfb8      	it	lt
 8004c1a:	4618      	movlt	r0, r3
 8004c1c:	e731      	b.n	8004a82 <_printf_float+0xba>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	464a      	mov	r2, r9
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af28 	beq.w	8004a7e <_printf_float+0xb6>
 8004c2e:	f108 0801 	add.w	r8, r8, #1
 8004c32:	e7e6      	b.n	8004c02 <_printf_float+0x23a>
 8004c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dc38      	bgt.n	8004cac <_printf_float+0x2e4>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <_printf_float+0x2e0>)
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af1a 	beq.w	8004a7e <_printf_float+0xb6>
 8004c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d102      	bne.n	8004c58 <_printf_float+0x290>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	07d9      	lsls	r1, r3, #31
 8004c56:	d5d8      	bpl.n	8004c0a <_printf_float+0x242>
 8004c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	f43f af0b 	beq.w	8004a7e <_printf_float+0xb6>
 8004c68:	f04f 0900 	mov.w	r9, #0
 8004c6c:	f104 0a1a 	add.w	sl, r4, #26
 8004c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c72:	425b      	negs	r3, r3
 8004c74:	454b      	cmp	r3, r9
 8004c76:	dc01      	bgt.n	8004c7c <_printf_float+0x2b4>
 8004c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7a:	e794      	b.n	8004ba6 <_printf_float+0x1de>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4652      	mov	r2, sl
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f aef9 	beq.w	8004a7e <_printf_float+0xb6>
 8004c8c:	f109 0901 	add.w	r9, r9, #1
 8004c90:	e7ee      	b.n	8004c70 <_printf_float+0x2a8>
 8004c92:	bf00      	nop
 8004c94:	7fefffff 	.word	0x7fefffff
 8004c98:	08007794 	.word	0x08007794
 8004c9c:	08007798 	.word	0x08007798
 8004ca0:	080077a0 	.word	0x080077a0
 8004ca4:	0800779c 	.word	0x0800779c
 8004ca8:	080077a4 	.word	0x080077a4
 8004cac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bfa8      	it	ge
 8004cb4:	461a      	movge	r2, r3
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	4691      	mov	r9, r2
 8004cba:	dc37      	bgt.n	8004d2c <_printf_float+0x364>
 8004cbc:	f04f 0b00 	mov.w	fp, #0
 8004cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc4:	f104 021a 	add.w	r2, r4, #26
 8004cc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ccc:	ebaa 0309 	sub.w	r3, sl, r9
 8004cd0:	455b      	cmp	r3, fp
 8004cd2:	dc33      	bgt.n	8004d3c <_printf_float+0x374>
 8004cd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	db3b      	blt.n	8004d54 <_printf_float+0x38c>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	07da      	lsls	r2, r3, #31
 8004ce0:	d438      	bmi.n	8004d54 <_printf_float+0x38c>
 8004ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ce6:	eba2 030a 	sub.w	r3, r2, sl
 8004cea:	eba2 0901 	sub.w	r9, r2, r1
 8004cee:	4599      	cmp	r9, r3
 8004cf0:	bfa8      	it	ge
 8004cf2:	4699      	movge	r9, r3
 8004cf4:	f1b9 0f00 	cmp.w	r9, #0
 8004cf8:	dc34      	bgt.n	8004d64 <_printf_float+0x39c>
 8004cfa:	f04f 0800 	mov.w	r8, #0
 8004cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d02:	f104 0a1a 	add.w	sl, r4, #26
 8004d06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	eba3 0309 	sub.w	r3, r3, r9
 8004d10:	4543      	cmp	r3, r8
 8004d12:	f77f af7a 	ble.w	8004c0a <_printf_float+0x242>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4652      	mov	r2, sl
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b8      	blx	r7
 8004d20:	3001      	adds	r0, #1
 8004d22:	f43f aeac 	beq.w	8004a7e <_printf_float+0xb6>
 8004d26:	f108 0801 	add.w	r8, r8, #1
 8004d2a:	e7ec      	b.n	8004d06 <_printf_float+0x33e>
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4642      	mov	r2, r8
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	d1c0      	bne.n	8004cbc <_printf_float+0x2f4>
 8004d3a:	e6a0      	b.n	8004a7e <_printf_float+0xb6>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d44:	47b8      	blx	r7
 8004d46:	3001      	adds	r0, #1
 8004d48:	f43f ae99 	beq.w	8004a7e <_printf_float+0xb6>
 8004d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d4e:	f10b 0b01 	add.w	fp, fp, #1
 8004d52:	e7b9      	b.n	8004cc8 <_printf_float+0x300>
 8004d54:	4631      	mov	r1, r6
 8004d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b8      	blx	r7
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d1bf      	bne.n	8004ce2 <_printf_float+0x31a>
 8004d62:	e68c      	b.n	8004a7e <_printf_float+0xb6>
 8004d64:	464b      	mov	r3, r9
 8004d66:	4631      	mov	r1, r6
 8004d68:	4628      	mov	r0, r5
 8004d6a:	eb08 020a 	add.w	r2, r8, sl
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	d1c2      	bne.n	8004cfa <_printf_float+0x332>
 8004d74:	e683      	b.n	8004a7e <_printf_float+0xb6>
 8004d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d78:	2a01      	cmp	r2, #1
 8004d7a:	dc01      	bgt.n	8004d80 <_printf_float+0x3b8>
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d537      	bpl.n	8004df0 <_printf_float+0x428>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4642      	mov	r2, r8
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f ae77 	beq.w	8004a7e <_printf_float+0xb6>
 8004d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f ae6f 	beq.w	8004a7e <_printf_float+0xb6>
 8004da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f7fb fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8004dac:	b9d8      	cbnz	r0, 8004de6 <_printf_float+0x41e>
 8004dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db0:	f108 0201 	add.w	r2, r8, #1
 8004db4:	3b01      	subs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d10e      	bne.n	8004dde <_printf_float+0x416>
 8004dc0:	e65d      	b.n	8004a7e <_printf_float+0xb6>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	464a      	mov	r2, r9
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae56 	beq.w	8004a7e <_printf_float+0xb6>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4543      	cmp	r3, r8
 8004ddc:	dcf1      	bgt.n	8004dc2 <_printf_float+0x3fa>
 8004dde:	4653      	mov	r3, sl
 8004de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de4:	e6e0      	b.n	8004ba8 <_printf_float+0x1e0>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	f104 091a 	add.w	r9, r4, #26
 8004dee:	e7f2      	b.n	8004dd6 <_printf_float+0x40e>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4642      	mov	r2, r8
 8004df4:	e7df      	b.n	8004db6 <_printf_float+0x3ee>
 8004df6:	2301      	movs	r3, #1
 8004df8:	464a      	mov	r2, r9
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f ae3c 	beq.w	8004a7e <_printf_float+0xb6>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	68e3      	ldr	r3, [r4, #12]
 8004e0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e0e:	1a5b      	subs	r3, r3, r1
 8004e10:	4543      	cmp	r3, r8
 8004e12:	dcf0      	bgt.n	8004df6 <_printf_float+0x42e>
 8004e14:	e6fd      	b.n	8004c12 <_printf_float+0x24a>
 8004e16:	f04f 0800 	mov.w	r8, #0
 8004e1a:	f104 0919 	add.w	r9, r4, #25
 8004e1e:	e7f4      	b.n	8004e0a <_printf_float+0x442>

08004e20 <_printf_common>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	4616      	mov	r6, r2
 8004e26:	4699      	mov	r9, r3
 8004e28:	688a      	ldr	r2, [r1, #8]
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bfb8      	it	lt
 8004e32:	4613      	movlt	r3, r2
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e40:	b10a      	cbz	r2, 8004e46 <_printf_common+0x26>
 8004e42:	3301      	adds	r3, #1
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	0699      	lsls	r1, r3, #26
 8004e4a:	bf42      	ittt	mi
 8004e4c:	6833      	ldrmi	r3, [r6, #0]
 8004e4e:	3302      	addmi	r3, #2
 8004e50:	6033      	strmi	r3, [r6, #0]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	f015 0506 	ands.w	r5, r5, #6
 8004e58:	d106      	bne.n	8004e68 <_printf_common+0x48>
 8004e5a:	f104 0a19 	add.w	sl, r4, #25
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	6832      	ldr	r2, [r6, #0]
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dc28      	bgt.n	8004eba <_printf_common+0x9a>
 8004e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e6c:	1e13      	subs	r3, r2, #0
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	bf18      	it	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	0692      	lsls	r2, r2, #26
 8004e76:	d42d      	bmi.n	8004ed4 <_printf_common+0xb4>
 8004e78:	4649      	mov	r1, r9
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e80:	47c0      	blx	r8
 8004e82:	3001      	adds	r0, #1
 8004e84:	d020      	beq.n	8004ec8 <_printf_common+0xa8>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	68e5      	ldr	r5, [r4, #12]
 8004e8a:	f003 0306 	and.w	r3, r3, #6
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	bf18      	it	ne
 8004e92:	2500      	movne	r5, #0
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	f04f 0600 	mov.w	r6, #0
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	bf08      	it	eq
 8004e9e:	1aad      	subeq	r5, r5, r2
 8004ea0:	6922      	ldr	r2, [r4, #16]
 8004ea2:	bf08      	it	eq
 8004ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfc4      	itt	gt
 8004eac:	1a9b      	subgt	r3, r3, r2
 8004eae:	18ed      	addgt	r5, r5, r3
 8004eb0:	341a      	adds	r4, #26
 8004eb2:	42b5      	cmp	r5, r6
 8004eb4:	d11a      	bne.n	8004eec <_printf_common+0xcc>
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e008      	b.n	8004ecc <_printf_common+0xac>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4652      	mov	r2, sl
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	47c0      	blx	r8
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d103      	bne.n	8004ed0 <_printf_common+0xb0>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	e7c4      	b.n	8004e5e <_printf_common+0x3e>
 8004ed4:	2030      	movs	r0, #48	; 0x30
 8004ed6:	18e1      	adds	r1, r4, r3
 8004ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee2:	4422      	add	r2, r4
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eea:	e7c5      	b.n	8004e78 <_printf_common+0x58>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0e6      	beq.n	8004ec8 <_printf_common+0xa8>
 8004efa:	3601      	adds	r6, #1
 8004efc:	e7d9      	b.n	8004eb2 <_printf_common+0x92>
	...

08004f00 <_printf_i>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	7e27      	ldrb	r7, [r4, #24]
 8004f08:	4691      	mov	r9, r2
 8004f0a:	2f78      	cmp	r7, #120	; 0x78
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	469a      	mov	sl, r3
 8004f10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f16:	d807      	bhi.n	8004f28 <_printf_i+0x28>
 8004f18:	2f62      	cmp	r7, #98	; 0x62
 8004f1a:	d80a      	bhi.n	8004f32 <_printf_i+0x32>
 8004f1c:	2f00      	cmp	r7, #0
 8004f1e:	f000 80d9 	beq.w	80050d4 <_printf_i+0x1d4>
 8004f22:	2f58      	cmp	r7, #88	; 0x58
 8004f24:	f000 80a4 	beq.w	8005070 <_printf_i+0x170>
 8004f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f30:	e03a      	b.n	8004fa8 <_printf_i+0xa8>
 8004f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f36:	2b15      	cmp	r3, #21
 8004f38:	d8f6      	bhi.n	8004f28 <_printf_i+0x28>
 8004f3a:	a001      	add	r0, pc, #4	; (adr r0, 8004f40 <_printf_i+0x40>)
 8004f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004fad 	.word	0x08004fad
 8004f48:	08004f29 	.word	0x08004f29
 8004f4c:	08004f29 	.word	0x08004f29
 8004f50:	08004f29 	.word	0x08004f29
 8004f54:	08004f29 	.word	0x08004f29
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004f29 	.word	0x08004f29
 8004f60:	08004f29 	.word	0x08004f29
 8004f64:	08004f29 	.word	0x08004f29
 8004f68:	08004f29 	.word	0x08004f29
 8004f6c:	080050bb 	.word	0x080050bb
 8004f70:	08004fdd 	.word	0x08004fdd
 8004f74:	0800509d 	.word	0x0800509d
 8004f78:	08004f29 	.word	0x08004f29
 8004f7c:	08004f29 	.word	0x08004f29
 8004f80:	080050dd 	.word	0x080050dd
 8004f84:	08004f29 	.word	0x08004f29
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f29 	.word	0x08004f29
 8004f90:	08004f29 	.word	0x08004f29
 8004f94:	080050a5 	.word	0x080050a5
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	600a      	str	r2, [r1, #0]
 8004fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0a4      	b.n	80050f6 <_printf_i+0x1f6>
 8004fac:	6825      	ldr	r5, [r4, #0]
 8004fae:	6808      	ldr	r0, [r1, #0]
 8004fb0:	062e      	lsls	r6, r5, #24
 8004fb2:	f100 0304 	add.w	r3, r0, #4
 8004fb6:	d50a      	bpl.n	8004fce <_printf_i+0xce>
 8004fb8:	6805      	ldr	r5, [r0, #0]
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	da03      	bge.n	8004fc8 <_printf_i+0xc8>
 8004fc0:	232d      	movs	r3, #45	; 0x2d
 8004fc2:	426d      	negs	r5, r5
 8004fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc8:	230a      	movs	r3, #10
 8004fca:	485e      	ldr	r0, [pc, #376]	; (8005144 <_printf_i+0x244>)
 8004fcc:	e019      	b.n	8005002 <_printf_i+0x102>
 8004fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fd2:	6805      	ldr	r5, [r0, #0]
 8004fd4:	600b      	str	r3, [r1, #0]
 8004fd6:	bf18      	it	ne
 8004fd8:	b22d      	sxthne	r5, r5
 8004fda:	e7ef      	b.n	8004fbc <_printf_i+0xbc>
 8004fdc:	680b      	ldr	r3, [r1, #0]
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	1d18      	adds	r0, r3, #4
 8004fe2:	6008      	str	r0, [r1, #0]
 8004fe4:	0628      	lsls	r0, r5, #24
 8004fe6:	d501      	bpl.n	8004fec <_printf_i+0xec>
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	e002      	b.n	8004ff2 <_printf_i+0xf2>
 8004fec:	0669      	lsls	r1, r5, #25
 8004fee:	d5fb      	bpl.n	8004fe8 <_printf_i+0xe8>
 8004ff0:	881d      	ldrh	r5, [r3, #0]
 8004ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2308      	moveq	r3, #8
 8004ff8:	230a      	movne	r3, #10
 8004ffa:	4852      	ldr	r0, [pc, #328]	; (8005144 <_printf_i+0x244>)
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005002:	6866      	ldr	r6, [r4, #4]
 8005004:	2e00      	cmp	r6, #0
 8005006:	bfa8      	it	ge
 8005008:	6821      	ldrge	r1, [r4, #0]
 800500a:	60a6      	str	r6, [r4, #8]
 800500c:	bfa4      	itt	ge
 800500e:	f021 0104 	bicge.w	r1, r1, #4
 8005012:	6021      	strge	r1, [r4, #0]
 8005014:	b90d      	cbnz	r5, 800501a <_printf_i+0x11a>
 8005016:	2e00      	cmp	r6, #0
 8005018:	d04d      	beq.n	80050b6 <_printf_i+0x1b6>
 800501a:	4616      	mov	r6, r2
 800501c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005020:	fb03 5711 	mls	r7, r3, r1, r5
 8005024:	5dc7      	ldrb	r7, [r0, r7]
 8005026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800502a:	462f      	mov	r7, r5
 800502c:	42bb      	cmp	r3, r7
 800502e:	460d      	mov	r5, r1
 8005030:	d9f4      	bls.n	800501c <_printf_i+0x11c>
 8005032:	2b08      	cmp	r3, #8
 8005034:	d10b      	bne.n	800504e <_printf_i+0x14e>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	07df      	lsls	r7, r3, #31
 800503a:	d508      	bpl.n	800504e <_printf_i+0x14e>
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	6861      	ldr	r1, [r4, #4]
 8005040:	4299      	cmp	r1, r3
 8005042:	bfde      	ittt	le
 8005044:	2330      	movle	r3, #48	; 0x30
 8005046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800504a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800504e:	1b92      	subs	r2, r2, r6
 8005050:	6122      	str	r2, [r4, #16]
 8005052:	464b      	mov	r3, r9
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f8cd a000 	str.w	sl, [sp]
 800505c:	aa03      	add	r2, sp, #12
 800505e:	f7ff fedf 	bl	8004e20 <_printf_common>
 8005062:	3001      	adds	r0, #1
 8005064:	d14c      	bne.n	8005100 <_printf_i+0x200>
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	b004      	add	sp, #16
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	4834      	ldr	r0, [pc, #208]	; (8005144 <_printf_i+0x244>)
 8005072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005076:	680e      	ldr	r6, [r1, #0]
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	f856 5b04 	ldr.w	r5, [r6], #4
 800507e:	061f      	lsls	r7, r3, #24
 8005080:	600e      	str	r6, [r1, #0]
 8005082:	d514      	bpl.n	80050ae <_printf_i+0x1ae>
 8005084:	07d9      	lsls	r1, r3, #31
 8005086:	bf44      	itt	mi
 8005088:	f043 0320 	orrmi.w	r3, r3, #32
 800508c:	6023      	strmi	r3, [r4, #0]
 800508e:	b91d      	cbnz	r5, 8005098 <_printf_i+0x198>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f023 0320 	bic.w	r3, r3, #32
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	2310      	movs	r3, #16
 800509a:	e7af      	b.n	8004ffc <_printf_i+0xfc>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	2378      	movs	r3, #120	; 0x78
 80050a6:	4828      	ldr	r0, [pc, #160]	; (8005148 <_printf_i+0x248>)
 80050a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ac:	e7e3      	b.n	8005076 <_printf_i+0x176>
 80050ae:	065e      	lsls	r6, r3, #25
 80050b0:	bf48      	it	mi
 80050b2:	b2ad      	uxthmi	r5, r5
 80050b4:	e7e6      	b.n	8005084 <_printf_i+0x184>
 80050b6:	4616      	mov	r6, r2
 80050b8:	e7bb      	b.n	8005032 <_printf_i+0x132>
 80050ba:	680b      	ldr	r3, [r1, #0]
 80050bc:	6826      	ldr	r6, [r4, #0]
 80050be:	1d1d      	adds	r5, r3, #4
 80050c0:	6960      	ldr	r0, [r4, #20]
 80050c2:	600d      	str	r5, [r1, #0]
 80050c4:	0635      	lsls	r5, r6, #24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	d501      	bpl.n	80050ce <_printf_i+0x1ce>
 80050ca:	6018      	str	r0, [r3, #0]
 80050cc:	e002      	b.n	80050d4 <_printf_i+0x1d4>
 80050ce:	0671      	lsls	r1, r6, #25
 80050d0:	d5fb      	bpl.n	80050ca <_printf_i+0x1ca>
 80050d2:	8018      	strh	r0, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	4616      	mov	r6, r2
 80050d8:	6123      	str	r3, [r4, #16]
 80050da:	e7ba      	b.n	8005052 <_printf_i+0x152>
 80050dc:	680b      	ldr	r3, [r1, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	600a      	str	r2, [r1, #0]
 80050e2:	681e      	ldr	r6, [r3, #0]
 80050e4:	2100      	movs	r1, #0
 80050e6:	4630      	mov	r0, r6
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	f000 fedf 	bl	8005eac <memchr>
 80050ee:	b108      	cbz	r0, 80050f4 <_printf_i+0x1f4>
 80050f0:	1b80      	subs	r0, r0, r6
 80050f2:	6060      	str	r0, [r4, #4]
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	2300      	movs	r3, #0
 80050fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050fe:	e7a8      	b.n	8005052 <_printf_i+0x152>
 8005100:	4632      	mov	r2, r6
 8005102:	4649      	mov	r1, r9
 8005104:	4640      	mov	r0, r8
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	47d0      	blx	sl
 800510a:	3001      	adds	r0, #1
 800510c:	d0ab      	beq.n	8005066 <_printf_i+0x166>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	079b      	lsls	r3, r3, #30
 8005112:	d413      	bmi.n	800513c <_printf_i+0x23c>
 8005114:	68e0      	ldr	r0, [r4, #12]
 8005116:	9b03      	ldr	r3, [sp, #12]
 8005118:	4298      	cmp	r0, r3
 800511a:	bfb8      	it	lt
 800511c:	4618      	movlt	r0, r3
 800511e:	e7a4      	b.n	800506a <_printf_i+0x16a>
 8005120:	2301      	movs	r3, #1
 8005122:	4632      	mov	r2, r6
 8005124:	4649      	mov	r1, r9
 8005126:	4640      	mov	r0, r8
 8005128:	47d0      	blx	sl
 800512a:	3001      	adds	r0, #1
 800512c:	d09b      	beq.n	8005066 <_printf_i+0x166>
 800512e:	3501      	adds	r5, #1
 8005130:	68e3      	ldr	r3, [r4, #12]
 8005132:	9903      	ldr	r1, [sp, #12]
 8005134:	1a5b      	subs	r3, r3, r1
 8005136:	42ab      	cmp	r3, r5
 8005138:	dcf2      	bgt.n	8005120 <_printf_i+0x220>
 800513a:	e7eb      	b.n	8005114 <_printf_i+0x214>
 800513c:	2500      	movs	r5, #0
 800513e:	f104 0619 	add.w	r6, r4, #25
 8005142:	e7f5      	b.n	8005130 <_printf_i+0x230>
 8005144:	080077a6 	.word	0x080077a6
 8005148:	080077b7 	.word	0x080077b7

0800514c <_sbrk_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	2300      	movs	r3, #0
 8005150:	4d05      	ldr	r5, [pc, #20]	; (8005168 <_sbrk_r+0x1c>)
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fd fabe 	bl	80026d8 <_sbrk>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_sbrk_r+0x1a>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_sbrk_r+0x1a>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	200006d4 	.word	0x200006d4

0800516c <siprintf>:
 800516c:	b40e      	push	{r1, r2, r3}
 800516e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005172:	b500      	push	{lr}
 8005174:	b09c      	sub	sp, #112	; 0x70
 8005176:	ab1d      	add	r3, sp, #116	; 0x74
 8005178:	9002      	str	r0, [sp, #8]
 800517a:	9006      	str	r0, [sp, #24]
 800517c:	9107      	str	r1, [sp, #28]
 800517e:	9104      	str	r1, [sp, #16]
 8005180:	4808      	ldr	r0, [pc, #32]	; (80051a4 <siprintf+0x38>)
 8005182:	4909      	ldr	r1, [pc, #36]	; (80051a8 <siprintf+0x3c>)
 8005184:	f853 2b04 	ldr.w	r2, [r3], #4
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	a902      	add	r1, sp, #8
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	f001 faa0 	bl	80066d4 <_svfiprintf_r>
 8005194:	2200      	movs	r2, #0
 8005196:	9b02      	ldr	r3, [sp, #8]
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	b01c      	add	sp, #112	; 0x70
 800519c:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a0:	b003      	add	sp, #12
 80051a2:	4770      	bx	lr
 80051a4:	200000c8 	.word	0x200000c8
 80051a8:	ffff0208 	.word	0xffff0208

080051ac <quorem>:
 80051ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	6903      	ldr	r3, [r0, #16]
 80051b2:	690c      	ldr	r4, [r1, #16]
 80051b4:	4607      	mov	r7, r0
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	f2c0 8083 	blt.w	80052c2 <quorem+0x116>
 80051bc:	3c01      	subs	r4, #1
 80051be:	f100 0514 	add.w	r5, r0, #20
 80051c2:	f101 0814 	add.w	r8, r1, #20
 80051c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d4:	3301      	adds	r3, #1
 80051d6:	429a      	cmp	r2, r3
 80051d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80051dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051e4:	d332      	bcc.n	800524c <quorem+0xa0>
 80051e6:	f04f 0e00 	mov.w	lr, #0
 80051ea:	4640      	mov	r0, r8
 80051ec:	46ac      	mov	ip, r5
 80051ee:	46f2      	mov	sl, lr
 80051f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051f4:	b293      	uxth	r3, r2
 80051f6:	fb06 e303 	mla	r3, r6, r3, lr
 80051fa:	0c12      	lsrs	r2, r2, #16
 80051fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005200:	fb06 e202 	mla	r2, r6, r2, lr
 8005204:	b29b      	uxth	r3, r3
 8005206:	ebaa 0303 	sub.w	r3, sl, r3
 800520a:	f8dc a000 	ldr.w	sl, [ip]
 800520e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005212:	fa1f fa8a 	uxth.w	sl, sl
 8005216:	4453      	add	r3, sl
 8005218:	fa1f fa82 	uxth.w	sl, r2
 800521c:	f8dc 2000 	ldr.w	r2, [ip]
 8005220:	4581      	cmp	r9, r0
 8005222:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005226:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005230:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005234:	f84c 3b04 	str.w	r3, [ip], #4
 8005238:	d2da      	bcs.n	80051f0 <quorem+0x44>
 800523a:	f855 300b 	ldr.w	r3, [r5, fp]
 800523e:	b92b      	cbnz	r3, 800524c <quorem+0xa0>
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	3b04      	subs	r3, #4
 8005244:	429d      	cmp	r5, r3
 8005246:	461a      	mov	r2, r3
 8005248:	d32f      	bcc.n	80052aa <quorem+0xfe>
 800524a:	613c      	str	r4, [r7, #16]
 800524c:	4638      	mov	r0, r7
 800524e:	f001 f8cf 	bl	80063f0 <__mcmp>
 8005252:	2800      	cmp	r0, #0
 8005254:	db25      	blt.n	80052a2 <quorem+0xf6>
 8005256:	4628      	mov	r0, r5
 8005258:	f04f 0c00 	mov.w	ip, #0
 800525c:	3601      	adds	r6, #1
 800525e:	f858 1b04 	ldr.w	r1, [r8], #4
 8005262:	f8d0 e000 	ldr.w	lr, [r0]
 8005266:	b28b      	uxth	r3, r1
 8005268:	ebac 0303 	sub.w	r3, ip, r3
 800526c:	fa1f f28e 	uxth.w	r2, lr
 8005270:	4413      	add	r3, r2
 8005272:	0c0a      	lsrs	r2, r1, #16
 8005274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800527c:	b29b      	uxth	r3, r3
 800527e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005282:	45c1      	cmp	r9, r8
 8005284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005288:	f840 3b04 	str.w	r3, [r0], #4
 800528c:	d2e7      	bcs.n	800525e <quorem+0xb2>
 800528e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005296:	b922      	cbnz	r2, 80052a2 <quorem+0xf6>
 8005298:	3b04      	subs	r3, #4
 800529a:	429d      	cmp	r5, r3
 800529c:	461a      	mov	r2, r3
 800529e:	d30a      	bcc.n	80052b6 <quorem+0x10a>
 80052a0:	613c      	str	r4, [r7, #16]
 80052a2:	4630      	mov	r0, r6
 80052a4:	b003      	add	sp, #12
 80052a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	3b04      	subs	r3, #4
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	d1cb      	bne.n	800524a <quorem+0x9e>
 80052b2:	3c01      	subs	r4, #1
 80052b4:	e7c6      	b.n	8005244 <quorem+0x98>
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1f0      	bne.n	80052a0 <quorem+0xf4>
 80052be:	3c01      	subs	r4, #1
 80052c0:	e7eb      	b.n	800529a <quorem+0xee>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e7ee      	b.n	80052a4 <quorem+0xf8>
	...

080052c8 <_dtoa_r>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	4616      	mov	r6, r2
 80052ce:	461f      	mov	r7, r3
 80052d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052d2:	b099      	sub	sp, #100	; 0x64
 80052d4:	4605      	mov	r5, r0
 80052d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052de:	b974      	cbnz	r4, 80052fe <_dtoa_r+0x36>
 80052e0:	2010      	movs	r0, #16
 80052e2:	f7ff fa03 	bl	80046ec <malloc>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6268      	str	r0, [r5, #36]	; 0x24
 80052ea:	b920      	cbnz	r0, 80052f6 <_dtoa_r+0x2e>
 80052ec:	21ea      	movs	r1, #234	; 0xea
 80052ee:	4bae      	ldr	r3, [pc, #696]	; (80055a8 <_dtoa_r+0x2e0>)
 80052f0:	48ae      	ldr	r0, [pc, #696]	; (80055ac <_dtoa_r+0x2e4>)
 80052f2:	f001 faef 	bl	80068d4 <__assert_func>
 80052f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052fa:	6004      	str	r4, [r0, #0]
 80052fc:	60c4      	str	r4, [r0, #12]
 80052fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	b151      	cbz	r1, 800531a <_dtoa_r+0x52>
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	2301      	movs	r3, #1
 8005308:	4093      	lsls	r3, r2
 800530a:	604a      	str	r2, [r1, #4]
 800530c:	608b      	str	r3, [r1, #8]
 800530e:	4628      	mov	r0, r5
 8005310:	f000 fe34 	bl	8005f7c <_Bfree>
 8005314:	2200      	movs	r2, #0
 8005316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	1e3b      	subs	r3, r7, #0
 800531c:	bfaf      	iteee	ge
 800531e:	2300      	movge	r3, #0
 8005320:	2201      	movlt	r2, #1
 8005322:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005326:	9305      	strlt	r3, [sp, #20]
 8005328:	bfa8      	it	ge
 800532a:	f8c8 3000 	strge.w	r3, [r8]
 800532e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005332:	4b9f      	ldr	r3, [pc, #636]	; (80055b0 <_dtoa_r+0x2e8>)
 8005334:	bfb8      	it	lt
 8005336:	f8c8 2000 	strlt.w	r2, [r8]
 800533a:	ea33 0309 	bics.w	r3, r3, r9
 800533e:	d119      	bne.n	8005374 <_dtoa_r+0xac>
 8005340:	f242 730f 	movw	r3, #9999	; 0x270f
 8005344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800534c:	4333      	orrs	r3, r6
 800534e:	f000 8580 	beq.w	8005e52 <_dtoa_r+0xb8a>
 8005352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005354:	b953      	cbnz	r3, 800536c <_dtoa_r+0xa4>
 8005356:	4b97      	ldr	r3, [pc, #604]	; (80055b4 <_dtoa_r+0x2ec>)
 8005358:	e022      	b.n	80053a0 <_dtoa_r+0xd8>
 800535a:	4b97      	ldr	r3, [pc, #604]	; (80055b8 <_dtoa_r+0x2f0>)
 800535c:	9308      	str	r3, [sp, #32]
 800535e:	3308      	adds	r3, #8
 8005360:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	9808      	ldr	r0, [sp, #32]
 8005366:	b019      	add	sp, #100	; 0x64
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536c:	4b91      	ldr	r3, [pc, #580]	; (80055b4 <_dtoa_r+0x2ec>)
 800536e:	9308      	str	r3, [sp, #32]
 8005370:	3303      	adds	r3, #3
 8005372:	e7f5      	b.n	8005360 <_dtoa_r+0x98>
 8005374:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005378:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800537c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	f7fb fb10 	bl	80009a8 <__aeabi_dcmpeq>
 8005388:	4680      	mov	r8, r0
 800538a:	b158      	cbz	r0, 80053a4 <_dtoa_r+0xdc>
 800538c:	2301      	movs	r3, #1
 800538e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8559 	beq.w	8005e4c <_dtoa_r+0xb84>
 800539a:	4888      	ldr	r0, [pc, #544]	; (80055bc <_dtoa_r+0x2f4>)
 800539c:	6018      	str	r0, [r3, #0]
 800539e:	1e43      	subs	r3, r0, #1
 80053a0:	9308      	str	r3, [sp, #32]
 80053a2:	e7df      	b.n	8005364 <_dtoa_r+0x9c>
 80053a4:	ab16      	add	r3, sp, #88	; 0x58
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	ab17      	add	r3, sp, #92	; 0x5c
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	4628      	mov	r0, r5
 80053ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053b2:	f001 f8c9 	bl	8006548 <__d2b>
 80053b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053ba:	4682      	mov	sl, r0
 80053bc:	2c00      	cmp	r4, #0
 80053be:	d07e      	beq.n	80054be <_dtoa_r+0x1f6>
 80053c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80053da:	2200      	movs	r2, #0
 80053dc:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <_dtoa_r+0x2f8>)
 80053de:	f7fa fec3 	bl	8000168 <__aeabi_dsub>
 80053e2:	a36b      	add	r3, pc, #428	; (adr r3, 8005590 <_dtoa_r+0x2c8>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fb f876 	bl	80004d8 <__aeabi_dmul>
 80053ec:	a36a      	add	r3, pc, #424	; (adr r3, 8005598 <_dtoa_r+0x2d0>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f7fa febb 	bl	800016c <__adddf3>
 80053f6:	4606      	mov	r6, r0
 80053f8:	4620      	mov	r0, r4
 80053fa:	460f      	mov	r7, r1
 80053fc:	f7fb f802 	bl	8000404 <__aeabi_i2d>
 8005400:	a367      	add	r3, pc, #412	; (adr r3, 80055a0 <_dtoa_r+0x2d8>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fb f867 	bl	80004d8 <__aeabi_dmul>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4630      	mov	r0, r6
 8005410:	4639      	mov	r1, r7
 8005412:	f7fa feab 	bl	800016c <__adddf3>
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	f7fb fb0d 	bl	8000a38 <__aeabi_d2iz>
 800541e:	2200      	movs	r2, #0
 8005420:	4681      	mov	r9, r0
 8005422:	2300      	movs	r3, #0
 8005424:	4630      	mov	r0, r6
 8005426:	4639      	mov	r1, r7
 8005428:	f7fb fac8 	bl	80009bc <__aeabi_dcmplt>
 800542c:	b148      	cbz	r0, 8005442 <_dtoa_r+0x17a>
 800542e:	4648      	mov	r0, r9
 8005430:	f7fa ffe8 	bl	8000404 <__aeabi_i2d>
 8005434:	4632      	mov	r2, r6
 8005436:	463b      	mov	r3, r7
 8005438:	f7fb fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800543c:	b908      	cbnz	r0, 8005442 <_dtoa_r+0x17a>
 800543e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005442:	f1b9 0f16 	cmp.w	r9, #22
 8005446:	d857      	bhi.n	80054f8 <_dtoa_r+0x230>
 8005448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800544c:	4b5d      	ldr	r3, [pc, #372]	; (80055c4 <_dtoa_r+0x2fc>)
 800544e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb fab1 	bl	80009bc <__aeabi_dcmplt>
 800545a:	2800      	cmp	r0, #0
 800545c:	d04e      	beq.n	80054fc <_dtoa_r+0x234>
 800545e:	2300      	movs	r3, #0
 8005460:	f109 39ff 	add.w	r9, r9, #4294967295
 8005464:	930f      	str	r3, [sp, #60]	; 0x3c
 8005466:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005468:	1b1c      	subs	r4, r3, r4
 800546a:	1e63      	subs	r3, r4, #1
 800546c:	9309      	str	r3, [sp, #36]	; 0x24
 800546e:	bf49      	itett	mi
 8005470:	f1c4 0301 	rsbmi	r3, r4, #1
 8005474:	2300      	movpl	r3, #0
 8005476:	9306      	strmi	r3, [sp, #24]
 8005478:	2300      	movmi	r3, #0
 800547a:	bf54      	ite	pl
 800547c:	9306      	strpl	r3, [sp, #24]
 800547e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005480:	f1b9 0f00 	cmp.w	r9, #0
 8005484:	db3c      	blt.n	8005500 <_dtoa_r+0x238>
 8005486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005488:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800548c:	444b      	add	r3, r9
 800548e:	9309      	str	r3, [sp, #36]	; 0x24
 8005490:	2300      	movs	r3, #0
 8005492:	930a      	str	r3, [sp, #40]	; 0x28
 8005494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005496:	2b09      	cmp	r3, #9
 8005498:	d86c      	bhi.n	8005574 <_dtoa_r+0x2ac>
 800549a:	2b05      	cmp	r3, #5
 800549c:	bfc4      	itt	gt
 800549e:	3b04      	subgt	r3, #4
 80054a0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80054a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054a4:	bfc8      	it	gt
 80054a6:	2400      	movgt	r4, #0
 80054a8:	f1a3 0302 	sub.w	r3, r3, #2
 80054ac:	bfd8      	it	le
 80054ae:	2401      	movle	r4, #1
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	f200 808b 	bhi.w	80055cc <_dtoa_r+0x304>
 80054b6:	e8df f003 	tbb	[pc, r3]
 80054ba:	4f2d      	.short	0x4f2d
 80054bc:	5b4d      	.short	0x5b4d
 80054be:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054c2:	441c      	add	r4, r3
 80054c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	bfc3      	ittte	gt
 80054cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054d0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054d4:	fa09 f303 	lslgt.w	r3, r9, r3
 80054d8:	f1c3 0320 	rsble	r3, r3, #32
 80054dc:	bfc6      	itte	gt
 80054de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054e2:	4318      	orrgt	r0, r3
 80054e4:	fa06 f003 	lslle.w	r0, r6, r3
 80054e8:	f7fa ff7c 	bl	80003e4 <__aeabi_ui2d>
 80054ec:	2301      	movs	r3, #1
 80054ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054f2:	3c01      	subs	r4, #1
 80054f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80054f6:	e770      	b.n	80053da <_dtoa_r+0x112>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e7b3      	b.n	8005464 <_dtoa_r+0x19c>
 80054fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80054fe:	e7b2      	b.n	8005466 <_dtoa_r+0x19e>
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	eba3 0309 	sub.w	r3, r3, r9
 8005506:	9306      	str	r3, [sp, #24]
 8005508:	f1c9 0300 	rsb	r3, r9, #0
 800550c:	930a      	str	r3, [sp, #40]	; 0x28
 800550e:	2300      	movs	r3, #0
 8005510:	930e      	str	r3, [sp, #56]	; 0x38
 8005512:	e7bf      	b.n	8005494 <_dtoa_r+0x1cc>
 8005514:	2300      	movs	r3, #0
 8005516:	930b      	str	r3, [sp, #44]	; 0x2c
 8005518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800551a:	2b00      	cmp	r3, #0
 800551c:	dc59      	bgt.n	80055d2 <_dtoa_r+0x30a>
 800551e:	f04f 0b01 	mov.w	fp, #1
 8005522:	465b      	mov	r3, fp
 8005524:	f8cd b008 	str.w	fp, [sp, #8]
 8005528:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800552c:	2200      	movs	r2, #0
 800552e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005530:	6042      	str	r2, [r0, #4]
 8005532:	2204      	movs	r2, #4
 8005534:	f102 0614 	add.w	r6, r2, #20
 8005538:	429e      	cmp	r6, r3
 800553a:	6841      	ldr	r1, [r0, #4]
 800553c:	d94f      	bls.n	80055de <_dtoa_r+0x316>
 800553e:	4628      	mov	r0, r5
 8005540:	f000 fcdc 	bl	8005efc <_Balloc>
 8005544:	9008      	str	r0, [sp, #32]
 8005546:	2800      	cmp	r0, #0
 8005548:	d14d      	bne.n	80055e6 <_dtoa_r+0x31e>
 800554a:	4602      	mov	r2, r0
 800554c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005550:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <_dtoa_r+0x300>)
 8005552:	e6cd      	b.n	80052f0 <_dtoa_r+0x28>
 8005554:	2301      	movs	r3, #1
 8005556:	e7de      	b.n	8005516 <_dtoa_r+0x24e>
 8005558:	2300      	movs	r3, #0
 800555a:	930b      	str	r3, [sp, #44]	; 0x2c
 800555c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800555e:	eb09 0b03 	add.w	fp, r9, r3
 8005562:	f10b 0301 	add.w	r3, fp, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	bfb8      	it	lt
 800556c:	2301      	movlt	r3, #1
 800556e:	e7dd      	b.n	800552c <_dtoa_r+0x264>
 8005570:	2301      	movs	r3, #1
 8005572:	e7f2      	b.n	800555a <_dtoa_r+0x292>
 8005574:	2401      	movs	r4, #1
 8005576:	2300      	movs	r3, #0
 8005578:	940b      	str	r4, [sp, #44]	; 0x2c
 800557a:	9322      	str	r3, [sp, #136]	; 0x88
 800557c:	f04f 3bff 	mov.w	fp, #4294967295
 8005580:	2200      	movs	r2, #0
 8005582:	2312      	movs	r3, #18
 8005584:	f8cd b008 	str.w	fp, [sp, #8]
 8005588:	9223      	str	r2, [sp, #140]	; 0x8c
 800558a:	e7cf      	b.n	800552c <_dtoa_r+0x264>
 800558c:	f3af 8000 	nop.w
 8005590:	636f4361 	.word	0x636f4361
 8005594:	3fd287a7 	.word	0x3fd287a7
 8005598:	8b60c8b3 	.word	0x8b60c8b3
 800559c:	3fc68a28 	.word	0x3fc68a28
 80055a0:	509f79fb 	.word	0x509f79fb
 80055a4:	3fd34413 	.word	0x3fd34413
 80055a8:	080077d5 	.word	0x080077d5
 80055ac:	080077ec 	.word	0x080077ec
 80055b0:	7ff00000 	.word	0x7ff00000
 80055b4:	080077d1 	.word	0x080077d1
 80055b8:	080077c8 	.word	0x080077c8
 80055bc:	080077a5 	.word	0x080077a5
 80055c0:	3ff80000 	.word	0x3ff80000
 80055c4:	080078e8 	.word	0x080078e8
 80055c8:	0800784b 	.word	0x0800784b
 80055cc:	2301      	movs	r3, #1
 80055ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80055d0:	e7d4      	b.n	800557c <_dtoa_r+0x2b4>
 80055d2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80055d6:	465b      	mov	r3, fp
 80055d8:	f8cd b008 	str.w	fp, [sp, #8]
 80055dc:	e7a6      	b.n	800552c <_dtoa_r+0x264>
 80055de:	3101      	adds	r1, #1
 80055e0:	6041      	str	r1, [r0, #4]
 80055e2:	0052      	lsls	r2, r2, #1
 80055e4:	e7a6      	b.n	8005534 <_dtoa_r+0x26c>
 80055e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055e8:	9a08      	ldr	r2, [sp, #32]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	9b02      	ldr	r3, [sp, #8]
 80055ee:	2b0e      	cmp	r3, #14
 80055f0:	f200 80a8 	bhi.w	8005744 <_dtoa_r+0x47c>
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	f000 80a5 	beq.w	8005744 <_dtoa_r+0x47c>
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	dd34      	ble.n	800566a <_dtoa_r+0x3a2>
 8005600:	4a9a      	ldr	r2, [pc, #616]	; (800586c <_dtoa_r+0x5a4>)
 8005602:	f009 030f 	and.w	r3, r9, #15
 8005606:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800560a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800560e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005612:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005616:	ea4f 1429 	mov.w	r4, r9, asr #4
 800561a:	d016      	beq.n	800564a <_dtoa_r+0x382>
 800561c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005620:	4b93      	ldr	r3, [pc, #588]	; (8005870 <_dtoa_r+0x5a8>)
 8005622:	2703      	movs	r7, #3
 8005624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005628:	f7fb f880 	bl	800072c <__aeabi_ddiv>
 800562c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005630:	f004 040f 	and.w	r4, r4, #15
 8005634:	4e8e      	ldr	r6, [pc, #568]	; (8005870 <_dtoa_r+0x5a8>)
 8005636:	b954      	cbnz	r4, 800564e <_dtoa_r+0x386>
 8005638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800563c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005640:	f7fb f874 	bl	800072c <__aeabi_ddiv>
 8005644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005648:	e029      	b.n	800569e <_dtoa_r+0x3d6>
 800564a:	2702      	movs	r7, #2
 800564c:	e7f2      	b.n	8005634 <_dtoa_r+0x36c>
 800564e:	07e1      	lsls	r1, r4, #31
 8005650:	d508      	bpl.n	8005664 <_dtoa_r+0x39c>
 8005652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800565a:	f7fa ff3d 	bl	80004d8 <__aeabi_dmul>
 800565e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005662:	3701      	adds	r7, #1
 8005664:	1064      	asrs	r4, r4, #1
 8005666:	3608      	adds	r6, #8
 8005668:	e7e5      	b.n	8005636 <_dtoa_r+0x36e>
 800566a:	f000 80a5 	beq.w	80057b8 <_dtoa_r+0x4f0>
 800566e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005672:	f1c9 0400 	rsb	r4, r9, #0
 8005676:	4b7d      	ldr	r3, [pc, #500]	; (800586c <_dtoa_r+0x5a4>)
 8005678:	f004 020f 	and.w	r2, r4, #15
 800567c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fa ff28 	bl	80004d8 <__aeabi_dmul>
 8005688:	2702      	movs	r7, #2
 800568a:	2300      	movs	r3, #0
 800568c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005690:	4e77      	ldr	r6, [pc, #476]	; (8005870 <_dtoa_r+0x5a8>)
 8005692:	1124      	asrs	r4, r4, #4
 8005694:	2c00      	cmp	r4, #0
 8005696:	f040 8084 	bne.w	80057a2 <_dtoa_r+0x4da>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d2      	bne.n	8005644 <_dtoa_r+0x37c>
 800569e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 808b 	beq.w	80057bc <_dtoa_r+0x4f4>
 80056a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b2:	2200      	movs	r2, #0
 80056b4:	4b6f      	ldr	r3, [pc, #444]	; (8005874 <_dtoa_r+0x5ac>)
 80056b6:	f7fb f981 	bl	80009bc <__aeabi_dcmplt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d07e      	beq.n	80057bc <_dtoa_r+0x4f4>
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d07b      	beq.n	80057bc <_dtoa_r+0x4f4>
 80056c4:	f1bb 0f00 	cmp.w	fp, #0
 80056c8:	dd38      	ble.n	800573c <_dtoa_r+0x474>
 80056ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ce:	2200      	movs	r2, #0
 80056d0:	4b69      	ldr	r3, [pc, #420]	; (8005878 <_dtoa_r+0x5b0>)
 80056d2:	f7fa ff01 	bl	80004d8 <__aeabi_dmul>
 80056d6:	465c      	mov	r4, fp
 80056d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056dc:	f109 38ff 	add.w	r8, r9, #4294967295
 80056e0:	3701      	adds	r7, #1
 80056e2:	4638      	mov	r0, r7
 80056e4:	f7fa fe8e 	bl	8000404 <__aeabi_i2d>
 80056e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ec:	f7fa fef4 	bl	80004d8 <__aeabi_dmul>
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b62      	ldr	r3, [pc, #392]	; (800587c <_dtoa_r+0x5b4>)
 80056f4:	f7fa fd3a 	bl	800016c <__adddf3>
 80056f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005700:	9611      	str	r6, [sp, #68]	; 0x44
 8005702:	2c00      	cmp	r4, #0
 8005704:	d15d      	bne.n	80057c2 <_dtoa_r+0x4fa>
 8005706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570a:	2200      	movs	r2, #0
 800570c:	4b5c      	ldr	r3, [pc, #368]	; (8005880 <_dtoa_r+0x5b8>)
 800570e:	f7fa fd2b 	bl	8000168 <__aeabi_dsub>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800571a:	4633      	mov	r3, r6
 800571c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800571e:	f7fb f96b 	bl	80009f8 <__aeabi_dcmpgt>
 8005722:	2800      	cmp	r0, #0
 8005724:	f040 829e 	bne.w	8005c64 <_dtoa_r+0x99c>
 8005728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800572c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800572e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005732:	f7fb f943 	bl	80009bc <__aeabi_dcmplt>
 8005736:	2800      	cmp	r0, #0
 8005738:	f040 8292 	bne.w	8005c60 <_dtoa_r+0x998>
 800573c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005740:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005746:	2b00      	cmp	r3, #0
 8005748:	f2c0 8153 	blt.w	80059f2 <_dtoa_r+0x72a>
 800574c:	f1b9 0f0e 	cmp.w	r9, #14
 8005750:	f300 814f 	bgt.w	80059f2 <_dtoa_r+0x72a>
 8005754:	4b45      	ldr	r3, [pc, #276]	; (800586c <_dtoa_r+0x5a4>)
 8005756:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800575a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800575e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005764:	2b00      	cmp	r3, #0
 8005766:	f280 80db 	bge.w	8005920 <_dtoa_r+0x658>
 800576a:	9b02      	ldr	r3, [sp, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f300 80d7 	bgt.w	8005920 <_dtoa_r+0x658>
 8005772:	f040 8274 	bne.w	8005c5e <_dtoa_r+0x996>
 8005776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800577a:	2200      	movs	r2, #0
 800577c:	4b40      	ldr	r3, [pc, #256]	; (8005880 <_dtoa_r+0x5b8>)
 800577e:	f7fa feab 	bl	80004d8 <__aeabi_dmul>
 8005782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005786:	f7fb f92d 	bl	80009e4 <__aeabi_dcmpge>
 800578a:	9c02      	ldr	r4, [sp, #8]
 800578c:	4626      	mov	r6, r4
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 824a 	bne.w	8005c28 <_dtoa_r+0x960>
 8005794:	2331      	movs	r3, #49	; 0x31
 8005796:	9f08      	ldr	r7, [sp, #32]
 8005798:	f109 0901 	add.w	r9, r9, #1
 800579c:	f807 3b01 	strb.w	r3, [r7], #1
 80057a0:	e246      	b.n	8005c30 <_dtoa_r+0x968>
 80057a2:	07e2      	lsls	r2, r4, #31
 80057a4:	d505      	bpl.n	80057b2 <_dtoa_r+0x4ea>
 80057a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	2301      	movs	r3, #1
 80057b0:	3701      	adds	r7, #1
 80057b2:	1064      	asrs	r4, r4, #1
 80057b4:	3608      	adds	r6, #8
 80057b6:	e76d      	b.n	8005694 <_dtoa_r+0x3cc>
 80057b8:	2702      	movs	r7, #2
 80057ba:	e770      	b.n	800569e <_dtoa_r+0x3d6>
 80057bc:	46c8      	mov	r8, r9
 80057be:	9c02      	ldr	r4, [sp, #8]
 80057c0:	e78f      	b.n	80056e2 <_dtoa_r+0x41a>
 80057c2:	9908      	ldr	r1, [sp, #32]
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <_dtoa_r+0x5a4>)
 80057c6:	4421      	add	r1, r4
 80057c8:	9112      	str	r1, [sp, #72]	; 0x48
 80057ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057d8:	2900      	cmp	r1, #0
 80057da:	d055      	beq.n	8005888 <_dtoa_r+0x5c0>
 80057dc:	2000      	movs	r0, #0
 80057de:	4929      	ldr	r1, [pc, #164]	; (8005884 <_dtoa_r+0x5bc>)
 80057e0:	f7fa ffa4 	bl	800072c <__aeabi_ddiv>
 80057e4:	463b      	mov	r3, r7
 80057e6:	4632      	mov	r2, r6
 80057e8:	f7fa fcbe 	bl	8000168 <__aeabi_dsub>
 80057ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057f0:	9f08      	ldr	r7, [sp, #32]
 80057f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f6:	f7fb f91f 	bl	8000a38 <__aeabi_d2iz>
 80057fa:	4604      	mov	r4, r0
 80057fc:	f7fa fe02 	bl	8000404 <__aeabi_i2d>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005808:	f7fa fcae 	bl	8000168 <__aeabi_dsub>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	3430      	adds	r4, #48	; 0x30
 8005812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800581a:	f807 4b01 	strb.w	r4, [r7], #1
 800581e:	f7fb f8cd 	bl	80009bc <__aeabi_dcmplt>
 8005822:	2800      	cmp	r0, #0
 8005824:	d174      	bne.n	8005910 <_dtoa_r+0x648>
 8005826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582a:	2000      	movs	r0, #0
 800582c:	4911      	ldr	r1, [pc, #68]	; (8005874 <_dtoa_r+0x5ac>)
 800582e:	f7fa fc9b 	bl	8000168 <__aeabi_dsub>
 8005832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005836:	f7fb f8c1 	bl	80009bc <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	f040 80b6 	bne.w	80059ac <_dtoa_r+0x6e4>
 8005840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005842:	429f      	cmp	r7, r3
 8005844:	f43f af7a 	beq.w	800573c <_dtoa_r+0x474>
 8005848:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584c:	2200      	movs	r2, #0
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <_dtoa_r+0x5b0>)
 8005850:	f7fa fe42 	bl	80004d8 <__aeabi_dmul>
 8005854:	2200      	movs	r2, #0
 8005856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800585a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <_dtoa_r+0x5b0>)
 8005860:	f7fa fe3a 	bl	80004d8 <__aeabi_dmul>
 8005864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005868:	e7c3      	b.n	80057f2 <_dtoa_r+0x52a>
 800586a:	bf00      	nop
 800586c:	080078e8 	.word	0x080078e8
 8005870:	080078c0 	.word	0x080078c0
 8005874:	3ff00000 	.word	0x3ff00000
 8005878:	40240000 	.word	0x40240000
 800587c:	401c0000 	.word	0x401c0000
 8005880:	40140000 	.word	0x40140000
 8005884:	3fe00000 	.word	0x3fe00000
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fa fe24 	bl	80004d8 <__aeabi_dmul>
 8005890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005892:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005896:	9c08      	ldr	r4, [sp, #32]
 8005898:	9314      	str	r3, [sp, #80]	; 0x50
 800589a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800589e:	f7fb f8cb 	bl	8000a38 <__aeabi_d2iz>
 80058a2:	9015      	str	r0, [sp, #84]	; 0x54
 80058a4:	f7fa fdae 	bl	8000404 <__aeabi_i2d>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058b0:	f7fa fc5a 	bl	8000168 <__aeabi_dsub>
 80058b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058b6:	4606      	mov	r6, r0
 80058b8:	3330      	adds	r3, #48	; 0x30
 80058ba:	f804 3b01 	strb.w	r3, [r4], #1
 80058be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058c0:	460f      	mov	r7, r1
 80058c2:	429c      	cmp	r4, r3
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	d124      	bne.n	8005914 <_dtoa_r+0x64c>
 80058ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058ce:	4bb3      	ldr	r3, [pc, #716]	; (8005b9c <_dtoa_r+0x8d4>)
 80058d0:	f7fa fc4c 	bl	800016c <__adddf3>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fb f88c 	bl	80009f8 <__aeabi_dcmpgt>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d162      	bne.n	80059aa <_dtoa_r+0x6e2>
 80058e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058e8:	2000      	movs	r0, #0
 80058ea:	49ac      	ldr	r1, [pc, #688]	; (8005b9c <_dtoa_r+0x8d4>)
 80058ec:	f7fa fc3c 	bl	8000168 <__aeabi_dsub>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f7fb f860 	bl	80009bc <__aeabi_dcmplt>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f43f af1d 	beq.w	800573c <_dtoa_r+0x474>
 8005902:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005904:	1e7b      	subs	r3, r7, #1
 8005906:	9314      	str	r3, [sp, #80]	; 0x50
 8005908:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d0f8      	beq.n	8005902 <_dtoa_r+0x63a>
 8005910:	46c1      	mov	r9, r8
 8005912:	e03a      	b.n	800598a <_dtoa_r+0x6c2>
 8005914:	4ba2      	ldr	r3, [pc, #648]	; (8005ba0 <_dtoa_r+0x8d8>)
 8005916:	f7fa fddf 	bl	80004d8 <__aeabi_dmul>
 800591a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800591e:	e7bc      	b.n	800589a <_dtoa_r+0x5d2>
 8005920:	9f08      	ldr	r7, [sp, #32]
 8005922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592a:	f7fa feff 	bl	800072c <__aeabi_ddiv>
 800592e:	f7fb f883 	bl	8000a38 <__aeabi_d2iz>
 8005932:	4604      	mov	r4, r0
 8005934:	f7fa fd66 	bl	8000404 <__aeabi_i2d>
 8005938:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005944:	460b      	mov	r3, r1
 8005946:	4602      	mov	r2, r0
 8005948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800594c:	f7fa fc0c 	bl	8000168 <__aeabi_dsub>
 8005950:	f807 6b01 	strb.w	r6, [r7], #1
 8005954:	9e08      	ldr	r6, [sp, #32]
 8005956:	9b02      	ldr	r3, [sp, #8]
 8005958:	1bbe      	subs	r6, r7, r6
 800595a:	42b3      	cmp	r3, r6
 800595c:	d13a      	bne.n	80059d4 <_dtoa_r+0x70c>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	f7fa fc03 	bl	800016c <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800596e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005972:	f7fb f841 	bl	80009f8 <__aeabi_dcmpgt>
 8005976:	bb58      	cbnz	r0, 80059d0 <_dtoa_r+0x708>
 8005978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005980:	f7fb f812 	bl	80009a8 <__aeabi_dcmpeq>
 8005984:	b108      	cbz	r0, 800598a <_dtoa_r+0x6c2>
 8005986:	07e1      	lsls	r1, r4, #31
 8005988:	d422      	bmi.n	80059d0 <_dtoa_r+0x708>
 800598a:	4628      	mov	r0, r5
 800598c:	4651      	mov	r1, sl
 800598e:	f000 faf5 	bl	8005f7c <_Bfree>
 8005992:	2300      	movs	r3, #0
 8005994:	703b      	strb	r3, [r7, #0]
 8005996:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005998:	f109 0001 	add.w	r0, r9, #1
 800599c:	6018      	str	r0, [r3, #0]
 800599e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f43f acdf 	beq.w	8005364 <_dtoa_r+0x9c>
 80059a6:	601f      	str	r7, [r3, #0]
 80059a8:	e4dc      	b.n	8005364 <_dtoa_r+0x9c>
 80059aa:	4627      	mov	r7, r4
 80059ac:	463b      	mov	r3, r7
 80059ae:	461f      	mov	r7, r3
 80059b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059b4:	2a39      	cmp	r2, #57	; 0x39
 80059b6:	d107      	bne.n	80059c8 <_dtoa_r+0x700>
 80059b8:	9a08      	ldr	r2, [sp, #32]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d1f7      	bne.n	80059ae <_dtoa_r+0x6e6>
 80059be:	2230      	movs	r2, #48	; 0x30
 80059c0:	9908      	ldr	r1, [sp, #32]
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	700a      	strb	r2, [r1, #0]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	3201      	adds	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e79f      	b.n	8005910 <_dtoa_r+0x648>
 80059d0:	46c8      	mov	r8, r9
 80059d2:	e7eb      	b.n	80059ac <_dtoa_r+0x6e4>
 80059d4:	2200      	movs	r2, #0
 80059d6:	4b72      	ldr	r3, [pc, #456]	; (8005ba0 <_dtoa_r+0x8d8>)
 80059d8:	f7fa fd7e 	bl	80004d8 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2300      	movs	r3, #0
 80059e8:	f7fa ffde 	bl	80009a8 <__aeabi_dcmpeq>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d098      	beq.n	8005922 <_dtoa_r+0x65a>
 80059f0:	e7cb      	b.n	800598a <_dtoa_r+0x6c2>
 80059f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f000 80cd 	beq.w	8005b94 <_dtoa_r+0x8cc>
 80059fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059fc:	2a01      	cmp	r2, #1
 80059fe:	f300 80af 	bgt.w	8005b60 <_dtoa_r+0x898>
 8005a02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	f000 80a7 	beq.w	8005b58 <_dtoa_r+0x890>
 8005a0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a10:	9f06      	ldr	r7, [sp, #24]
 8005a12:	9a06      	ldr	r2, [sp, #24]
 8005a14:	2101      	movs	r1, #1
 8005a16:	441a      	add	r2, r3
 8005a18:	9206      	str	r2, [sp, #24]
 8005a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	441a      	add	r2, r3
 8005a20:	9209      	str	r2, [sp, #36]	; 0x24
 8005a22:	f000 fb65 	bl	80060f0 <__i2b>
 8005a26:	4606      	mov	r6, r0
 8005a28:	2f00      	cmp	r7, #0
 8005a2a:	dd0c      	ble.n	8005a46 <_dtoa_r+0x77e>
 8005a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dd09      	ble.n	8005a46 <_dtoa_r+0x77e>
 8005a32:	42bb      	cmp	r3, r7
 8005a34:	bfa8      	it	ge
 8005a36:	463b      	movge	r3, r7
 8005a38:	9a06      	ldr	r2, [sp, #24]
 8005a3a:	1aff      	subs	r7, r7, r3
 8005a3c:	1ad2      	subs	r2, r2, r3
 8005a3e:	9206      	str	r2, [sp, #24]
 8005a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a48:	b1f3      	cbz	r3, 8005a88 <_dtoa_r+0x7c0>
 8005a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80a9 	beq.w	8005ba4 <_dtoa_r+0x8dc>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	dd10      	ble.n	8005a78 <_dtoa_r+0x7b0>
 8005a56:	4631      	mov	r1, r6
 8005a58:	4622      	mov	r2, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f000 fc02 	bl	8006264 <__pow5mult>
 8005a60:	4652      	mov	r2, sl
 8005a62:	4601      	mov	r1, r0
 8005a64:	4606      	mov	r6, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fb58 	bl	800611c <__multiply>
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4651      	mov	r1, sl
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 fa83 	bl	8005f7c <_Bfree>
 8005a76:	46c2      	mov	sl, r8
 8005a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a7a:	1b1a      	subs	r2, r3, r4
 8005a7c:	d004      	beq.n	8005a88 <_dtoa_r+0x7c0>
 8005a7e:	4651      	mov	r1, sl
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 fbef 	bl	8006264 <__pow5mult>
 8005a86:	4682      	mov	sl, r0
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f000 fb30 	bl	80060f0 <__i2b>
 8005a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a92:	4604      	mov	r4, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f340 8087 	ble.w	8005ba8 <_dtoa_r+0x8e0>
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fbe0 	bl	8006264 <__pow5mult>
 8005aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f340 8080 	ble.w	8005bae <_dtoa_r+0x8e6>
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ab8:	6918      	ldr	r0, [r3, #16]
 8005aba:	f000 facb 	bl	8006054 <__hi0bits>
 8005abe:	f1c0 0020 	rsb	r0, r0, #32
 8005ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac4:	4418      	add	r0, r3
 8005ac6:	f010 001f 	ands.w	r0, r0, #31
 8005aca:	f000 8092 	beq.w	8005bf2 <_dtoa_r+0x92a>
 8005ace:	f1c0 0320 	rsb	r3, r0, #32
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	f340 808a 	ble.w	8005bec <_dtoa_r+0x924>
 8005ad8:	f1c0 001c 	rsb	r0, r0, #28
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	4407      	add	r7, r0
 8005ae0:	4403      	add	r3, r0
 8005ae2:	9306      	str	r3, [sp, #24]
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	4403      	add	r3, r0
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	9b06      	ldr	r3, [sp, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd05      	ble.n	8005afc <_dtoa_r+0x834>
 8005af0:	4651      	mov	r1, sl
 8005af2:	461a      	mov	r2, r3
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 fc0f 	bl	8006318 <__lshift>
 8005afa:	4682      	mov	sl, r0
 8005afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	dd05      	ble.n	8005b0e <_dtoa_r+0x846>
 8005b02:	4621      	mov	r1, r4
 8005b04:	461a      	mov	r2, r3
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 fc06 	bl	8006318 <__lshift>
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d070      	beq.n	8005bf6 <_dtoa_r+0x92e>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4650      	mov	r0, sl
 8005b18:	f000 fc6a 	bl	80063f0 <__mcmp>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	da6a      	bge.n	8005bf6 <_dtoa_r+0x92e>
 8005b20:	2300      	movs	r3, #0
 8005b22:	4651      	mov	r1, sl
 8005b24:	220a      	movs	r2, #10
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fa4a 	bl	8005fc0 <__multadd>
 8005b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b2e:	4682      	mov	sl, r0
 8005b30:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8193 	beq.w	8005e60 <_dtoa_r+0xb98>
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	220a      	movs	r2, #10
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 fa3d 	bl	8005fc0 <__multadd>
 8005b46:	f1bb 0f00 	cmp.w	fp, #0
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	f300 8093 	bgt.w	8005c76 <_dtoa_r+0x9ae>
 8005b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	dc57      	bgt.n	8005c06 <_dtoa_r+0x93e>
 8005b56:	e08e      	b.n	8005c76 <_dtoa_r+0x9ae>
 8005b58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b5e:	e756      	b.n	8005a0e <_dtoa_r+0x746>
 8005b60:	9b02      	ldr	r3, [sp, #8]
 8005b62:	1e5c      	subs	r4, r3, #1
 8005b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b66:	42a3      	cmp	r3, r4
 8005b68:	bfb7      	itett	lt
 8005b6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b6c:	1b1c      	subge	r4, r3, r4
 8005b6e:	1ae2      	sublt	r2, r4, r3
 8005b70:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b72:	bfbe      	ittt	lt
 8005b74:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b76:	189b      	addlt	r3, r3, r2
 8005b78:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b7a:	9b02      	ldr	r3, [sp, #8]
 8005b7c:	bfb8      	it	lt
 8005b7e:	2400      	movlt	r4, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbb      	ittet	lt
 8005b84:	9b06      	ldrlt	r3, [sp, #24]
 8005b86:	9a02      	ldrlt	r2, [sp, #8]
 8005b88:	9f06      	ldrge	r7, [sp, #24]
 8005b8a:	1a9f      	sublt	r7, r3, r2
 8005b8c:	bfac      	ite	ge
 8005b8e:	9b02      	ldrge	r3, [sp, #8]
 8005b90:	2300      	movlt	r3, #0
 8005b92:	e73e      	b.n	8005a12 <_dtoa_r+0x74a>
 8005b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b96:	9f06      	ldr	r7, [sp, #24]
 8005b98:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b9a:	e745      	b.n	8005a28 <_dtoa_r+0x760>
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	40240000 	.word	0x40240000
 8005ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ba6:	e76a      	b.n	8005a7e <_dtoa_r+0x7b6>
 8005ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	dc19      	bgt.n	8005be2 <_dtoa_r+0x91a>
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	b9bb      	cbnz	r3, 8005be2 <_dtoa_r+0x91a>
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb8:	b99b      	cbnz	r3, 8005be2 <_dtoa_r+0x91a>
 8005bba:	9b05      	ldr	r3, [sp, #20]
 8005bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc0:	0d1b      	lsrs	r3, r3, #20
 8005bc2:	051b      	lsls	r3, r3, #20
 8005bc4:	b183      	cbz	r3, 8005be8 <_dtoa_r+0x920>
 8005bc6:	f04f 0801 	mov.w	r8, #1
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	9306      	str	r3, [sp, #24]
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f47f af6a 	bne.w	8005ab2 <_dtoa_r+0x7ea>
 8005bde:	2001      	movs	r0, #1
 8005be0:	e76f      	b.n	8005ac2 <_dtoa_r+0x7fa>
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	e7f6      	b.n	8005bd6 <_dtoa_r+0x90e>
 8005be8:	4698      	mov	r8, r3
 8005bea:	e7f4      	b.n	8005bd6 <_dtoa_r+0x90e>
 8005bec:	f43f af7d 	beq.w	8005aea <_dtoa_r+0x822>
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	301c      	adds	r0, #28
 8005bf4:	e772      	b.n	8005adc <_dtoa_r+0x814>
 8005bf6:	9b02      	ldr	r3, [sp, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	dc36      	bgt.n	8005c6a <_dtoa_r+0x9a2>
 8005bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	dd33      	ble.n	8005c6a <_dtoa_r+0x9a2>
 8005c02:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c06:	f1bb 0f00 	cmp.w	fp, #0
 8005c0a:	d10d      	bne.n	8005c28 <_dtoa_r+0x960>
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	465b      	mov	r3, fp
 8005c10:	2205      	movs	r2, #5
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f9d4 	bl	8005fc0 <__multadd>
 8005c18:	4601      	mov	r1, r0
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4650      	mov	r0, sl
 8005c1e:	f000 fbe7 	bl	80063f0 <__mcmp>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f73f adb6 	bgt.w	8005794 <_dtoa_r+0x4cc>
 8005c28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c2a:	9f08      	ldr	r7, [sp, #32]
 8005c2c:	ea6f 0903 	mvn.w	r9, r3
 8005c30:	f04f 0800 	mov.w	r8, #0
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f9a0 	bl	8005f7c <_Bfree>
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	f43f aea4 	beq.w	800598a <_dtoa_r+0x6c2>
 8005c42:	f1b8 0f00 	cmp.w	r8, #0
 8005c46:	d005      	beq.n	8005c54 <_dtoa_r+0x98c>
 8005c48:	45b0      	cmp	r8, r6
 8005c4a:	d003      	beq.n	8005c54 <_dtoa_r+0x98c>
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f994 	bl	8005f7c <_Bfree>
 8005c54:	4631      	mov	r1, r6
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 f990 	bl	8005f7c <_Bfree>
 8005c5c:	e695      	b.n	800598a <_dtoa_r+0x6c2>
 8005c5e:	2400      	movs	r4, #0
 8005c60:	4626      	mov	r6, r4
 8005c62:	e7e1      	b.n	8005c28 <_dtoa_r+0x960>
 8005c64:	46c1      	mov	r9, r8
 8005c66:	4626      	mov	r6, r4
 8005c68:	e594      	b.n	8005794 <_dtoa_r+0x4cc>
 8005c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80fc 	beq.w	8005e6e <_dtoa_r+0xba6>
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	dd05      	ble.n	8005c86 <_dtoa_r+0x9be>
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	463a      	mov	r2, r7
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 fb4a 	bl	8006318 <__lshift>
 8005c84:	4606      	mov	r6, r0
 8005c86:	f1b8 0f00 	cmp.w	r8, #0
 8005c8a:	d05c      	beq.n	8005d46 <_dtoa_r+0xa7e>
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	6871      	ldr	r1, [r6, #4]
 8005c90:	f000 f934 	bl	8005efc <_Balloc>
 8005c94:	4607      	mov	r7, r0
 8005c96:	b928      	cbnz	r0, 8005ca4 <_dtoa_r+0x9dc>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c9e:	4b7e      	ldr	r3, [pc, #504]	; (8005e98 <_dtoa_r+0xbd0>)
 8005ca0:	f7ff bb26 	b.w	80052f0 <_dtoa_r+0x28>
 8005ca4:	6932      	ldr	r2, [r6, #16]
 8005ca6:	f106 010c 	add.w	r1, r6, #12
 8005caa:	3202      	adds	r2, #2
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	300c      	adds	r0, #12
 8005cb0:	f000 f90a 	bl	8005ec8 <memcpy>
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fb2d 	bl	8006318 <__lshift>
 8005cbe:	46b0      	mov	r8, r6
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	9b08      	ldr	r3, [sp, #32]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	9302      	str	r3, [sp, #8]
 8005cc8:	9b08      	ldr	r3, [sp, #32]
 8005cca:	445b      	add	r3, fp
 8005ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4650      	mov	r0, sl
 8005cdc:	f103 3bff 	add.w	fp, r3, #4294967295
 8005ce0:	f7ff fa64 	bl	80051ac <quorem>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	3330      	adds	r3, #48	; 0x30
 8005cea:	9004      	str	r0, [sp, #16]
 8005cec:	4650      	mov	r0, sl
 8005cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf0:	f000 fb7e 	bl	80063f0 <__mcmp>
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	9006      	str	r0, [sp, #24]
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 fb94 	bl	8006428 <__mdiff>
 8005d00:	68c2      	ldr	r2, [r0, #12]
 8005d02:	4607      	mov	r7, r0
 8005d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d06:	bb02      	cbnz	r2, 8005d4a <_dtoa_r+0xa82>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	f000 fb70 	bl	80063f0 <__mcmp>
 8005d10:	4602      	mov	r2, r0
 8005d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d14:	4639      	mov	r1, r7
 8005d16:	4628      	mov	r0, r5
 8005d18:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d1c:	f000 f92e 	bl	8005f7c <_Bfree>
 8005d20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d24:	9f02      	ldr	r7, [sp, #8]
 8005d26:	ea43 0102 	orr.w	r1, r3, r2
 8005d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d30:	d10d      	bne.n	8005d4e <_dtoa_r+0xa86>
 8005d32:	2b39      	cmp	r3, #57	; 0x39
 8005d34:	d027      	beq.n	8005d86 <_dtoa_r+0xabe>
 8005d36:	9a06      	ldr	r2, [sp, #24]
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	dd01      	ble.n	8005d40 <_dtoa_r+0xa78>
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	3331      	adds	r3, #49	; 0x31
 8005d40:	f88b 3000 	strb.w	r3, [fp]
 8005d44:	e776      	b.n	8005c34 <_dtoa_r+0x96c>
 8005d46:	4630      	mov	r0, r6
 8005d48:	e7b9      	b.n	8005cbe <_dtoa_r+0x9f6>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	e7e2      	b.n	8005d14 <_dtoa_r+0xa4c>
 8005d4e:	9906      	ldr	r1, [sp, #24]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	db04      	blt.n	8005d5e <_dtoa_r+0xa96>
 8005d54:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d56:	4301      	orrs	r1, r0
 8005d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d5a:	4301      	orrs	r1, r0
 8005d5c:	d120      	bne.n	8005da0 <_dtoa_r+0xad8>
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	ddee      	ble.n	8005d40 <_dtoa_r+0xa78>
 8005d62:	4651      	mov	r1, sl
 8005d64:	2201      	movs	r2, #1
 8005d66:	4628      	mov	r0, r5
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	f000 fad5 	bl	8006318 <__lshift>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4682      	mov	sl, r0
 8005d72:	f000 fb3d 	bl	80063f0 <__mcmp>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	dc02      	bgt.n	8005d82 <_dtoa_r+0xaba>
 8005d7c:	d1e0      	bne.n	8005d40 <_dtoa_r+0xa78>
 8005d7e:	07da      	lsls	r2, r3, #31
 8005d80:	d5de      	bpl.n	8005d40 <_dtoa_r+0xa78>
 8005d82:	2b39      	cmp	r3, #57	; 0x39
 8005d84:	d1da      	bne.n	8005d3c <_dtoa_r+0xa74>
 8005d86:	2339      	movs	r3, #57	; 0x39
 8005d88:	f88b 3000 	strb.w	r3, [fp]
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	461f      	mov	r7, r3
 8005d90:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	2a39      	cmp	r2, #57	; 0x39
 8005d98:	d050      	beq.n	8005e3c <_dtoa_r+0xb74>
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e749      	b.n	8005c34 <_dtoa_r+0x96c>
 8005da0:	2a00      	cmp	r2, #0
 8005da2:	dd03      	ble.n	8005dac <_dtoa_r+0xae4>
 8005da4:	2b39      	cmp	r3, #57	; 0x39
 8005da6:	d0ee      	beq.n	8005d86 <_dtoa_r+0xabe>
 8005da8:	3301      	adds	r3, #1
 8005daa:	e7c9      	b.n	8005d40 <_dtoa_r+0xa78>
 8005dac:	9a02      	ldr	r2, [sp, #8]
 8005dae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005db0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005db4:	428a      	cmp	r2, r1
 8005db6:	d02a      	beq.n	8005e0e <_dtoa_r+0xb46>
 8005db8:	4651      	mov	r1, sl
 8005dba:	2300      	movs	r3, #0
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f8fe 	bl	8005fc0 <__multadd>
 8005dc4:	45b0      	cmp	r8, r6
 8005dc6:	4682      	mov	sl, r0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	f04f 020a 	mov.w	r2, #10
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	d107      	bne.n	8005de6 <_dtoa_r+0xb1e>
 8005dd6:	f000 f8f3 	bl	8005fc0 <__multadd>
 8005dda:	4680      	mov	r8, r0
 8005ddc:	4606      	mov	r6, r0
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	3301      	adds	r3, #1
 8005de2:	9302      	str	r3, [sp, #8]
 8005de4:	e777      	b.n	8005cd6 <_dtoa_r+0xa0e>
 8005de6:	f000 f8eb 	bl	8005fc0 <__multadd>
 8005dea:	4631      	mov	r1, r6
 8005dec:	4680      	mov	r8, r0
 8005dee:	2300      	movs	r3, #0
 8005df0:	220a      	movs	r2, #10
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f8e4 	bl	8005fc0 <__multadd>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	e7f0      	b.n	8005dde <_dtoa_r+0xb16>
 8005dfc:	f1bb 0f00 	cmp.w	fp, #0
 8005e00:	bfcc      	ite	gt
 8005e02:	465f      	movgt	r7, fp
 8005e04:	2701      	movle	r7, #1
 8005e06:	f04f 0800 	mov.w	r8, #0
 8005e0a:	9a08      	ldr	r2, [sp, #32]
 8005e0c:	4417      	add	r7, r2
 8005e0e:	4651      	mov	r1, sl
 8005e10:	2201      	movs	r2, #1
 8005e12:	4628      	mov	r0, r5
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	f000 fa7f 	bl	8006318 <__lshift>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	f000 fae7 	bl	80063f0 <__mcmp>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	dcb2      	bgt.n	8005d8c <_dtoa_r+0xac4>
 8005e26:	d102      	bne.n	8005e2e <_dtoa_r+0xb66>
 8005e28:	9b02      	ldr	r3, [sp, #8]
 8005e2a:	07db      	lsls	r3, r3, #31
 8005e2c:	d4ae      	bmi.n	8005d8c <_dtoa_r+0xac4>
 8005e2e:	463b      	mov	r3, r7
 8005e30:	461f      	mov	r7, r3
 8005e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e36:	2a30      	cmp	r2, #48	; 0x30
 8005e38:	d0fa      	beq.n	8005e30 <_dtoa_r+0xb68>
 8005e3a:	e6fb      	b.n	8005c34 <_dtoa_r+0x96c>
 8005e3c:	9a08      	ldr	r2, [sp, #32]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d1a5      	bne.n	8005d8e <_dtoa_r+0xac6>
 8005e42:	2331      	movs	r3, #49	; 0x31
 8005e44:	f109 0901 	add.w	r9, r9, #1
 8005e48:	7013      	strb	r3, [r2, #0]
 8005e4a:	e6f3      	b.n	8005c34 <_dtoa_r+0x96c>
 8005e4c:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <_dtoa_r+0xbd4>)
 8005e4e:	f7ff baa7 	b.w	80053a0 <_dtoa_r+0xd8>
 8005e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f47f aa80 	bne.w	800535a <_dtoa_r+0x92>
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <_dtoa_r+0xbd8>)
 8005e5c:	f7ff baa0 	b.w	80053a0 <_dtoa_r+0xd8>
 8005e60:	f1bb 0f00 	cmp.w	fp, #0
 8005e64:	dc03      	bgt.n	8005e6e <_dtoa_r+0xba6>
 8005e66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	f73f aecc 	bgt.w	8005c06 <_dtoa_r+0x93e>
 8005e6e:	9f08      	ldr	r7, [sp, #32]
 8005e70:	4621      	mov	r1, r4
 8005e72:	4650      	mov	r0, sl
 8005e74:	f7ff f99a 	bl	80051ac <quorem>
 8005e78:	9a08      	ldr	r2, [sp, #32]
 8005e7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e7e:	f807 3b01 	strb.w	r3, [r7], #1
 8005e82:	1aba      	subs	r2, r7, r2
 8005e84:	4593      	cmp	fp, r2
 8005e86:	ddb9      	ble.n	8005dfc <_dtoa_r+0xb34>
 8005e88:	4651      	mov	r1, sl
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 f896 	bl	8005fc0 <__multadd>
 8005e94:	4682      	mov	sl, r0
 8005e96:	e7eb      	b.n	8005e70 <_dtoa_r+0xba8>
 8005e98:	0800784b 	.word	0x0800784b
 8005e9c:	080077a4 	.word	0x080077a4
 8005ea0:	080077c8 	.word	0x080077c8

08005ea4 <_localeconv_r>:
 8005ea4:	4800      	ldr	r0, [pc, #0]	; (8005ea8 <_localeconv_r+0x4>)
 8005ea6:	4770      	bx	lr
 8005ea8:	2000021c 	.word	0x2000021c

08005eac <memchr>:
 8005eac:	4603      	mov	r3, r0
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	b2c9      	uxtb	r1, r1
 8005eb2:	4402      	add	r2, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	d101      	bne.n	8005ebe <memchr+0x12>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e003      	b.n	8005ec6 <memchr+0x1a>
 8005ebe:	7804      	ldrb	r4, [r0, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	428c      	cmp	r4, r1
 8005ec4:	d1f6      	bne.n	8005eb4 <memchr+0x8>
 8005ec6:	bd10      	pop	{r4, pc}

08005ec8 <memcpy>:
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	4770      	bx	lr
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eda:	4291      	cmp	r1, r2
 8005edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee0:	d1f9      	bne.n	8005ed6 <memcpy+0xe>
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <__malloc_lock>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__malloc_lock+0x8>)
 8005ee6:	f000 bd26 	b.w	8006936 <__retarget_lock_acquire_recursive>
 8005eea:	bf00      	nop
 8005eec:	200006dc 	.word	0x200006dc

08005ef0 <__malloc_unlock>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__malloc_unlock+0x8>)
 8005ef2:	f000 bd21 	b.w	8006938 <__retarget_lock_release_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	200006dc 	.word	0x200006dc

08005efc <_Balloc>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f00:	4604      	mov	r4, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	b976      	cbnz	r6, 8005f24 <_Balloc+0x28>
 8005f06:	2010      	movs	r0, #16
 8005f08:	f7fe fbf0 	bl	80046ec <malloc>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f10:	b920      	cbnz	r0, 8005f1c <_Balloc+0x20>
 8005f12:	2166      	movs	r1, #102	; 0x66
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <_Balloc+0x78>)
 8005f16:	4818      	ldr	r0, [pc, #96]	; (8005f78 <_Balloc+0x7c>)
 8005f18:	f000 fcdc 	bl	80068d4 <__assert_func>
 8005f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f20:	6006      	str	r6, [r0, #0]
 8005f22:	60c6      	str	r6, [r0, #12]
 8005f24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f26:	68f3      	ldr	r3, [r6, #12]
 8005f28:	b183      	cbz	r3, 8005f4c <_Balloc+0x50>
 8005f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f32:	b9b8      	cbnz	r0, 8005f64 <_Balloc+0x68>
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f605 	lsl.w	r6, r1, r5
 8005f3a:	1d72      	adds	r2, r6, #5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	f000 fb5e 	bl	8006600 <_calloc_r>
 8005f44:	b160      	cbz	r0, 8005f60 <_Balloc+0x64>
 8005f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f4a:	e00e      	b.n	8005f6a <_Balloc+0x6e>
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fb55 	bl	8006600 <_calloc_r>
 8005f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f58:	60f0      	str	r0, [r6, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e4      	bne.n	8005f2a <_Balloc+0x2e>
 8005f60:	2000      	movs	r0, #0
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	6802      	ldr	r2, [r0, #0]
 8005f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f70:	e7f7      	b.n	8005f62 <_Balloc+0x66>
 8005f72:	bf00      	nop
 8005f74:	080077d5 	.word	0x080077d5
 8005f78:	0800785c 	.word	0x0800785c

08005f7c <_Bfree>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f80:	4605      	mov	r5, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	b976      	cbnz	r6, 8005fa4 <_Bfree+0x28>
 8005f86:	2010      	movs	r0, #16
 8005f88:	f7fe fbb0 	bl	80046ec <malloc>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6268      	str	r0, [r5, #36]	; 0x24
 8005f90:	b920      	cbnz	r0, 8005f9c <_Bfree+0x20>
 8005f92:	218a      	movs	r1, #138	; 0x8a
 8005f94:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <_Bfree+0x3c>)
 8005f96:	4809      	ldr	r0, [pc, #36]	; (8005fbc <_Bfree+0x40>)
 8005f98:	f000 fc9c 	bl	80068d4 <__assert_func>
 8005f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa0:	6006      	str	r6, [r0, #0]
 8005fa2:	60c6      	str	r6, [r0, #12]
 8005fa4:	b13c      	cbz	r4, 8005fb6 <_Bfree+0x3a>
 8005fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa8:	6862      	ldr	r2, [r4, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb0:	6021      	str	r1, [r4, #0]
 8005fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	080077d5 	.word	0x080077d5
 8005fbc:	0800785c 	.word	0x0800785c

08005fc0 <__multadd>:
 8005fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc4:	4698      	mov	r8, r3
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	690e      	ldr	r6, [r1, #16]
 8005fcc:	4607      	mov	r7, r0
 8005fce:	f101 0014 	add.w	r0, r1, #20
 8005fd2:	6805      	ldr	r5, [r0, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b2a9      	uxth	r1, r5
 8005fd8:	fb02 8101 	mla	r1, r2, r1, r8
 8005fdc:	0c2d      	lsrs	r5, r5, #16
 8005fde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fe2:	fb02 c505 	mla	r5, r2, r5, ip
 8005fe6:	b289      	uxth	r1, r1
 8005fe8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fec:	429e      	cmp	r6, r3
 8005fee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005ff2:	f840 1b04 	str.w	r1, [r0], #4
 8005ff6:	dcec      	bgt.n	8005fd2 <__multadd+0x12>
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	d022      	beq.n	8006044 <__multadd+0x84>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	42b3      	cmp	r3, r6
 8006002:	dc19      	bgt.n	8006038 <__multadd+0x78>
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	4638      	mov	r0, r7
 8006008:	3101      	adds	r1, #1
 800600a:	f7ff ff77 	bl	8005efc <_Balloc>
 800600e:	4605      	mov	r5, r0
 8006010:	b928      	cbnz	r0, 800601e <__multadd+0x5e>
 8006012:	4602      	mov	r2, r0
 8006014:	21b5      	movs	r1, #181	; 0xb5
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <__multadd+0x8c>)
 8006018:	480d      	ldr	r0, [pc, #52]	; (8006050 <__multadd+0x90>)
 800601a:	f000 fc5b 	bl	80068d4 <__assert_func>
 800601e:	6922      	ldr	r2, [r4, #16]
 8006020:	f104 010c 	add.w	r1, r4, #12
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	300c      	adds	r0, #12
 800602a:	f7ff ff4d 	bl	8005ec8 <memcpy>
 800602e:	4621      	mov	r1, r4
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ffa3 	bl	8005f7c <_Bfree>
 8006036:	462c      	mov	r4, r5
 8006038:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800603c:	3601      	adds	r6, #1
 800603e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006042:	6126      	str	r6, [r4, #16]
 8006044:	4620      	mov	r0, r4
 8006046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800604a:	bf00      	nop
 800604c:	0800784b 	.word	0x0800784b
 8006050:	0800785c 	.word	0x0800785c

08006054 <__hi0bits>:
 8006054:	0c02      	lsrs	r2, r0, #16
 8006056:	0412      	lsls	r2, r2, #16
 8006058:	4603      	mov	r3, r0
 800605a:	b9ca      	cbnz	r2, 8006090 <__hi0bits+0x3c>
 800605c:	0403      	lsls	r3, r0, #16
 800605e:	2010      	movs	r0, #16
 8006060:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006064:	bf04      	itt	eq
 8006066:	021b      	lsleq	r3, r3, #8
 8006068:	3008      	addeq	r0, #8
 800606a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800606e:	bf04      	itt	eq
 8006070:	011b      	lsleq	r3, r3, #4
 8006072:	3004      	addeq	r0, #4
 8006074:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006078:	bf04      	itt	eq
 800607a:	009b      	lsleq	r3, r3, #2
 800607c:	3002      	addeq	r0, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	db05      	blt.n	800608e <__hi0bits+0x3a>
 8006082:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006086:	f100 0001 	add.w	r0, r0, #1
 800608a:	bf08      	it	eq
 800608c:	2020      	moveq	r0, #32
 800608e:	4770      	bx	lr
 8006090:	2000      	movs	r0, #0
 8006092:	e7e5      	b.n	8006060 <__hi0bits+0xc>

08006094 <__lo0bits>:
 8006094:	6803      	ldr	r3, [r0, #0]
 8006096:	4602      	mov	r2, r0
 8006098:	f013 0007 	ands.w	r0, r3, #7
 800609c:	d00b      	beq.n	80060b6 <__lo0bits+0x22>
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d422      	bmi.n	80060e8 <__lo0bits+0x54>
 80060a2:	0798      	lsls	r0, r3, #30
 80060a4:	bf49      	itett	mi
 80060a6:	085b      	lsrmi	r3, r3, #1
 80060a8:	089b      	lsrpl	r3, r3, #2
 80060aa:	2001      	movmi	r0, #1
 80060ac:	6013      	strmi	r3, [r2, #0]
 80060ae:	bf5c      	itt	pl
 80060b0:	2002      	movpl	r0, #2
 80060b2:	6013      	strpl	r3, [r2, #0]
 80060b4:	4770      	bx	lr
 80060b6:	b299      	uxth	r1, r3
 80060b8:	b909      	cbnz	r1, 80060be <__lo0bits+0x2a>
 80060ba:	2010      	movs	r0, #16
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060c2:	bf04      	itt	eq
 80060c4:	0a1b      	lsreq	r3, r3, #8
 80060c6:	3008      	addeq	r0, #8
 80060c8:	0719      	lsls	r1, r3, #28
 80060ca:	bf04      	itt	eq
 80060cc:	091b      	lsreq	r3, r3, #4
 80060ce:	3004      	addeq	r0, #4
 80060d0:	0799      	lsls	r1, r3, #30
 80060d2:	bf04      	itt	eq
 80060d4:	089b      	lsreq	r3, r3, #2
 80060d6:	3002      	addeq	r0, #2
 80060d8:	07d9      	lsls	r1, r3, #31
 80060da:	d403      	bmi.n	80060e4 <__lo0bits+0x50>
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	f100 0001 	add.w	r0, r0, #1
 80060e2:	d003      	beq.n	80060ec <__lo0bits+0x58>
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	4770      	bx	lr
 80060e8:	2000      	movs	r0, #0
 80060ea:	4770      	bx	lr
 80060ec:	2020      	movs	r0, #32
 80060ee:	4770      	bx	lr

080060f0 <__i2b>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	460c      	mov	r4, r1
 80060f4:	2101      	movs	r1, #1
 80060f6:	f7ff ff01 	bl	8005efc <_Balloc>
 80060fa:	4602      	mov	r2, r0
 80060fc:	b928      	cbnz	r0, 800610a <__i2b+0x1a>
 80060fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006102:	4b04      	ldr	r3, [pc, #16]	; (8006114 <__i2b+0x24>)
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <__i2b+0x28>)
 8006106:	f000 fbe5 	bl	80068d4 <__assert_func>
 800610a:	2301      	movs	r3, #1
 800610c:	6144      	str	r4, [r0, #20]
 800610e:	6103      	str	r3, [r0, #16]
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop
 8006114:	0800784b 	.word	0x0800784b
 8006118:	0800785c 	.word	0x0800785c

0800611c <__multiply>:
 800611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	4614      	mov	r4, r2
 8006122:	690a      	ldr	r2, [r1, #16]
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	460d      	mov	r5, r1
 8006128:	429a      	cmp	r2, r3
 800612a:	bfbe      	ittt	lt
 800612c:	460b      	movlt	r3, r1
 800612e:	4625      	movlt	r5, r4
 8006130:	461c      	movlt	r4, r3
 8006132:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006136:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800613a:	68ab      	ldr	r3, [r5, #8]
 800613c:	6869      	ldr	r1, [r5, #4]
 800613e:	eb0a 0709 	add.w	r7, sl, r9
 8006142:	42bb      	cmp	r3, r7
 8006144:	b085      	sub	sp, #20
 8006146:	bfb8      	it	lt
 8006148:	3101      	addlt	r1, #1
 800614a:	f7ff fed7 	bl	8005efc <_Balloc>
 800614e:	b930      	cbnz	r0, 800615e <__multiply+0x42>
 8006150:	4602      	mov	r2, r0
 8006152:	f240 115d 	movw	r1, #349	; 0x15d
 8006156:	4b41      	ldr	r3, [pc, #260]	; (800625c <__multiply+0x140>)
 8006158:	4841      	ldr	r0, [pc, #260]	; (8006260 <__multiply+0x144>)
 800615a:	f000 fbbb 	bl	80068d4 <__assert_func>
 800615e:	f100 0614 	add.w	r6, r0, #20
 8006162:	4633      	mov	r3, r6
 8006164:	2200      	movs	r2, #0
 8006166:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800616a:	4543      	cmp	r3, r8
 800616c:	d31e      	bcc.n	80061ac <__multiply+0x90>
 800616e:	f105 0c14 	add.w	ip, r5, #20
 8006172:	f104 0314 	add.w	r3, r4, #20
 8006176:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800617a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800617e:	9202      	str	r2, [sp, #8]
 8006180:	ebac 0205 	sub.w	r2, ip, r5
 8006184:	3a15      	subs	r2, #21
 8006186:	f022 0203 	bic.w	r2, r2, #3
 800618a:	3204      	adds	r2, #4
 800618c:	f105 0115 	add.w	r1, r5, #21
 8006190:	458c      	cmp	ip, r1
 8006192:	bf38      	it	cc
 8006194:	2204      	movcc	r2, #4
 8006196:	9201      	str	r2, [sp, #4]
 8006198:	9a02      	ldr	r2, [sp, #8]
 800619a:	9303      	str	r3, [sp, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d808      	bhi.n	80061b2 <__multiply+0x96>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	dc55      	bgt.n	8006250 <__multiply+0x134>
 80061a4:	6107      	str	r7, [r0, #16]
 80061a6:	b005      	add	sp, #20
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	f843 2b04 	str.w	r2, [r3], #4
 80061b0:	e7db      	b.n	800616a <__multiply+0x4e>
 80061b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80061b6:	f1ba 0f00 	cmp.w	sl, #0
 80061ba:	d020      	beq.n	80061fe <__multiply+0xe2>
 80061bc:	46b1      	mov	r9, r6
 80061be:	2200      	movs	r2, #0
 80061c0:	f105 0e14 	add.w	lr, r5, #20
 80061c4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061c8:	f8d9 b000 	ldr.w	fp, [r9]
 80061cc:	b2a1      	uxth	r1, r4
 80061ce:	fa1f fb8b 	uxth.w	fp, fp
 80061d2:	fb0a b101 	mla	r1, sl, r1, fp
 80061d6:	4411      	add	r1, r2
 80061d8:	f8d9 2000 	ldr.w	r2, [r9]
 80061dc:	0c24      	lsrs	r4, r4, #16
 80061de:	0c12      	lsrs	r2, r2, #16
 80061e0:	fb0a 2404 	mla	r4, sl, r4, r2
 80061e4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061e8:	b289      	uxth	r1, r1
 80061ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061ee:	45f4      	cmp	ip, lr
 80061f0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061f4:	f849 1b04 	str.w	r1, [r9], #4
 80061f8:	d8e4      	bhi.n	80061c4 <__multiply+0xa8>
 80061fa:	9901      	ldr	r1, [sp, #4]
 80061fc:	5072      	str	r2, [r6, r1]
 80061fe:	9a03      	ldr	r2, [sp, #12]
 8006200:	3304      	adds	r3, #4
 8006202:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006206:	f1b9 0f00 	cmp.w	r9, #0
 800620a:	d01f      	beq.n	800624c <__multiply+0x130>
 800620c:	46b6      	mov	lr, r6
 800620e:	f04f 0a00 	mov.w	sl, #0
 8006212:	6834      	ldr	r4, [r6, #0]
 8006214:	f105 0114 	add.w	r1, r5, #20
 8006218:	880a      	ldrh	r2, [r1, #0]
 800621a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800621e:	b2a4      	uxth	r4, r4
 8006220:	fb09 b202 	mla	r2, r9, r2, fp
 8006224:	4492      	add	sl, r2
 8006226:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800622a:	f84e 4b04 	str.w	r4, [lr], #4
 800622e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006232:	f8be 2000 	ldrh.w	r2, [lr]
 8006236:	0c24      	lsrs	r4, r4, #16
 8006238:	fb09 2404 	mla	r4, r9, r4, r2
 800623c:	458c      	cmp	ip, r1
 800623e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006242:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006246:	d8e7      	bhi.n	8006218 <__multiply+0xfc>
 8006248:	9a01      	ldr	r2, [sp, #4]
 800624a:	50b4      	str	r4, [r6, r2]
 800624c:	3604      	adds	r6, #4
 800624e:	e7a3      	b.n	8006198 <__multiply+0x7c>
 8006250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1a5      	bne.n	80061a4 <__multiply+0x88>
 8006258:	3f01      	subs	r7, #1
 800625a:	e7a1      	b.n	80061a0 <__multiply+0x84>
 800625c:	0800784b 	.word	0x0800784b
 8006260:	0800785c 	.word	0x0800785c

08006264 <__pow5mult>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4615      	mov	r5, r2
 800626a:	f012 0203 	ands.w	r2, r2, #3
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	d007      	beq.n	8006284 <__pow5mult+0x20>
 8006274:	4c25      	ldr	r4, [pc, #148]	; (800630c <__pow5mult+0xa8>)
 8006276:	3a01      	subs	r2, #1
 8006278:	2300      	movs	r3, #0
 800627a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800627e:	f7ff fe9f 	bl	8005fc0 <__multadd>
 8006282:	4607      	mov	r7, r0
 8006284:	10ad      	asrs	r5, r5, #2
 8006286:	d03d      	beq.n	8006304 <__pow5mult+0xa0>
 8006288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800628a:	b97c      	cbnz	r4, 80062ac <__pow5mult+0x48>
 800628c:	2010      	movs	r0, #16
 800628e:	f7fe fa2d 	bl	80046ec <malloc>
 8006292:	4602      	mov	r2, r0
 8006294:	6270      	str	r0, [r6, #36]	; 0x24
 8006296:	b928      	cbnz	r0, 80062a4 <__pow5mult+0x40>
 8006298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800629c:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <__pow5mult+0xac>)
 800629e:	481d      	ldr	r0, [pc, #116]	; (8006314 <__pow5mult+0xb0>)
 80062a0:	f000 fb18 	bl	80068d4 <__assert_func>
 80062a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	60c4      	str	r4, [r0, #12]
 80062ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b4:	b94c      	cbnz	r4, 80062ca <__pow5mult+0x66>
 80062b6:	f240 2171 	movw	r1, #625	; 0x271
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ff18 	bl	80060f0 <__i2b>
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	07eb      	lsls	r3, r5, #31
 80062d0:	d50a      	bpl.n	80062e8 <__pow5mult+0x84>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4622      	mov	r2, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ff20 	bl	800611c <__multiply>
 80062dc:	4680      	mov	r8, r0
 80062de:	4639      	mov	r1, r7
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fe4b 	bl	8005f7c <_Bfree>
 80062e6:	4647      	mov	r7, r8
 80062e8:	106d      	asrs	r5, r5, #1
 80062ea:	d00b      	beq.n	8006304 <__pow5mult+0xa0>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	b938      	cbnz	r0, 8006300 <__pow5mult+0x9c>
 80062f0:	4622      	mov	r2, r4
 80062f2:	4621      	mov	r1, r4
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff ff11 	bl	800611c <__multiply>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f8c0 9000 	str.w	r9, [r0]
 8006300:	4604      	mov	r4, r0
 8006302:	e7e4      	b.n	80062ce <__pow5mult+0x6a>
 8006304:	4638      	mov	r0, r7
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	080079b0 	.word	0x080079b0
 8006310:	080077d5 	.word	0x080077d5
 8006314:	0800785c 	.word	0x0800785c

08006318 <__lshift>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	4607      	mov	r7, r0
 8006320:	4691      	mov	r9, r2
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	6849      	ldr	r1, [r1, #4]
 8006326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800632a:	68a3      	ldr	r3, [r4, #8]
 800632c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006330:	f108 0601 	add.w	r6, r8, #1
 8006334:	42b3      	cmp	r3, r6
 8006336:	db0b      	blt.n	8006350 <__lshift+0x38>
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fddf 	bl	8005efc <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b948      	cbnz	r0, 8006356 <__lshift+0x3e>
 8006342:	4602      	mov	r2, r0
 8006344:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006348:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <__lshift+0xd0>)
 800634a:	4828      	ldr	r0, [pc, #160]	; (80063ec <__lshift+0xd4>)
 800634c:	f000 fac2 	bl	80068d4 <__assert_func>
 8006350:	3101      	adds	r1, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	e7ee      	b.n	8006334 <__lshift+0x1c>
 8006356:	2300      	movs	r3, #0
 8006358:	f100 0114 	add.w	r1, r0, #20
 800635c:	f100 0210 	add.w	r2, r0, #16
 8006360:	4618      	mov	r0, r3
 8006362:	4553      	cmp	r3, sl
 8006364:	db33      	blt.n	80063ce <__lshift+0xb6>
 8006366:	6920      	ldr	r0, [r4, #16]
 8006368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	f019 091f 	ands.w	r9, r9, #31
 8006374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800637c:	d02b      	beq.n	80063d6 <__lshift+0xbe>
 800637e:	468a      	mov	sl, r1
 8006380:	2200      	movs	r2, #0
 8006382:	f1c9 0e20 	rsb	lr, r9, #32
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	fa00 f009 	lsl.w	r0, r0, r9
 800638c:	4302      	orrs	r2, r0
 800638e:	f84a 2b04 	str.w	r2, [sl], #4
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	459c      	cmp	ip, r3
 8006398:	fa22 f20e 	lsr.w	r2, r2, lr
 800639c:	d8f3      	bhi.n	8006386 <__lshift+0x6e>
 800639e:	ebac 0304 	sub.w	r3, ip, r4
 80063a2:	3b15      	subs	r3, #21
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	3304      	adds	r3, #4
 80063aa:	f104 0015 	add.w	r0, r4, #21
 80063ae:	4584      	cmp	ip, r0
 80063b0:	bf38      	it	cc
 80063b2:	2304      	movcc	r3, #4
 80063b4:	50ca      	str	r2, [r1, r3]
 80063b6:	b10a      	cbz	r2, 80063bc <__lshift+0xa4>
 80063b8:	f108 0602 	add.w	r6, r8, #2
 80063bc:	3e01      	subs	r6, #1
 80063be:	4638      	mov	r0, r7
 80063c0:	4621      	mov	r1, r4
 80063c2:	612e      	str	r6, [r5, #16]
 80063c4:	f7ff fdda 	bl	8005f7c <_Bfree>
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7c5      	b.n	8006362 <__lshift+0x4a>
 80063d6:	3904      	subs	r1, #4
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	459c      	cmp	ip, r3
 80063de:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e2:	d8f9      	bhi.n	80063d8 <__lshift+0xc0>
 80063e4:	e7ea      	b.n	80063bc <__lshift+0xa4>
 80063e6:	bf00      	nop
 80063e8:	0800784b 	.word	0x0800784b
 80063ec:	0800785c 	.word	0x0800785c

080063f0 <__mcmp>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	690a      	ldr	r2, [r1, #16]
 80063f4:	6900      	ldr	r0, [r0, #16]
 80063f6:	b530      	push	{r4, r5, lr}
 80063f8:	1a80      	subs	r0, r0, r2
 80063fa:	d10d      	bne.n	8006418 <__mcmp+0x28>
 80063fc:	3314      	adds	r3, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800640c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006410:	4295      	cmp	r5, r2
 8006412:	d002      	beq.n	800641a <__mcmp+0x2a>
 8006414:	d304      	bcc.n	8006420 <__mcmp+0x30>
 8006416:	2001      	movs	r0, #1
 8006418:	bd30      	pop	{r4, r5, pc}
 800641a:	42a3      	cmp	r3, r4
 800641c:	d3f4      	bcc.n	8006408 <__mcmp+0x18>
 800641e:	e7fb      	b.n	8006418 <__mcmp+0x28>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e7f8      	b.n	8006418 <__mcmp+0x28>
	...

08006428 <__mdiff>:
 8006428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	4606      	mov	r6, r0
 8006430:	4611      	mov	r1, r2
 8006432:	4620      	mov	r0, r4
 8006434:	4692      	mov	sl, r2
 8006436:	f7ff ffdb 	bl	80063f0 <__mcmp>
 800643a:	1e05      	subs	r5, r0, #0
 800643c:	d111      	bne.n	8006462 <__mdiff+0x3a>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd5b 	bl	8005efc <_Balloc>
 8006446:	4602      	mov	r2, r0
 8006448:	b928      	cbnz	r0, 8006456 <__mdiff+0x2e>
 800644a:	f240 2132 	movw	r1, #562	; 0x232
 800644e:	4b3c      	ldr	r3, [pc, #240]	; (8006540 <__mdiff+0x118>)
 8006450:	483c      	ldr	r0, [pc, #240]	; (8006544 <__mdiff+0x11c>)
 8006452:	f000 fa3f 	bl	80068d4 <__assert_func>
 8006456:	2301      	movs	r3, #1
 8006458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800645c:	4610      	mov	r0, r2
 800645e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	bfa4      	itt	ge
 8006464:	4653      	movge	r3, sl
 8006466:	46a2      	movge	sl, r4
 8006468:	4630      	mov	r0, r6
 800646a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800646e:	bfa6      	itte	ge
 8006470:	461c      	movge	r4, r3
 8006472:	2500      	movge	r5, #0
 8006474:	2501      	movlt	r5, #1
 8006476:	f7ff fd41 	bl	8005efc <_Balloc>
 800647a:	4602      	mov	r2, r0
 800647c:	b918      	cbnz	r0, 8006486 <__mdiff+0x5e>
 800647e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006482:	4b2f      	ldr	r3, [pc, #188]	; (8006540 <__mdiff+0x118>)
 8006484:	e7e4      	b.n	8006450 <__mdiff+0x28>
 8006486:	f100 0814 	add.w	r8, r0, #20
 800648a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800648e:	60c5      	str	r5, [r0, #12]
 8006490:	f04f 0c00 	mov.w	ip, #0
 8006494:	f10a 0514 	add.w	r5, sl, #20
 8006498:	f10a 0010 	add.w	r0, sl, #16
 800649c:	46c2      	mov	sl, r8
 800649e:	6926      	ldr	r6, [r4, #16]
 80064a0:	f104 0914 	add.w	r9, r4, #20
 80064a4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80064a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064ac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80064b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80064b4:	fa1f f18b 	uxth.w	r1, fp
 80064b8:	4461      	add	r1, ip
 80064ba:	fa1f fc83 	uxth.w	ip, r3
 80064be:	0c1b      	lsrs	r3, r3, #16
 80064c0:	eba1 010c 	sub.w	r1, r1, ip
 80064c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064cc:	b289      	uxth	r1, r1
 80064ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064d2:	454e      	cmp	r6, r9
 80064d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064d8:	f84a 3b04 	str.w	r3, [sl], #4
 80064dc:	d8e6      	bhi.n	80064ac <__mdiff+0x84>
 80064de:	1b33      	subs	r3, r6, r4
 80064e0:	3b15      	subs	r3, #21
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	3415      	adds	r4, #21
 80064e8:	3304      	adds	r3, #4
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	bf38      	it	cc
 80064ee:	2304      	movcc	r3, #4
 80064f0:	441d      	add	r5, r3
 80064f2:	4443      	add	r3, r8
 80064f4:	461e      	mov	r6, r3
 80064f6:	462c      	mov	r4, r5
 80064f8:	4574      	cmp	r4, lr
 80064fa:	d30e      	bcc.n	800651a <__mdiff+0xf2>
 80064fc:	f10e 0103 	add.w	r1, lr, #3
 8006500:	1b49      	subs	r1, r1, r5
 8006502:	f021 0103 	bic.w	r1, r1, #3
 8006506:	3d03      	subs	r5, #3
 8006508:	45ae      	cmp	lr, r5
 800650a:	bf38      	it	cc
 800650c:	2100      	movcc	r1, #0
 800650e:	4419      	add	r1, r3
 8006510:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006514:	b18b      	cbz	r3, 800653a <__mdiff+0x112>
 8006516:	6117      	str	r7, [r2, #16]
 8006518:	e7a0      	b.n	800645c <__mdiff+0x34>
 800651a:	f854 8b04 	ldr.w	r8, [r4], #4
 800651e:	fa1f f188 	uxth.w	r1, r8
 8006522:	4461      	add	r1, ip
 8006524:	1408      	asrs	r0, r1, #16
 8006526:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800652a:	b289      	uxth	r1, r1
 800652c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006534:	f846 1b04 	str.w	r1, [r6], #4
 8006538:	e7de      	b.n	80064f8 <__mdiff+0xd0>
 800653a:	3f01      	subs	r7, #1
 800653c:	e7e8      	b.n	8006510 <__mdiff+0xe8>
 800653e:	bf00      	nop
 8006540:	0800784b 	.word	0x0800784b
 8006544:	0800785c 	.word	0x0800785c

08006548 <__d2b>:
 8006548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800654c:	2101      	movs	r1, #1
 800654e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006552:	4690      	mov	r8, r2
 8006554:	461d      	mov	r5, r3
 8006556:	f7ff fcd1 	bl	8005efc <_Balloc>
 800655a:	4604      	mov	r4, r0
 800655c:	b930      	cbnz	r0, 800656c <__d2b+0x24>
 800655e:	4602      	mov	r2, r0
 8006560:	f240 310a 	movw	r1, #778	; 0x30a
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <__d2b+0xb0>)
 8006566:	4825      	ldr	r0, [pc, #148]	; (80065fc <__d2b+0xb4>)
 8006568:	f000 f9b4 	bl	80068d4 <__assert_func>
 800656c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006570:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006574:	bb2d      	cbnz	r5, 80065c2 <__d2b+0x7a>
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	f1b8 0300 	subs.w	r3, r8, #0
 800657c:	d026      	beq.n	80065cc <__d2b+0x84>
 800657e:	4668      	mov	r0, sp
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	f7ff fd87 	bl	8006094 <__lo0bits>
 8006586:	9900      	ldr	r1, [sp, #0]
 8006588:	b1f0      	cbz	r0, 80065c8 <__d2b+0x80>
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	f1c0 0320 	rsb	r3, r0, #32
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	430b      	orrs	r3, r1
 8006596:	40c2      	lsrs	r2, r0
 8006598:	6163      	str	r3, [r4, #20]
 800659a:	9201      	str	r2, [sp, #4]
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2102      	movne	r1, #2
 80065a4:	2101      	moveq	r1, #1
 80065a6:	61a3      	str	r3, [r4, #24]
 80065a8:	6121      	str	r1, [r4, #16]
 80065aa:	b1c5      	cbz	r5, 80065de <__d2b+0x96>
 80065ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065b0:	4405      	add	r5, r0
 80065b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065b6:	603d      	str	r5, [r7, #0]
 80065b8:	6030      	str	r0, [r6, #0]
 80065ba:	4620      	mov	r0, r4
 80065bc:	b002      	add	sp, #8
 80065be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c6:	e7d6      	b.n	8006576 <__d2b+0x2e>
 80065c8:	6161      	str	r1, [r4, #20]
 80065ca:	e7e7      	b.n	800659c <__d2b+0x54>
 80065cc:	a801      	add	r0, sp, #4
 80065ce:	f7ff fd61 	bl	8006094 <__lo0bits>
 80065d2:	2101      	movs	r1, #1
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	6163      	str	r3, [r4, #20]
 80065da:	3020      	adds	r0, #32
 80065dc:	e7e5      	b.n	80065aa <__d2b+0x62>
 80065de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80065e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065e6:	6038      	str	r0, [r7, #0]
 80065e8:	6918      	ldr	r0, [r3, #16]
 80065ea:	f7ff fd33 	bl	8006054 <__hi0bits>
 80065ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80065f2:	6031      	str	r1, [r6, #0]
 80065f4:	e7e1      	b.n	80065ba <__d2b+0x72>
 80065f6:	bf00      	nop
 80065f8:	0800784b 	.word	0x0800784b
 80065fc:	0800785c 	.word	0x0800785c

08006600 <_calloc_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	fb02 f501 	mul.w	r5, r2, r1
 8006606:	4629      	mov	r1, r5
 8006608:	f7fe f8e6 	bl	80047d8 <_malloc_r>
 800660c:	4604      	mov	r4, r0
 800660e:	b118      	cbz	r0, 8006618 <_calloc_r+0x18>
 8006610:	462a      	mov	r2, r5
 8006612:	2100      	movs	r1, #0
 8006614:	f7fe f88c 	bl	8004730 <memset>
 8006618:	4620      	mov	r0, r4
 800661a:	bd38      	pop	{r3, r4, r5, pc}

0800661c <__ssputs_r>:
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	688e      	ldr	r6, [r1, #8]
 8006622:	4682      	mov	sl, r0
 8006624:	429e      	cmp	r6, r3
 8006626:	460c      	mov	r4, r1
 8006628:	4690      	mov	r8, r2
 800662a:	461f      	mov	r7, r3
 800662c:	d838      	bhi.n	80066a0 <__ssputs_r+0x84>
 800662e:	898a      	ldrh	r2, [r1, #12]
 8006630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006634:	d032      	beq.n	800669c <__ssputs_r+0x80>
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	6909      	ldr	r1, [r1, #16]
 800663a:	3301      	adds	r3, #1
 800663c:	eba5 0901 	sub.w	r9, r5, r1
 8006640:	6965      	ldr	r5, [r4, #20]
 8006642:	444b      	add	r3, r9
 8006644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800664c:	106d      	asrs	r5, r5, #1
 800664e:	429d      	cmp	r5, r3
 8006650:	bf38      	it	cc
 8006652:	461d      	movcc	r5, r3
 8006654:	0553      	lsls	r3, r2, #21
 8006656:	d531      	bpl.n	80066bc <__ssputs_r+0xa0>
 8006658:	4629      	mov	r1, r5
 800665a:	f7fe f8bd 	bl	80047d8 <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b950      	cbnz	r0, 8006678 <__ssputs_r+0x5c>
 8006662:	230c      	movs	r3, #12
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	f8ca 3000 	str.w	r3, [sl]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	464a      	mov	r2, r9
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	f7ff fc24 	bl	8005ec8 <memcpy>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	444e      	add	r6, r9
 8006690:	6026      	str	r6, [r4, #0]
 8006692:	463e      	mov	r6, r7
 8006694:	6165      	str	r5, [r4, #20]
 8006696:	eba5 0509 	sub.w	r5, r5, r9
 800669a:	60a5      	str	r5, [r4, #8]
 800669c:	42be      	cmp	r6, r7
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x86>
 80066a0:	463e      	mov	r6, r7
 80066a2:	4632      	mov	r2, r6
 80066a4:	4641      	mov	r1, r8
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	f7fe f828 	bl	80046fc <memmove>
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	4432      	add	r2, r6
 80066b4:	2000      	movs	r0, #0
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	e7db      	b.n	8006674 <__ssputs_r+0x58>
 80066bc:	462a      	mov	r2, r5
 80066be:	f000 f94e 	bl	800695e <_realloc_r>
 80066c2:	4606      	mov	r6, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1e1      	bne.n	800668c <__ssputs_r+0x70>
 80066c8:	4650      	mov	r0, sl
 80066ca:	6921      	ldr	r1, [r4, #16]
 80066cc:	f7fe f838 	bl	8004740 <_free_r>
 80066d0:	e7c7      	b.n	8006662 <__ssputs_r+0x46>
	...

080066d4 <_svfiprintf_r>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	4698      	mov	r8, r3
 80066da:	898b      	ldrh	r3, [r1, #12]
 80066dc:	4607      	mov	r7, r0
 80066de:	061b      	lsls	r3, r3, #24
 80066e0:	460d      	mov	r5, r1
 80066e2:	4614      	mov	r4, r2
 80066e4:	b09d      	sub	sp, #116	; 0x74
 80066e6:	d50e      	bpl.n	8006706 <_svfiprintf_r+0x32>
 80066e8:	690b      	ldr	r3, [r1, #16]
 80066ea:	b963      	cbnz	r3, 8006706 <_svfiprintf_r+0x32>
 80066ec:	2140      	movs	r1, #64	; 0x40
 80066ee:	f7fe f873 	bl	80047d8 <_malloc_r>
 80066f2:	6028      	str	r0, [r5, #0]
 80066f4:	6128      	str	r0, [r5, #16]
 80066f6:	b920      	cbnz	r0, 8006702 <_svfiprintf_r+0x2e>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	e0d1      	b.n	80068a6 <_svfiprintf_r+0x1d2>
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	616b      	str	r3, [r5, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	9309      	str	r3, [sp, #36]	; 0x24
 800670a:	2320      	movs	r3, #32
 800670c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006710:	2330      	movs	r3, #48	; 0x30
 8006712:	f04f 0901 	mov.w	r9, #1
 8006716:	f8cd 800c 	str.w	r8, [sp, #12]
 800671a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068c0 <_svfiprintf_r+0x1ec>
 800671e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006722:	4623      	mov	r3, r4
 8006724:	469a      	mov	sl, r3
 8006726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672a:	b10a      	cbz	r2, 8006730 <_svfiprintf_r+0x5c>
 800672c:	2a25      	cmp	r2, #37	; 0x25
 800672e:	d1f9      	bne.n	8006724 <_svfiprintf_r+0x50>
 8006730:	ebba 0b04 	subs.w	fp, sl, r4
 8006734:	d00b      	beq.n	800674e <_svfiprintf_r+0x7a>
 8006736:	465b      	mov	r3, fp
 8006738:	4622      	mov	r2, r4
 800673a:	4629      	mov	r1, r5
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ff6d 	bl	800661c <__ssputs_r>
 8006742:	3001      	adds	r0, #1
 8006744:	f000 80aa 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674a:	445a      	add	r2, fp
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80a2 	beq.w	800689c <_svfiprintf_r+0x1c8>
 8006758:	2300      	movs	r3, #0
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006762:	f10a 0a01 	add.w	sl, sl, #1
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800676e:	931a      	str	r3, [sp, #104]	; 0x68
 8006770:	4654      	mov	r4, sl
 8006772:	2205      	movs	r2, #5
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	4851      	ldr	r0, [pc, #324]	; (80068c0 <_svfiprintf_r+0x1ec>)
 800677a:	f7ff fb97 	bl	8005eac <memchr>
 800677e:	9a04      	ldr	r2, [sp, #16]
 8006780:	b9d8      	cbnz	r0, 80067ba <_svfiprintf_r+0xe6>
 8006782:	06d0      	lsls	r0, r2, #27
 8006784:	bf44      	itt	mi
 8006786:	2320      	movmi	r3, #32
 8006788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678c:	0711      	lsls	r1, r2, #28
 800678e:	bf44      	itt	mi
 8006790:	232b      	movmi	r3, #43	; 0x2b
 8006792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b2a      	cmp	r3, #42	; 0x2a
 800679c:	d015      	beq.n	80067ca <_svfiprintf_r+0xf6>
 800679e:	4654      	mov	r4, sl
 80067a0:	2000      	movs	r0, #0
 80067a2:	f04f 0c0a 	mov.w	ip, #10
 80067a6:	9a07      	ldr	r2, [sp, #28]
 80067a8:	4621      	mov	r1, r4
 80067aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ae:	3b30      	subs	r3, #48	; 0x30
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d94e      	bls.n	8006852 <_svfiprintf_r+0x17e>
 80067b4:	b1b0      	cbz	r0, 80067e4 <_svfiprintf_r+0x110>
 80067b6:	9207      	str	r2, [sp, #28]
 80067b8:	e014      	b.n	80067e4 <_svfiprintf_r+0x110>
 80067ba:	eba0 0308 	sub.w	r3, r0, r8
 80067be:	fa09 f303 	lsl.w	r3, r9, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	46a2      	mov	sl, r4
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	e7d2      	b.n	8006770 <_svfiprintf_r+0x9c>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9103      	str	r1, [sp, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfbb      	ittet	lt
 80067d6:	425b      	neglt	r3, r3
 80067d8:	f042 0202 	orrlt.w	r2, r2, #2
 80067dc:	9307      	strge	r3, [sp, #28]
 80067de:	9307      	strlt	r3, [sp, #28]
 80067e0:	bfb8      	it	lt
 80067e2:	9204      	strlt	r2, [sp, #16]
 80067e4:	7823      	ldrb	r3, [r4, #0]
 80067e6:	2b2e      	cmp	r3, #46	; 0x2e
 80067e8:	d10c      	bne.n	8006804 <_svfiprintf_r+0x130>
 80067ea:	7863      	ldrb	r3, [r4, #1]
 80067ec:	2b2a      	cmp	r3, #42	; 0x2a
 80067ee:	d135      	bne.n	800685c <_svfiprintf_r+0x188>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	3402      	adds	r4, #2
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	9203      	str	r2, [sp, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006802:	9305      	str	r3, [sp, #20]
 8006804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068d0 <_svfiprintf_r+0x1fc>
 8006808:	2203      	movs	r2, #3
 800680a:	4650      	mov	r0, sl
 800680c:	7821      	ldrb	r1, [r4, #0]
 800680e:	f7ff fb4d 	bl	8005eac <memchr>
 8006812:	b140      	cbz	r0, 8006826 <_svfiprintf_r+0x152>
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	eba0 000a 	sub.w	r0, r0, sl
 800681a:	fa03 f000 	lsl.w	r0, r3, r0
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	3401      	adds	r4, #1
 8006822:	4303      	orrs	r3, r0
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682a:	2206      	movs	r2, #6
 800682c:	4825      	ldr	r0, [pc, #148]	; (80068c4 <_svfiprintf_r+0x1f0>)
 800682e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006832:	f7ff fb3b 	bl	8005eac <memchr>
 8006836:	2800      	cmp	r0, #0
 8006838:	d038      	beq.n	80068ac <_svfiprintf_r+0x1d8>
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <_svfiprintf_r+0x1f4>)
 800683c:	bb1b      	cbnz	r3, 8006886 <_svfiprintf_r+0x1b2>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	3308      	adds	r3, #8
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684c:	4433      	add	r3, r6
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	e767      	b.n	8006722 <_svfiprintf_r+0x4e>
 8006852:	460c      	mov	r4, r1
 8006854:	2001      	movs	r0, #1
 8006856:	fb0c 3202 	mla	r2, ip, r2, r3
 800685a:	e7a5      	b.n	80067a8 <_svfiprintf_r+0xd4>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 0c0a 	mov.w	ip, #10
 8006862:	4619      	mov	r1, r3
 8006864:	3401      	adds	r4, #1
 8006866:	9305      	str	r3, [sp, #20]
 8006868:	4620      	mov	r0, r4
 800686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686e:	3a30      	subs	r2, #48	; 0x30
 8006870:	2a09      	cmp	r2, #9
 8006872:	d903      	bls.n	800687c <_svfiprintf_r+0x1a8>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0c5      	beq.n	8006804 <_svfiprintf_r+0x130>
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	e7c3      	b.n	8006804 <_svfiprintf_r+0x130>
 800687c:	4604      	mov	r4, r0
 800687e:	2301      	movs	r3, #1
 8006880:	fb0c 2101 	mla	r1, ip, r1, r2
 8006884:	e7f0      	b.n	8006868 <_svfiprintf_r+0x194>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4638      	mov	r0, r7
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <_svfiprintf_r+0x1f8>)
 8006890:	a904      	add	r1, sp, #16
 8006892:	f7fe f899 	bl	80049c8 <_printf_float>
 8006896:	1c42      	adds	r2, r0, #1
 8006898:	4606      	mov	r6, r0
 800689a:	d1d6      	bne.n	800684a <_svfiprintf_r+0x176>
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	065b      	lsls	r3, r3, #25
 80068a0:	f53f af2c 	bmi.w	80066fc <_svfiprintf_r+0x28>
 80068a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068a6:	b01d      	add	sp, #116	; 0x74
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	ab03      	add	r3, sp, #12
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	462a      	mov	r2, r5
 80068b2:	4638      	mov	r0, r7
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <_svfiprintf_r+0x1f8>)
 80068b6:	a904      	add	r1, sp, #16
 80068b8:	f7fe fb22 	bl	8004f00 <_printf_i>
 80068bc:	e7eb      	b.n	8006896 <_svfiprintf_r+0x1c2>
 80068be:	bf00      	nop
 80068c0:	080079bc 	.word	0x080079bc
 80068c4:	080079c6 	.word	0x080079c6
 80068c8:	080049c9 	.word	0x080049c9
 80068cc:	0800661d 	.word	0x0800661d
 80068d0:	080079c2 	.word	0x080079c2

080068d4 <__assert_func>:
 80068d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068d6:	4614      	mov	r4, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <__assert_func+0x2c>)
 80068dc:	4605      	mov	r5, r0
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68d8      	ldr	r0, [r3, #12]
 80068e2:	b14c      	cbz	r4, 80068f8 <__assert_func+0x24>
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <__assert_func+0x30>)
 80068e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068ea:	9100      	str	r1, [sp, #0]
 80068ec:	462b      	mov	r3, r5
 80068ee:	4906      	ldr	r1, [pc, #24]	; (8006908 <__assert_func+0x34>)
 80068f0:	f000 f80e 	bl	8006910 <fiprintf>
 80068f4:	f000 fa7e 	bl	8006df4 <abort>
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <__assert_func+0x38>)
 80068fa:	461c      	mov	r4, r3
 80068fc:	e7f3      	b.n	80068e6 <__assert_func+0x12>
 80068fe:	bf00      	nop
 8006900:	200000c8 	.word	0x200000c8
 8006904:	080079cd 	.word	0x080079cd
 8006908:	080079da 	.word	0x080079da
 800690c:	08007a08 	.word	0x08007a08

08006910 <fiprintf>:
 8006910:	b40e      	push	{r1, r2, r3}
 8006912:	b503      	push	{r0, r1, lr}
 8006914:	4601      	mov	r1, r0
 8006916:	ab03      	add	r3, sp, #12
 8006918:	4805      	ldr	r0, [pc, #20]	; (8006930 <fiprintf+0x20>)
 800691a:	f853 2b04 	ldr.w	r2, [r3], #4
 800691e:	6800      	ldr	r0, [r0, #0]
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	f000 f869 	bl	80069f8 <_vfiprintf_r>
 8006926:	b002      	add	sp, #8
 8006928:	f85d eb04 	ldr.w	lr, [sp], #4
 800692c:	b003      	add	sp, #12
 800692e:	4770      	bx	lr
 8006930:	200000c8 	.word	0x200000c8

08006934 <__retarget_lock_init_recursive>:
 8006934:	4770      	bx	lr

08006936 <__retarget_lock_acquire_recursive>:
 8006936:	4770      	bx	lr

08006938 <__retarget_lock_release_recursive>:
 8006938:	4770      	bx	lr

0800693a <__ascii_mbtowc>:
 800693a:	b082      	sub	sp, #8
 800693c:	b901      	cbnz	r1, 8006940 <__ascii_mbtowc+0x6>
 800693e:	a901      	add	r1, sp, #4
 8006940:	b142      	cbz	r2, 8006954 <__ascii_mbtowc+0x1a>
 8006942:	b14b      	cbz	r3, 8006958 <__ascii_mbtowc+0x1e>
 8006944:	7813      	ldrb	r3, [r2, #0]
 8006946:	600b      	str	r3, [r1, #0]
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	1e10      	subs	r0, r2, #0
 800694c:	bf18      	it	ne
 800694e:	2001      	movne	r0, #1
 8006950:	b002      	add	sp, #8
 8006952:	4770      	bx	lr
 8006954:	4610      	mov	r0, r2
 8006956:	e7fb      	b.n	8006950 <__ascii_mbtowc+0x16>
 8006958:	f06f 0001 	mvn.w	r0, #1
 800695c:	e7f8      	b.n	8006950 <__ascii_mbtowc+0x16>

0800695e <_realloc_r>:
 800695e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006960:	4607      	mov	r7, r0
 8006962:	4614      	mov	r4, r2
 8006964:	460e      	mov	r6, r1
 8006966:	b921      	cbnz	r1, 8006972 <_realloc_r+0x14>
 8006968:	4611      	mov	r1, r2
 800696a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800696e:	f7fd bf33 	b.w	80047d8 <_malloc_r>
 8006972:	b922      	cbnz	r2, 800697e <_realloc_r+0x20>
 8006974:	f7fd fee4 	bl	8004740 <_free_r>
 8006978:	4625      	mov	r5, r4
 800697a:	4628      	mov	r0, r5
 800697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800697e:	f000 fc5d 	bl	800723c <_malloc_usable_size_r>
 8006982:	42a0      	cmp	r0, r4
 8006984:	d20f      	bcs.n	80069a6 <_realloc_r+0x48>
 8006986:	4621      	mov	r1, r4
 8006988:	4638      	mov	r0, r7
 800698a:	f7fd ff25 	bl	80047d8 <_malloc_r>
 800698e:	4605      	mov	r5, r0
 8006990:	2800      	cmp	r0, #0
 8006992:	d0f2      	beq.n	800697a <_realloc_r+0x1c>
 8006994:	4631      	mov	r1, r6
 8006996:	4622      	mov	r2, r4
 8006998:	f7ff fa96 	bl	8005ec8 <memcpy>
 800699c:	4631      	mov	r1, r6
 800699e:	4638      	mov	r0, r7
 80069a0:	f7fd fece 	bl	8004740 <_free_r>
 80069a4:	e7e9      	b.n	800697a <_realloc_r+0x1c>
 80069a6:	4635      	mov	r5, r6
 80069a8:	e7e7      	b.n	800697a <_realloc_r+0x1c>

080069aa <__sfputc_r>:
 80069aa:	6893      	ldr	r3, [r2, #8]
 80069ac:	b410      	push	{r4}
 80069ae:	3b01      	subs	r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	6093      	str	r3, [r2, #8]
 80069b4:	da07      	bge.n	80069c6 <__sfputc_r+0x1c>
 80069b6:	6994      	ldr	r4, [r2, #24]
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	db01      	blt.n	80069c0 <__sfputc_r+0x16>
 80069bc:	290a      	cmp	r1, #10
 80069be:	d102      	bne.n	80069c6 <__sfputc_r+0x1c>
 80069c0:	bc10      	pop	{r4}
 80069c2:	f000 b949 	b.w	8006c58 <__swbuf_r>
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	1c58      	adds	r0, r3, #1
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	7019      	strb	r1, [r3, #0]
 80069ce:	4608      	mov	r0, r1
 80069d0:	bc10      	pop	{r4}
 80069d2:	4770      	bx	lr

080069d4 <__sfputs_r>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	4614      	mov	r4, r2
 80069dc:	18d5      	adds	r5, r2, r3
 80069de:	42ac      	cmp	r4, r5
 80069e0:	d101      	bne.n	80069e6 <__sfputs_r+0x12>
 80069e2:	2000      	movs	r0, #0
 80069e4:	e007      	b.n	80069f6 <__sfputs_r+0x22>
 80069e6:	463a      	mov	r2, r7
 80069e8:	4630      	mov	r0, r6
 80069ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ee:	f7ff ffdc 	bl	80069aa <__sfputc_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d1f3      	bne.n	80069de <__sfputs_r+0xa>
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069f8 <_vfiprintf_r>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	460d      	mov	r5, r1
 80069fe:	4614      	mov	r4, r2
 8006a00:	4698      	mov	r8, r3
 8006a02:	4606      	mov	r6, r0
 8006a04:	b09d      	sub	sp, #116	; 0x74
 8006a06:	b118      	cbz	r0, 8006a10 <_vfiprintf_r+0x18>
 8006a08:	6983      	ldr	r3, [r0, #24]
 8006a0a:	b90b      	cbnz	r3, 8006a10 <_vfiprintf_r+0x18>
 8006a0c:	f000 fb14 	bl	8007038 <__sinit>
 8006a10:	4b89      	ldr	r3, [pc, #548]	; (8006c38 <_vfiprintf_r+0x240>)
 8006a12:	429d      	cmp	r5, r3
 8006a14:	d11b      	bne.n	8006a4e <_vfiprintf_r+0x56>
 8006a16:	6875      	ldr	r5, [r6, #4]
 8006a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a1a:	07d9      	lsls	r1, r3, #31
 8006a1c:	d405      	bmi.n	8006a2a <_vfiprintf_r+0x32>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	059a      	lsls	r2, r3, #22
 8006a22:	d402      	bmi.n	8006a2a <_vfiprintf_r+0x32>
 8006a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a26:	f7ff ff86 	bl	8006936 <__retarget_lock_acquire_recursive>
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	071b      	lsls	r3, r3, #28
 8006a2e:	d501      	bpl.n	8006a34 <_vfiprintf_r+0x3c>
 8006a30:	692b      	ldr	r3, [r5, #16]
 8006a32:	b9eb      	cbnz	r3, 8006a70 <_vfiprintf_r+0x78>
 8006a34:	4629      	mov	r1, r5
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 f96e 	bl	8006d18 <__swsetup_r>
 8006a3c:	b1c0      	cbz	r0, 8006a70 <_vfiprintf_r+0x78>
 8006a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a40:	07dc      	lsls	r4, r3, #31
 8006a42:	d50e      	bpl.n	8006a62 <_vfiprintf_r+0x6a>
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	b01d      	add	sp, #116	; 0x74
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	4b7b      	ldr	r3, [pc, #492]	; (8006c3c <_vfiprintf_r+0x244>)
 8006a50:	429d      	cmp	r5, r3
 8006a52:	d101      	bne.n	8006a58 <_vfiprintf_r+0x60>
 8006a54:	68b5      	ldr	r5, [r6, #8]
 8006a56:	e7df      	b.n	8006a18 <_vfiprintf_r+0x20>
 8006a58:	4b79      	ldr	r3, [pc, #484]	; (8006c40 <_vfiprintf_r+0x248>)
 8006a5a:	429d      	cmp	r5, r3
 8006a5c:	bf08      	it	eq
 8006a5e:	68f5      	ldreq	r5, [r6, #12]
 8006a60:	e7da      	b.n	8006a18 <_vfiprintf_r+0x20>
 8006a62:	89ab      	ldrh	r3, [r5, #12]
 8006a64:	0598      	lsls	r0, r3, #22
 8006a66:	d4ed      	bmi.n	8006a44 <_vfiprintf_r+0x4c>
 8006a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a6a:	f7ff ff65 	bl	8006938 <__retarget_lock_release_recursive>
 8006a6e:	e7e9      	b.n	8006a44 <_vfiprintf_r+0x4c>
 8006a70:	2300      	movs	r3, #0
 8006a72:	9309      	str	r3, [sp, #36]	; 0x24
 8006a74:	2320      	movs	r3, #32
 8006a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a7a:	2330      	movs	r3, #48	; 0x30
 8006a7c:	f04f 0901 	mov.w	r9, #1
 8006a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c44 <_vfiprintf_r+0x24c>
 8006a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	469a      	mov	sl, r3
 8006a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a94:	b10a      	cbz	r2, 8006a9a <_vfiprintf_r+0xa2>
 8006a96:	2a25      	cmp	r2, #37	; 0x25
 8006a98:	d1f9      	bne.n	8006a8e <_vfiprintf_r+0x96>
 8006a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a9e:	d00b      	beq.n	8006ab8 <_vfiprintf_r+0xc0>
 8006aa0:	465b      	mov	r3, fp
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff ff94 	bl	80069d4 <__sfputs_r>
 8006aac:	3001      	adds	r0, #1
 8006aae:	f000 80aa 	beq.w	8006c06 <_vfiprintf_r+0x20e>
 8006ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab4:	445a      	add	r2, fp
 8006ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80a2 	beq.w	8006c06 <_vfiprintf_r+0x20e>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006acc:	f10a 0a01 	add.w	sl, sl, #1
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	9307      	str	r3, [sp, #28]
 8006ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8006ada:	4654      	mov	r4, sl
 8006adc:	2205      	movs	r2, #5
 8006ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae2:	4858      	ldr	r0, [pc, #352]	; (8006c44 <_vfiprintf_r+0x24c>)
 8006ae4:	f7ff f9e2 	bl	8005eac <memchr>
 8006ae8:	9a04      	ldr	r2, [sp, #16]
 8006aea:	b9d8      	cbnz	r0, 8006b24 <_vfiprintf_r+0x12c>
 8006aec:	06d1      	lsls	r1, r2, #27
 8006aee:	bf44      	itt	mi
 8006af0:	2320      	movmi	r3, #32
 8006af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af6:	0713      	lsls	r3, r2, #28
 8006af8:	bf44      	itt	mi
 8006afa:	232b      	movmi	r3, #43	; 0x2b
 8006afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b00:	f89a 3000 	ldrb.w	r3, [sl]
 8006b04:	2b2a      	cmp	r3, #42	; 0x2a
 8006b06:	d015      	beq.n	8006b34 <_vfiprintf_r+0x13c>
 8006b08:	4654      	mov	r4, sl
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f04f 0c0a 	mov.w	ip, #10
 8006b10:	9a07      	ldr	r2, [sp, #28]
 8006b12:	4621      	mov	r1, r4
 8006b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b18:	3b30      	subs	r3, #48	; 0x30
 8006b1a:	2b09      	cmp	r3, #9
 8006b1c:	d94e      	bls.n	8006bbc <_vfiprintf_r+0x1c4>
 8006b1e:	b1b0      	cbz	r0, 8006b4e <_vfiprintf_r+0x156>
 8006b20:	9207      	str	r2, [sp, #28]
 8006b22:	e014      	b.n	8006b4e <_vfiprintf_r+0x156>
 8006b24:	eba0 0308 	sub.w	r3, r0, r8
 8006b28:	fa09 f303 	lsl.w	r3, r9, r3
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	46a2      	mov	sl, r4
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	e7d2      	b.n	8006ada <_vfiprintf_r+0xe2>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	1d19      	adds	r1, r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	9103      	str	r1, [sp, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bfbb      	ittet	lt
 8006b40:	425b      	neglt	r3, r3
 8006b42:	f042 0202 	orrlt.w	r2, r2, #2
 8006b46:	9307      	strge	r3, [sp, #28]
 8006b48:	9307      	strlt	r3, [sp, #28]
 8006b4a:	bfb8      	it	lt
 8006b4c:	9204      	strlt	r2, [sp, #16]
 8006b4e:	7823      	ldrb	r3, [r4, #0]
 8006b50:	2b2e      	cmp	r3, #46	; 0x2e
 8006b52:	d10c      	bne.n	8006b6e <_vfiprintf_r+0x176>
 8006b54:	7863      	ldrb	r3, [r4, #1]
 8006b56:	2b2a      	cmp	r3, #42	; 0x2a
 8006b58:	d135      	bne.n	8006bc6 <_vfiprintf_r+0x1ce>
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	3402      	adds	r4, #2
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	9203      	str	r2, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bfb8      	it	lt
 8006b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b6c:	9305      	str	r3, [sp, #20]
 8006b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c54 <_vfiprintf_r+0x25c>
 8006b72:	2203      	movs	r2, #3
 8006b74:	4650      	mov	r0, sl
 8006b76:	7821      	ldrb	r1, [r4, #0]
 8006b78:	f7ff f998 	bl	8005eac <memchr>
 8006b7c:	b140      	cbz	r0, 8006b90 <_vfiprintf_r+0x198>
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	eba0 000a 	sub.w	r0, r0, sl
 8006b84:	fa03 f000 	lsl.w	r0, r3, r0
 8006b88:	9b04      	ldr	r3, [sp, #16]
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	9304      	str	r3, [sp, #16]
 8006b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b94:	2206      	movs	r2, #6
 8006b96:	482c      	ldr	r0, [pc, #176]	; (8006c48 <_vfiprintf_r+0x250>)
 8006b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b9c:	f7ff f986 	bl	8005eac <memchr>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d03f      	beq.n	8006c24 <_vfiprintf_r+0x22c>
 8006ba4:	4b29      	ldr	r3, [pc, #164]	; (8006c4c <_vfiprintf_r+0x254>)
 8006ba6:	bb1b      	cbnz	r3, 8006bf0 <_vfiprintf_r+0x1f8>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	3307      	adds	r3, #7
 8006bac:	f023 0307 	bic.w	r3, r3, #7
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	443b      	add	r3, r7
 8006bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bba:	e767      	b.n	8006a8c <_vfiprintf_r+0x94>
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bc4:	e7a5      	b.n	8006b12 <_vfiprintf_r+0x11a>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f04f 0c0a 	mov.w	ip, #10
 8006bcc:	4619      	mov	r1, r3
 8006bce:	3401      	adds	r4, #1
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bd8:	3a30      	subs	r2, #48	; 0x30
 8006bda:	2a09      	cmp	r2, #9
 8006bdc:	d903      	bls.n	8006be6 <_vfiprintf_r+0x1ee>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0c5      	beq.n	8006b6e <_vfiprintf_r+0x176>
 8006be2:	9105      	str	r1, [sp, #20]
 8006be4:	e7c3      	b.n	8006b6e <_vfiprintf_r+0x176>
 8006be6:	4604      	mov	r4, r0
 8006be8:	2301      	movs	r3, #1
 8006bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bee:	e7f0      	b.n	8006bd2 <_vfiprintf_r+0x1da>
 8006bf0:	ab03      	add	r3, sp, #12
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <_vfiprintf_r+0x258>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	f7fd fee4 	bl	80049c8 <_printf_float>
 8006c00:	4607      	mov	r7, r0
 8006c02:	1c78      	adds	r0, r7, #1
 8006c04:	d1d6      	bne.n	8006bb4 <_vfiprintf_r+0x1bc>
 8006c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c08:	07d9      	lsls	r1, r3, #31
 8006c0a:	d405      	bmi.n	8006c18 <_vfiprintf_r+0x220>
 8006c0c:	89ab      	ldrh	r3, [r5, #12]
 8006c0e:	059a      	lsls	r2, r3, #22
 8006c10:	d402      	bmi.n	8006c18 <_vfiprintf_r+0x220>
 8006c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c14:	f7ff fe90 	bl	8006938 <__retarget_lock_release_recursive>
 8006c18:	89ab      	ldrh	r3, [r5, #12]
 8006c1a:	065b      	lsls	r3, r3, #25
 8006c1c:	f53f af12 	bmi.w	8006a44 <_vfiprintf_r+0x4c>
 8006c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c22:	e711      	b.n	8006a48 <_vfiprintf_r+0x50>
 8006c24:	ab03      	add	r3, sp, #12
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <_vfiprintf_r+0x258>)
 8006c2e:	a904      	add	r1, sp, #16
 8006c30:	f7fe f966 	bl	8004f00 <_printf_i>
 8006c34:	e7e4      	b.n	8006c00 <_vfiprintf_r+0x208>
 8006c36:	bf00      	nop
 8006c38:	08007b34 	.word	0x08007b34
 8006c3c:	08007b54 	.word	0x08007b54
 8006c40:	08007b14 	.word	0x08007b14
 8006c44:	080079bc 	.word	0x080079bc
 8006c48:	080079c6 	.word	0x080079c6
 8006c4c:	080049c9 	.word	0x080049c9
 8006c50:	080069d5 	.word	0x080069d5
 8006c54:	080079c2 	.word	0x080079c2

08006c58 <__swbuf_r>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	460e      	mov	r6, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b118      	cbz	r0, 8006c6a <__swbuf_r+0x12>
 8006c62:	6983      	ldr	r3, [r0, #24]
 8006c64:	b90b      	cbnz	r3, 8006c6a <__swbuf_r+0x12>
 8006c66:	f000 f9e7 	bl	8007038 <__sinit>
 8006c6a:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <__swbuf_r+0x98>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d12b      	bne.n	8006cc8 <__swbuf_r+0x70>
 8006c70:	686c      	ldr	r4, [r5, #4]
 8006c72:	69a3      	ldr	r3, [r4, #24]
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	071a      	lsls	r2, r3, #28
 8006c7a:	d52f      	bpl.n	8006cdc <__swbuf_r+0x84>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	b36b      	cbz	r3, 8006cdc <__swbuf_r+0x84>
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	b2f6      	uxtb	r6, r6
 8006c86:	1ac0      	subs	r0, r0, r3
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	4637      	mov	r7, r6
 8006c8c:	4283      	cmp	r3, r0
 8006c8e:	dc04      	bgt.n	8006c9a <__swbuf_r+0x42>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f93c 	bl	8006f10 <_fflush_r>
 8006c98:	bb30      	cbnz	r0, 8006ce8 <__swbuf_r+0x90>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	701e      	strb	r6, [r3, #0]
 8006caa:	6963      	ldr	r3, [r4, #20]
 8006cac:	4283      	cmp	r3, r0
 8006cae:	d004      	beq.n	8006cba <__swbuf_r+0x62>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d506      	bpl.n	8006cc4 <__swbuf_r+0x6c>
 8006cb6:	2e0a      	cmp	r6, #10
 8006cb8:	d104      	bne.n	8006cc4 <__swbuf_r+0x6c>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f927 	bl	8006f10 <_fflush_r>
 8006cc2:	b988      	cbnz	r0, 8006ce8 <__swbuf_r+0x90>
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <__swbuf_r+0x9c>)
 8006cca:	429c      	cmp	r4, r3
 8006ccc:	d101      	bne.n	8006cd2 <__swbuf_r+0x7a>
 8006cce:	68ac      	ldr	r4, [r5, #8]
 8006cd0:	e7cf      	b.n	8006c72 <__swbuf_r+0x1a>
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <__swbuf_r+0xa0>)
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	bf08      	it	eq
 8006cd8:	68ec      	ldreq	r4, [r5, #12]
 8006cda:	e7ca      	b.n	8006c72 <__swbuf_r+0x1a>
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 f81a 	bl	8006d18 <__swsetup_r>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d0cb      	beq.n	8006c80 <__swbuf_r+0x28>
 8006ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8006cec:	e7ea      	b.n	8006cc4 <__swbuf_r+0x6c>
 8006cee:	bf00      	nop
 8006cf0:	08007b34 	.word	0x08007b34
 8006cf4:	08007b54 	.word	0x08007b54
 8006cf8:	08007b14 	.word	0x08007b14

08006cfc <__ascii_wctomb>:
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	4608      	mov	r0, r1
 8006d00:	b141      	cbz	r1, 8006d14 <__ascii_wctomb+0x18>
 8006d02:	2aff      	cmp	r2, #255	; 0xff
 8006d04:	d904      	bls.n	8006d10 <__ascii_wctomb+0x14>
 8006d06:	228a      	movs	r2, #138	; 0x8a
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	4770      	bx	lr
 8006d10:	2001      	movs	r0, #1
 8006d12:	700a      	strb	r2, [r1, #0]
 8006d14:	4770      	bx	lr
	...

08006d18 <__swsetup_r>:
 8006d18:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <__swsetup_r+0xcc>)
 8006d1a:	b570      	push	{r4, r5, r6, lr}
 8006d1c:	681d      	ldr	r5, [r3, #0]
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	b125      	cbz	r5, 8006d2e <__swsetup_r+0x16>
 8006d24:	69ab      	ldr	r3, [r5, #24]
 8006d26:	b913      	cbnz	r3, 8006d2e <__swsetup_r+0x16>
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f985 	bl	8007038 <__sinit>
 8006d2e:	4b2e      	ldr	r3, [pc, #184]	; (8006de8 <__swsetup_r+0xd0>)
 8006d30:	429c      	cmp	r4, r3
 8006d32:	d10f      	bne.n	8006d54 <__swsetup_r+0x3c>
 8006d34:	686c      	ldr	r4, [r5, #4]
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d3c:	0719      	lsls	r1, r3, #28
 8006d3e:	d42c      	bmi.n	8006d9a <__swsetup_r+0x82>
 8006d40:	06dd      	lsls	r5, r3, #27
 8006d42:	d411      	bmi.n	8006d68 <__swsetup_r+0x50>
 8006d44:	2309      	movs	r3, #9
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	81a3      	strh	r3, [r4, #12]
 8006d52:	e03e      	b.n	8006dd2 <__swsetup_r+0xba>
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <__swsetup_r+0xd4>)
 8006d56:	429c      	cmp	r4, r3
 8006d58:	d101      	bne.n	8006d5e <__swsetup_r+0x46>
 8006d5a:	68ac      	ldr	r4, [r5, #8]
 8006d5c:	e7eb      	b.n	8006d36 <__swsetup_r+0x1e>
 8006d5e:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <__swsetup_r+0xd8>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	bf08      	it	eq
 8006d64:	68ec      	ldreq	r4, [r5, #12]
 8006d66:	e7e6      	b.n	8006d36 <__swsetup_r+0x1e>
 8006d68:	0758      	lsls	r0, r3, #29
 8006d6a:	d512      	bpl.n	8006d92 <__swsetup_r+0x7a>
 8006d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d6e:	b141      	cbz	r1, 8006d82 <__swsetup_r+0x6a>
 8006d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d74:	4299      	cmp	r1, r3
 8006d76:	d002      	beq.n	8006d7e <__swsetup_r+0x66>
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7fd fce1 	bl	8004740 <_free_r>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6363      	str	r3, [r4, #52]	; 0x34
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6063      	str	r3, [r4, #4]
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0308 	orr.w	r3, r3, #8
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	b94b      	cbnz	r3, 8006db2 <__swsetup_r+0x9a>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da8:	d003      	beq.n	8006db2 <__swsetup_r+0x9a>
 8006daa:	4621      	mov	r1, r4
 8006dac:	4630      	mov	r0, r6
 8006dae:	f000 fa05 	bl	80071bc <__smakebuf_r>
 8006db2:	89a0      	ldrh	r0, [r4, #12]
 8006db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db8:	f010 0301 	ands.w	r3, r0, #1
 8006dbc:	d00a      	beq.n	8006dd4 <__swsetup_r+0xbc>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60a3      	str	r3, [r4, #8]
 8006dc2:	6963      	ldr	r3, [r4, #20]
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	61a3      	str	r3, [r4, #24]
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	b943      	cbnz	r3, 8006dde <__swsetup_r+0xc6>
 8006dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dd0:	d1ba      	bne.n	8006d48 <__swsetup_r+0x30>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	0781      	lsls	r1, r0, #30
 8006dd6:	bf58      	it	pl
 8006dd8:	6963      	ldrpl	r3, [r4, #20]
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	e7f4      	b.n	8006dc8 <__swsetup_r+0xb0>
 8006dde:	2000      	movs	r0, #0
 8006de0:	e7f7      	b.n	8006dd2 <__swsetup_r+0xba>
 8006de2:	bf00      	nop
 8006de4:	200000c8 	.word	0x200000c8
 8006de8:	08007b34 	.word	0x08007b34
 8006dec:	08007b54 	.word	0x08007b54
 8006df0:	08007b14 	.word	0x08007b14

08006df4 <abort>:
 8006df4:	2006      	movs	r0, #6
 8006df6:	b508      	push	{r3, lr}
 8006df8:	f000 fa50 	bl	800729c <raise>
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	f7fb fbf8 	bl	80025f2 <_exit>
	...

08006e04 <__sflush_r>:
 8006e04:	898a      	ldrh	r2, [r1, #12]
 8006e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	0710      	lsls	r0, r2, #28
 8006e0e:	460c      	mov	r4, r1
 8006e10:	d458      	bmi.n	8006ec4 <__sflush_r+0xc0>
 8006e12:	684b      	ldr	r3, [r1, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc05      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dc02      	bgt.n	8006e24 <__sflush_r+0x20>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d0f9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e30:	682f      	ldr	r7, [r5, #0]
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	d032      	beq.n	8006e9c <__sflush_r+0x98>
 8006e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	075a      	lsls	r2, r3, #29
 8006e3c:	d505      	bpl.n	8006e4a <__sflush_r+0x46>
 8006e3e:	6863      	ldr	r3, [r4, #4]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e44:	b10b      	cbz	r3, 8006e4a <__sflush_r+0x46>
 8006e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e48:	1ac0      	subs	r0, r0, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e50:	4628      	mov	r0, r5
 8006e52:	6a21      	ldr	r1, [r4, #32]
 8006e54:	47b0      	blx	r6
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	d106      	bne.n	8006e6a <__sflush_r+0x66>
 8006e5c:	6829      	ldr	r1, [r5, #0]
 8006e5e:	291d      	cmp	r1, #29
 8006e60:	d82c      	bhi.n	8006ebc <__sflush_r+0xb8>
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <__sflush_r+0x108>)
 8006e64:	40ca      	lsrs	r2, r1
 8006e66:	07d6      	lsls	r6, r2, #31
 8006e68:	d528      	bpl.n	8006ebc <__sflush_r+0xb8>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6062      	str	r2, [r4, #4]
 8006e6e:	6922      	ldr	r2, [r4, #16]
 8006e70:	04d9      	lsls	r1, r3, #19
 8006e72:	6022      	str	r2, [r4, #0]
 8006e74:	d504      	bpl.n	8006e80 <__sflush_r+0x7c>
 8006e76:	1c42      	adds	r2, r0, #1
 8006e78:	d101      	bne.n	8006e7e <__sflush_r+0x7a>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	b903      	cbnz	r3, 8006e80 <__sflush_r+0x7c>
 8006e7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e82:	602f      	str	r7, [r5, #0]
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d0ca      	beq.n	8006e1e <__sflush_r+0x1a>
 8006e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <__sflush_r+0x92>
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7fd fc55 	bl	8004740 <_free_r>
 8006e96:	2000      	movs	r0, #0
 8006e98:	6360      	str	r0, [r4, #52]	; 0x34
 8006e9a:	e7c1      	b.n	8006e20 <__sflush_r+0x1c>
 8006e9c:	6a21      	ldr	r1, [r4, #32]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	1c41      	adds	r1, r0, #1
 8006ea6:	d1c7      	bne.n	8006e38 <__sflush_r+0x34>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0c4      	beq.n	8006e38 <__sflush_r+0x34>
 8006eae:	2b1d      	cmp	r3, #29
 8006eb0:	d001      	beq.n	8006eb6 <__sflush_r+0xb2>
 8006eb2:	2b16      	cmp	r3, #22
 8006eb4:	d101      	bne.n	8006eba <__sflush_r+0xb6>
 8006eb6:	602f      	str	r7, [r5, #0]
 8006eb8:	e7b1      	b.n	8006e1e <__sflush_r+0x1a>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	81a3      	strh	r3, [r4, #12]
 8006ec2:	e7ad      	b.n	8006e20 <__sflush_r+0x1c>
 8006ec4:	690f      	ldr	r7, [r1, #16]
 8006ec6:	2f00      	cmp	r7, #0
 8006ec8:	d0a9      	beq.n	8006e1e <__sflush_r+0x1a>
 8006eca:	0793      	lsls	r3, r2, #30
 8006ecc:	bf18      	it	ne
 8006ece:	2300      	movne	r3, #0
 8006ed0:	680e      	ldr	r6, [r1, #0]
 8006ed2:	bf08      	it	eq
 8006ed4:	694b      	ldreq	r3, [r1, #20]
 8006ed6:	eba6 0807 	sub.w	r8, r6, r7
 8006eda:	600f      	str	r7, [r1, #0]
 8006edc:	608b      	str	r3, [r1, #8]
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	dd9c      	ble.n	8006e1e <__sflush_r+0x1a>
 8006ee4:	4643      	mov	r3, r8
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4628      	mov	r0, r5
 8006eea:	6a21      	ldr	r1, [r4, #32]
 8006eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006eee:	47b0      	blx	r6
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc06      	bgt.n	8006f02 <__sflush_r+0xfe>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	e78e      	b.n	8006e20 <__sflush_r+0x1c>
 8006f02:	4407      	add	r7, r0
 8006f04:	eba8 0800 	sub.w	r8, r8, r0
 8006f08:	e7e9      	b.n	8006ede <__sflush_r+0xda>
 8006f0a:	bf00      	nop
 8006f0c:	20400001 	.word	0x20400001

08006f10 <_fflush_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b913      	cbnz	r3, 8006f20 <_fflush_r+0x10>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	b118      	cbz	r0, 8006f2a <_fflush_r+0x1a>
 8006f22:	6983      	ldr	r3, [r0, #24]
 8006f24:	b90b      	cbnz	r3, 8006f2a <_fflush_r+0x1a>
 8006f26:	f000 f887 	bl	8007038 <__sinit>
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <_fflush_r+0x6c>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	d11b      	bne.n	8006f68 <_fflush_r+0x58>
 8006f30:	686c      	ldr	r4, [r5, #4]
 8006f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0ef      	beq.n	8006f1a <_fflush_r+0xa>
 8006f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f3c:	07d0      	lsls	r0, r2, #31
 8006f3e:	d404      	bmi.n	8006f4a <_fflush_r+0x3a>
 8006f40:	0599      	lsls	r1, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_fflush_r+0x3a>
 8006f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f46:	f7ff fcf6 	bl	8006936 <__retarget_lock_acquire_recursive>
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f7ff ff59 	bl	8006e04 <__sflush_r>
 8006f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f54:	4605      	mov	r5, r0
 8006f56:	07da      	lsls	r2, r3, #31
 8006f58:	d4e0      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	059b      	lsls	r3, r3, #22
 8006f5e:	d4dd      	bmi.n	8006f1c <_fflush_r+0xc>
 8006f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f62:	f7ff fce9 	bl	8006938 <__retarget_lock_release_recursive>
 8006f66:	e7d9      	b.n	8006f1c <_fflush_r+0xc>
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <_fflush_r+0x70>)
 8006f6a:	429c      	cmp	r4, r3
 8006f6c:	d101      	bne.n	8006f72 <_fflush_r+0x62>
 8006f6e:	68ac      	ldr	r4, [r5, #8]
 8006f70:	e7df      	b.n	8006f32 <_fflush_r+0x22>
 8006f72:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <_fflush_r+0x74>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	bf08      	it	eq
 8006f78:	68ec      	ldreq	r4, [r5, #12]
 8006f7a:	e7da      	b.n	8006f32 <_fflush_r+0x22>
 8006f7c:	08007b34 	.word	0x08007b34
 8006f80:	08007b54 	.word	0x08007b54
 8006f84:	08007b14 	.word	0x08007b14

08006f88 <std>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	8181      	strh	r1, [r0, #12]
 8006f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f9c:	81c2      	strh	r2, [r0, #14]
 8006f9e:	6183      	str	r3, [r0, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	305c      	adds	r0, #92	; 0x5c
 8006fa6:	f7fd fbc3 	bl	8004730 <memset>
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x38>)
 8006fac:	6224      	str	r4, [r4, #32]
 8006fae:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <std+0x3c>)
 8006fb2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <std+0x40>)
 8006fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <std+0x44>)
 8006fba:	6323      	str	r3, [r4, #48]	; 0x30
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	080072d5 	.word	0x080072d5
 8006fc4:	080072f7 	.word	0x080072f7
 8006fc8:	0800732f 	.word	0x0800732f
 8006fcc:	08007353 	.word	0x08007353

08006fd0 <_cleanup_r>:
 8006fd0:	4901      	ldr	r1, [pc, #4]	; (8006fd8 <_cleanup_r+0x8>)
 8006fd2:	f000 b8af 	b.w	8007134 <_fwalk_reent>
 8006fd6:	bf00      	nop
 8006fd8:	08006f11 	.word	0x08006f11

08006fdc <__sfmoreglue>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	2568      	movs	r5, #104	; 0x68
 8006fe0:	1e4a      	subs	r2, r1, #1
 8006fe2:	4355      	muls	r5, r2
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fea:	f7fd fbf5 	bl	80047d8 <_malloc_r>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b140      	cbz	r0, 8007004 <__sfmoreglue+0x28>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	60a0      	str	r0, [r4, #8]
 8006ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007000:	f7fd fb96 	bl	8004730 <memset>
 8007004:	4620      	mov	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__sfp_lock_acquire>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_acquire+0x8>)
 800700a:	f7ff bc94 	b.w	8006936 <__retarget_lock_acquire_recursive>
 800700e:	bf00      	nop
 8007010:	200006e0 	.word	0x200006e0

08007014 <__sfp_lock_release>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sfp_lock_release+0x8>)
 8007016:	f7ff bc8f 	b.w	8006938 <__retarget_lock_release_recursive>
 800701a:	bf00      	nop
 800701c:	200006e0 	.word	0x200006e0

08007020 <__sinit_lock_acquire>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_acquire+0x8>)
 8007022:	f7ff bc88 	b.w	8006936 <__retarget_lock_acquire_recursive>
 8007026:	bf00      	nop
 8007028:	200006db 	.word	0x200006db

0800702c <__sinit_lock_release>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__sinit_lock_release+0x8>)
 800702e:	f7ff bc83 	b.w	8006938 <__retarget_lock_release_recursive>
 8007032:	bf00      	nop
 8007034:	200006db 	.word	0x200006db

08007038 <__sinit>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	f7ff fff0 	bl	8007020 <__sinit_lock_acquire>
 8007040:	69a3      	ldr	r3, [r4, #24]
 8007042:	b11b      	cbz	r3, 800704c <__sinit+0x14>
 8007044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007048:	f7ff bff0 	b.w	800702c <__sinit_lock_release>
 800704c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007050:	6523      	str	r3, [r4, #80]	; 0x50
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <__sinit+0x68>)
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <__sinit+0x6c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	62a2      	str	r2, [r4, #40]	; 0x28
 800705a:	42a3      	cmp	r3, r4
 800705c:	bf08      	it	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	4620      	mov	r0, r4
 8007062:	bf08      	it	eq
 8007064:	61a3      	streq	r3, [r4, #24]
 8007066:	f000 f81f 	bl	80070a8 <__sfp>
 800706a:	6060      	str	r0, [r4, #4]
 800706c:	4620      	mov	r0, r4
 800706e:	f000 f81b 	bl	80070a8 <__sfp>
 8007072:	60a0      	str	r0, [r4, #8]
 8007074:	4620      	mov	r0, r4
 8007076:	f000 f817 	bl	80070a8 <__sfp>
 800707a:	2200      	movs	r2, #0
 800707c:	2104      	movs	r1, #4
 800707e:	60e0      	str	r0, [r4, #12]
 8007080:	6860      	ldr	r0, [r4, #4]
 8007082:	f7ff ff81 	bl	8006f88 <std>
 8007086:	2201      	movs	r2, #1
 8007088:	2109      	movs	r1, #9
 800708a:	68a0      	ldr	r0, [r4, #8]
 800708c:	f7ff ff7c 	bl	8006f88 <std>
 8007090:	2202      	movs	r2, #2
 8007092:	2112      	movs	r1, #18
 8007094:	68e0      	ldr	r0, [r4, #12]
 8007096:	f7ff ff77 	bl	8006f88 <std>
 800709a:	2301      	movs	r3, #1
 800709c:	61a3      	str	r3, [r4, #24]
 800709e:	e7d1      	b.n	8007044 <__sinit+0xc>
 80070a0:	08007790 	.word	0x08007790
 80070a4:	08006fd1 	.word	0x08006fd1

080070a8 <__sfp>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	4607      	mov	r7, r0
 80070ac:	f7ff ffac 	bl	8007008 <__sfp_lock_acquire>
 80070b0:	4b1e      	ldr	r3, [pc, #120]	; (800712c <__sfp+0x84>)
 80070b2:	681e      	ldr	r6, [r3, #0]
 80070b4:	69b3      	ldr	r3, [r6, #24]
 80070b6:	b913      	cbnz	r3, 80070be <__sfp+0x16>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ffbd 	bl	8007038 <__sinit>
 80070be:	3648      	adds	r6, #72	; 0x48
 80070c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	d503      	bpl.n	80070d0 <__sfp+0x28>
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	b30b      	cbz	r3, 8007110 <__sfp+0x68>
 80070cc:	6836      	ldr	r6, [r6, #0]
 80070ce:	e7f7      	b.n	80070c0 <__sfp+0x18>
 80070d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070d4:	b9d5      	cbnz	r5, 800710c <__sfp+0x64>
 80070d6:	4b16      	ldr	r3, [pc, #88]	; (8007130 <__sfp+0x88>)
 80070d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070dc:	60e3      	str	r3, [r4, #12]
 80070de:	6665      	str	r5, [r4, #100]	; 0x64
 80070e0:	f7ff fc28 	bl	8006934 <__retarget_lock_init_recursive>
 80070e4:	f7ff ff96 	bl	8007014 <__sfp_lock_release>
 80070e8:	2208      	movs	r2, #8
 80070ea:	4629      	mov	r1, r5
 80070ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f4:	6025      	str	r5, [r4, #0]
 80070f6:	61a5      	str	r5, [r4, #24]
 80070f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070fc:	f7fd fb18 	bl	8004730 <memset>
 8007100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007108:	4620      	mov	r0, r4
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710c:	3468      	adds	r4, #104	; 0x68
 800710e:	e7d9      	b.n	80070c4 <__sfp+0x1c>
 8007110:	2104      	movs	r1, #4
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff62 	bl	8006fdc <__sfmoreglue>
 8007118:	4604      	mov	r4, r0
 800711a:	6030      	str	r0, [r6, #0]
 800711c:	2800      	cmp	r0, #0
 800711e:	d1d5      	bne.n	80070cc <__sfp+0x24>
 8007120:	f7ff ff78 	bl	8007014 <__sfp_lock_release>
 8007124:	230c      	movs	r3, #12
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	e7ee      	b.n	8007108 <__sfp+0x60>
 800712a:	bf00      	nop
 800712c:	08007790 	.word	0x08007790
 8007130:	ffff0001 	.word	0xffff0001

08007134 <_fwalk_reent>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	4606      	mov	r6, r0
 800713a:	4688      	mov	r8, r1
 800713c:	2700      	movs	r7, #0
 800713e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007146:	f1b9 0901 	subs.w	r9, r9, #1
 800714a:	d505      	bpl.n	8007158 <_fwalk_reent+0x24>
 800714c:	6824      	ldr	r4, [r4, #0]
 800714e:	2c00      	cmp	r4, #0
 8007150:	d1f7      	bne.n	8007142 <_fwalk_reent+0xe>
 8007152:	4638      	mov	r0, r7
 8007154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d907      	bls.n	800716e <_fwalk_reent+0x3a>
 800715e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007162:	3301      	adds	r3, #1
 8007164:	d003      	beq.n	800716e <_fwalk_reent+0x3a>
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	47c0      	blx	r8
 800716c:	4307      	orrs	r7, r0
 800716e:	3568      	adds	r5, #104	; 0x68
 8007170:	e7e9      	b.n	8007146 <_fwalk_reent+0x12>

08007172 <__swhatbuf_r>:
 8007172:	b570      	push	{r4, r5, r6, lr}
 8007174:	460e      	mov	r6, r1
 8007176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717a:	4614      	mov	r4, r2
 800717c:	2900      	cmp	r1, #0
 800717e:	461d      	mov	r5, r3
 8007180:	b096      	sub	sp, #88	; 0x58
 8007182:	da07      	bge.n	8007194 <__swhatbuf_r+0x22>
 8007184:	2300      	movs	r3, #0
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	89b3      	ldrh	r3, [r6, #12]
 800718a:	061a      	lsls	r2, r3, #24
 800718c:	d410      	bmi.n	80071b0 <__swhatbuf_r+0x3e>
 800718e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007192:	e00e      	b.n	80071b2 <__swhatbuf_r+0x40>
 8007194:	466a      	mov	r2, sp
 8007196:	f000 f903 	bl	80073a0 <_fstat_r>
 800719a:	2800      	cmp	r0, #0
 800719c:	dbf2      	blt.n	8007184 <__swhatbuf_r+0x12>
 800719e:	9a01      	ldr	r2, [sp, #4]
 80071a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a8:	425a      	negs	r2, r3
 80071aa:	415a      	adcs	r2, r3
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	e7ee      	b.n	800718e <__swhatbuf_r+0x1c>
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2000      	movs	r0, #0
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	b016      	add	sp, #88	; 0x58
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071bc <__smakebuf_r>:
 80071bc:	898b      	ldrh	r3, [r1, #12]
 80071be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071c0:	079d      	lsls	r5, r3, #30
 80071c2:	4606      	mov	r6, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	d507      	bpl.n	80071d8 <__smakebuf_r+0x1c>
 80071c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	2301      	movs	r3, #1
 80071d2:	6163      	str	r3, [r4, #20]
 80071d4:	b002      	add	sp, #8
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	466a      	mov	r2, sp
 80071da:	ab01      	add	r3, sp, #4
 80071dc:	f7ff ffc9 	bl	8007172 <__swhatbuf_r>
 80071e0:	9900      	ldr	r1, [sp, #0]
 80071e2:	4605      	mov	r5, r0
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7fd faf7 	bl	80047d8 <_malloc_r>
 80071ea:	b948      	cbnz	r0, 8007200 <__smakebuf_r+0x44>
 80071ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f0:	059a      	lsls	r2, r3, #22
 80071f2:	d4ef      	bmi.n	80071d4 <__smakebuf_r+0x18>
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	81a3      	strh	r3, [r4, #12]
 80071fe:	e7e3      	b.n	80071c8 <__smakebuf_r+0xc>
 8007200:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <__smakebuf_r+0x7c>)
 8007202:	62b3      	str	r3, [r6, #40]	; 0x28
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720c:	81a3      	strh	r3, [r4, #12]
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	6120      	str	r0, [r4, #16]
 8007212:	6163      	str	r3, [r4, #20]
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	b15b      	cbz	r3, 8007230 <__smakebuf_r+0x74>
 8007218:	4630      	mov	r0, r6
 800721a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800721e:	f000 f8d1 	bl	80073c4 <_isatty_r>
 8007222:	b128      	cbz	r0, 8007230 <__smakebuf_r+0x74>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	89a0      	ldrh	r0, [r4, #12]
 8007232:	4305      	orrs	r5, r0
 8007234:	81a5      	strh	r5, [r4, #12]
 8007236:	e7cd      	b.n	80071d4 <__smakebuf_r+0x18>
 8007238:	08006fd1 	.word	0x08006fd1

0800723c <_malloc_usable_size_r>:
 800723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007240:	1f18      	subs	r0, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfbc      	itt	lt
 8007246:	580b      	ldrlt	r3, [r1, r0]
 8007248:	18c0      	addlt	r0, r0, r3
 800724a:	4770      	bx	lr

0800724c <_raise_r>:
 800724c:	291f      	cmp	r1, #31
 800724e:	b538      	push	{r3, r4, r5, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	d904      	bls.n	8007260 <_raise_r+0x14>
 8007256:	2316      	movs	r3, #22
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007262:	b112      	cbz	r2, 800726a <_raise_r+0x1e>
 8007264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007268:	b94b      	cbnz	r3, 800727e <_raise_r+0x32>
 800726a:	4620      	mov	r0, r4
 800726c:	f000 f830 	bl	80072d0 <_getpid_r>
 8007270:	462a      	mov	r2, r5
 8007272:	4601      	mov	r1, r0
 8007274:	4620      	mov	r0, r4
 8007276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727a:	f000 b817 	b.w	80072ac <_kill_r>
 800727e:	2b01      	cmp	r3, #1
 8007280:	d00a      	beq.n	8007298 <_raise_r+0x4c>
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	d103      	bne.n	800728e <_raise_r+0x42>
 8007286:	2316      	movs	r3, #22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	2001      	movs	r0, #1
 800728c:	e7e7      	b.n	800725e <_raise_r+0x12>
 800728e:	2400      	movs	r4, #0
 8007290:	4628      	mov	r0, r5
 8007292:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007296:	4798      	blx	r3
 8007298:	2000      	movs	r0, #0
 800729a:	e7e0      	b.n	800725e <_raise_r+0x12>

0800729c <raise>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <raise+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f7ff bfd3 	b.w	800724c <_raise_r>
 80072a6:	bf00      	nop
 80072a8:	200000c8 	.word	0x200000c8

080072ac <_kill_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	2300      	movs	r3, #0
 80072b0:	4d06      	ldr	r5, [pc, #24]	; (80072cc <_kill_r+0x20>)
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f7fb f98a 	bl	80025d2 <_kill>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_kill_r+0x1c>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_kill_r+0x1c>
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	200006d4 	.word	0x200006d4

080072d0 <_getpid_r>:
 80072d0:	f7fb b978 	b.w	80025c4 <_getpid>

080072d4 <__sread>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	460c      	mov	r4, r1
 80072d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072dc:	f000 f894 	bl	8007408 <_read_r>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	bfab      	itete	ge
 80072e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e6:	89a3      	ldrhlt	r3, [r4, #12]
 80072e8:	181b      	addge	r3, r3, r0
 80072ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ee:	bfac      	ite	ge
 80072f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072f2:	81a3      	strhlt	r3, [r4, #12]
 80072f4:	bd10      	pop	{r4, pc}

080072f6 <__swrite>:
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	461f      	mov	r7, r3
 80072fc:	898b      	ldrh	r3, [r1, #12]
 80072fe:	4605      	mov	r5, r0
 8007300:	05db      	lsls	r3, r3, #23
 8007302:	460c      	mov	r4, r1
 8007304:	4616      	mov	r6, r2
 8007306:	d505      	bpl.n	8007314 <__swrite+0x1e>
 8007308:	2302      	movs	r3, #2
 800730a:	2200      	movs	r2, #0
 800730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007310:	f000 f868 	bl	80073e4 <_lseek_r>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	4632      	mov	r2, r6
 8007318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	4628      	mov	r0, r5
 8007320:	463b      	mov	r3, r7
 8007322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800732a:	f000 b817 	b.w	800735c <_write_r>

0800732e <__sseek>:
 800732e:	b510      	push	{r4, lr}
 8007330:	460c      	mov	r4, r1
 8007332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007336:	f000 f855 	bl	80073e4 <_lseek_r>
 800733a:	1c43      	adds	r3, r0, #1
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	bf15      	itete	ne
 8007340:	6560      	strne	r0, [r4, #84]	; 0x54
 8007342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800734a:	81a3      	strheq	r3, [r4, #12]
 800734c:	bf18      	it	ne
 800734e:	81a3      	strhne	r3, [r4, #12]
 8007350:	bd10      	pop	{r4, pc}

08007352 <__sclose>:
 8007352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007356:	f000 b813 	b.w	8007380 <_close_r>
	...

0800735c <_write_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	4608      	mov	r0, r1
 8007362:	4611      	mov	r1, r2
 8007364:	2200      	movs	r2, #0
 8007366:	4d05      	ldr	r5, [pc, #20]	; (800737c <_write_r+0x20>)
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	f7fb f968 	bl	8002640 <_write>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_write_r+0x1e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_write_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200006d4 	.word	0x200006d4

08007380 <_close_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	2300      	movs	r3, #0
 8007384:	4d05      	ldr	r5, [pc, #20]	; (800739c <_close_r+0x1c>)
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fb f974 	bl	8002678 <_close>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_close_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_close_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200006d4 	.word	0x200006d4

080073a0 <_fstat_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	2300      	movs	r3, #0
 80073a4:	4d06      	ldr	r5, [pc, #24]	; (80073c0 <_fstat_r+0x20>)
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	602b      	str	r3, [r5, #0]
 80073ae:	f7fb f96e 	bl	800268e <_fstat>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d102      	bne.n	80073bc <_fstat_r+0x1c>
 80073b6:	682b      	ldr	r3, [r5, #0]
 80073b8:	b103      	cbz	r3, 80073bc <_fstat_r+0x1c>
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	bd38      	pop	{r3, r4, r5, pc}
 80073be:	bf00      	nop
 80073c0:	200006d4 	.word	0x200006d4

080073c4 <_isatty_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	2300      	movs	r3, #0
 80073c8:	4d05      	ldr	r5, [pc, #20]	; (80073e0 <_isatty_r+0x1c>)
 80073ca:	4604      	mov	r4, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	f7fb f96c 	bl	80026ac <_isatty>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_isatty_r+0x1a>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_isatty_r+0x1a>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	200006d4 	.word	0x200006d4

080073e4 <_lseek_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	2200      	movs	r2, #0
 80073ee:	4d05      	ldr	r5, [pc, #20]	; (8007404 <_lseek_r+0x20>)
 80073f0:	602a      	str	r2, [r5, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f7fb f964 	bl	80026c0 <_lseek>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_lseek_r+0x1e>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_lseek_r+0x1e>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	200006d4 	.word	0x200006d4

08007408 <_read_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	2200      	movs	r2, #0
 8007412:	4d05      	ldr	r5, [pc, #20]	; (8007428 <_read_r+0x20>)
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7fb f8f5 	bl	8002606 <_read>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_read_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_read_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	200006d4 	.word	0x200006d4

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
