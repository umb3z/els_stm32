
TestLcd2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  080080c8  080080c8  000180c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d4  080087d4  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  080087d4  080087d4  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087d4  080087d4  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  080087dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000298  08008a74  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08008a74  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aaa  00000000  00000000  000202c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ae  00000000  00000000  00032d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2d  00000000  00000000  00036f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114e2  00000000  00000000  0004febd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c460  00000000  00000000  0006139f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed7ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  000ed854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	080080b0 	.word	0x080080b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	080080b0 	.word	0x080080b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <Impostazioni>:
 * nb. per abilitare sprintf abilitare questo flag :
 * -u _printf_float in Properties -> C/C++ Build -> Settings -> MCU GCC Linker -> Miscellaneous -> Linker flags
 *
 * */

void Impostazioni() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
	unsigned char previous = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]
	unsigned char next = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	737b      	strb	r3, [r7, #13]
	bool stay = true;
 80010e2:	2301      	movs	r3, #1
 80010e4:	733b      	strb	r3, [r7, #12]
	bool innerstay = true;
 80010e6:	2301      	movs	r3, #1
 80010e8:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 80010ea:	f000 fe47 	bl	8001d7c <lcd_clear>
	lcd_cursor_pos(0, 2);
 80010ee:	2102      	movs	r1, #2
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 fead 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(">");
 80010f6:	486a      	ldr	r0, [pc, #424]	; (80012a0 <Impostazioni+0x1d0>)
 80010f8:	f000 fe94 	bl	8001e24 <lcd_send_string>
	lcd_cursor_pos(19, 2);
 80010fc:	2102      	movs	r1, #2
 80010fe:	2013      	movs	r0, #19
 8001100:	f000 fea6 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_char('<');
 8001104:	203c      	movs	r0, #60	; 0x3c
 8001106:	f000 fed1 	bl	8001eac <lcd_send_char>
	lcd_cursor_pos(0, 0);
 800110a:	2100      	movs	r1, #0
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fe9f 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[0]);
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <Impostazioni+0x1d4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fe84 	bl	8001e24 <lcd_send_string>

	int oldMenuPosition = menuPosition;
 800111c:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <Impostazioni+0x1d8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	607b      	str	r3, [r7, #4]

	menuPosition = 1;
 8001122:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <Impostazioni+0x1d8>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

	while (stay) {
 8001128:	e0b0      	b.n	800128c <Impostazioni+0x1bc>

		switch (current) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <Impostazioni+0x66>
 8001130:	2b13      	cmp	r3, #19
 8001132:	d003      	beq.n	800113c <Impostazioni+0x6c>
 8001134:	e005      	b.n	8001142 <Impostazioni+0x72>
		case 0:
			current = 18;
 8001136:	2312      	movs	r3, #18
 8001138:	73fb      	strb	r3, [r7, #15]
			break;
 800113a:	e002      	b.n	8001142 <Impostazioni+0x72>
		case 19:
			current = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
			break;
 8001140:	bf00      	nop
		}
		previous = current - 1;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3b01      	subs	r3, #1
 8001146:	73bb      	strb	r3, [r7, #14]
		next = current + 1;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3301      	adds	r3, #1
 800114c:	737b      	strb	r3, [r7, #13]
		if (previous == 0)
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <Impostazioni+0x88>
			previous = 18;
 8001154:	2312      	movs	r3, #18
 8001156:	73bb      	strb	r3, [r7, #14]
		if (next == 19)
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	2b13      	cmp	r3, #19
 800115c:	d101      	bne.n	8001162 <Impostazioni+0x92>
			next = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	737b      	strb	r3, [r7, #13]

		lcd_cursor_pos(1, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fe73 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                   ");
 800116a:	4850      	ldr	r0, [pc, #320]	; (80012ac <Impostazioni+0x1dc>)
 800116c:	f000 fe5a 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 1);
 8001170:	2101      	movs	r1, #1
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fe6c 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[previous]);
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <Impostazioni+0x1d4>)
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fe4f 	bl	8001e24 <lcd_send_string>

		lcd_cursor_pos(1, 2);
 8001186:	2102      	movs	r1, #2
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fe61 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                   ");
 800118e:	4847      	ldr	r0, [pc, #284]	; (80012ac <Impostazioni+0x1dc>)
 8001190:	f000 fe48 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 2);
 8001194:	2102      	movs	r1, #2
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fe5a 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[current]);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	4a41      	ldr	r2, [pc, #260]	; (80012a4 <Impostazioni+0x1d4>)
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fe3d 	bl	8001e24 <lcd_send_string>

		lcd_cursor_pos(1, 3);
 80011aa:	2103      	movs	r1, #3
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fe4f 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                   ");
 80011b2:	483e      	ldr	r0, [pc, #248]	; (80012ac <Impostazioni+0x1dc>)
 80011b4:	f000 fe36 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 3);
 80011b8:	2103      	movs	r1, #3
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 fe48 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuImpostazioni[next]);
 80011c0:	7b7b      	ldrb	r3, [r7, #13]
 80011c2:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <Impostazioni+0x1d4>)
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fe2b 	bl	8001e24 <lcd_send_string>

		innerstay = true;
 80011ce:	2301      	movs	r3, #1
 80011d0:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 80011d2:	e054      	b.n	800127e <Impostazioni+0x1ae>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 80011d4:	2120      	movs	r1, #32
 80011d6:	4836      	ldr	r0, [pc, #216]	; (80012b0 <Impostazioni+0x1e0>)
 80011d8:	f001 ff06 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d122      	bne.n	8001228 <Impostazioni+0x158>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 80011e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011e6:	f001 fc49 	bl	8002a7c <HAL_Delay>
				ImpostazioniCambiaValore(current);
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f863 	bl	80012b8 <ImpostazioniCambiaValore>
				lcd_clear();
 80011f2:	f000 fdc3 	bl	8001d7c <lcd_clear>
				lcd_cursor_pos(0, 2);
 80011f6:	2102      	movs	r1, #2
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fe29 	bl	8001e50 <lcd_cursor_pos>
				lcd_send_string(">");
 80011fe:	4828      	ldr	r0, [pc, #160]	; (80012a0 <Impostazioni+0x1d0>)
 8001200:	f000 fe10 	bl	8001e24 <lcd_send_string>
				lcd_cursor_pos(19, 2);
 8001204:	2102      	movs	r1, #2
 8001206:	2013      	movs	r0, #19
 8001208:	f000 fe22 	bl	8001e50 <lcd_cursor_pos>
				lcd_send_char('<');
 800120c:	203c      	movs	r0, #60	; 0x3c
 800120e:	f000 fe4d 	bl	8001eac <lcd_send_char>
				lcd_cursor_pos(0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f000 fe1b 	bl	8001e50 <lcd_cursor_pos>
				lcd_send_string(MenuImpostazioni[0]);
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <Impostazioni+0x1d4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fe00 	bl	8001e24 <lcd_send_string>
				innerstay = false;
 8001224:	2300      	movs	r3, #0
 8001226:	72fb      	strb	r3, [r7, #11]

			}
			if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122c:	4821      	ldr	r0, [pc, #132]	; (80012b4 <Impostazioni+0x1e4>)
 800122e:	f001 fedb 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10a      	bne.n	800124e <Impostazioni+0x17e>
					== GPIO_PIN_RESET) {
				HAL_Delay(300);
 8001238:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800123c:	f001 fc1e 	bl	8002a7c <HAL_Delay>
				stay = false;
 8001240:	2300      	movs	r3, #0
 8001242:	733b      	strb	r3, [r7, #12]
				innerstay = false;
 8001244:	2300      	movs	r3, #0
 8001246:	72fb      	strb	r3, [r7, #11]
				menuPosition = oldMenuPosition;
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <Impostazioni+0x1d8>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
			}
			if (current != menuPosition) {
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <Impostazioni+0x1d8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d012      	beq.n	800127e <Impostazioni+0x1ae>
				if (menuPosition > 18)
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <Impostazioni+0x1d8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b12      	cmp	r3, #18
 800125e:	dd02      	ble.n	8001266 <Impostazioni+0x196>
					menuPosition = 1;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <Impostazioni+0x1d8>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <Impostazioni+0x1d8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	dc02      	bgt.n	8001274 <Impostazioni+0x1a4>
					menuPosition = 18;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <Impostazioni+0x1d8>)
 8001270:	2212      	movs	r2, #18
 8001272:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <Impostazioni+0x1d8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	73fb      	strb	r3, [r7, #15]
				innerstay = false;
 800127a:	2300      	movs	r3, #0
 800127c:	72fb      	strb	r3, [r7, #11]
		while (innerstay) {
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1a7      	bne.n	80011d4 <Impostazioni+0x104>

			}
		}
		HAL_Delay(300);
 8001284:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001288:	f001 fbf8 	bl	8002a7c <HAL_Delay>
	while (stay) {
 800128c:	7b3b      	ldrb	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f47f af4b 	bne.w	800112a <Impostazioni+0x5a>
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08008254 	.word	0x08008254
 80012a4:	20000000 	.word	0x20000000
 80012a8:	2000070c 	.word	0x2000070c
 80012ac:	08008258 	.word	0x08008258
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	40010800 	.word	0x40010800

080012b8 <ImpostazioniCambiaValore>:

void ImpostazioniCambiaValore(unsigned char current) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

	int oldMenuPosition = menuPosition;
 80012c2:	4ba9      	ldr	r3, [pc, #676]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	60fb      	str	r3, [r7, #12]
	menuPosition = 0;
 80012c8:	4ba7      	ldr	r3, [pc, #668]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	int previousMenuPosition = menuPosition;
 80012ce:	4ba6      	ldr	r3, [pc, #664]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]
	int variation = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
	bool stay = true;
 80012d8:	2301      	movs	r3, #1
 80012da:	72fb      	strb	r3, [r7, #11]

	lcd_clear();
 80012dc:	f000 fd4e 	bl	8001d7c <lcd_clear>
	lcd_cursor_pos(0, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 fdb4 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(MenuImpostazioni[current]);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4aa0      	ldr	r2, [pc, #640]	; (800156c <ImpostazioniCambiaValore+0x2b4>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fd97 	bl	8001e24 <lcd_send_string>
	lcd_cursor_pos(0, 3);
 80012f6:	2103      	movs	r1, #3
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fda9 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string("SEL:OK");
 80012fe:	489c      	ldr	r0, [pc, #624]	; (8001570 <ImpostazioniCambiaValore+0x2b8>)
 8001300:	f000 fd90 	bl	8001e24 <lcd_send_string>
	lcd_cursor_pos(0, 1);
 8001304:	2101      	movs	r1, #1
 8001306:	2000      	movs	r0, #0
 8001308:	f000 fda2 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fa8c 	bl	800182c <ImpostazioniGetStringValueFromMenuIndex>
 8001314:	4603      	mov	r3, r0
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fd84 	bl	8001e24 <lcd_send_string>

	while (stay) {
 800131c:	e271      	b.n	8001802 <ImpostazioniCambiaValore+0x54a>
		if (current == 18
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b12      	cmp	r3, #18
 8001322:	d12e      	bne.n	8001382 <ImpostazioniCambiaValore+0xca>
				&& HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin)
 8001324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001328:	4892      	ldr	r0, [pc, #584]	; (8001574 <ImpostazioniCambiaValore+0x2bc>)
 800132a:	f001 fe5d 	bl	8002fe8 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d126      	bne.n	8001382 <ImpostazioniCambiaValore+0xca>
						== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001334:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001338:	f001 fba0 	bl	8002a7c <HAL_Delay>
			lcd_clear();
 800133c:	f000 fd1e 	bl	8001d7c <lcd_clear>
			lcd_cursor_pos(0, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	f000 fd84 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string(MenuImpostazioni[current]);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4a88      	ldr	r2, [pc, #544]	; (800156c <ImpostazioniCambiaValore+0x2b4>)
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fd67 	bl	8001e24 <lcd_send_string>
			lcd_cursor_pos(0, 3);
 8001356:	2103      	movs	r1, #3
 8001358:	2000      	movs	r0, #0
 800135a:	f000 fd79 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string("....................");
 800135e:	4886      	ldr	r0, [pc, #536]	; (8001578 <ImpostazioniCambiaValore+0x2c0>)
 8001360:	f000 fd60 	bl	8001e24 <lcd_send_string>
			lcd_cursor_pos(0, 1);
 8001364:	2101      	movs	r1, #1
 8001366:	2000      	movs	r0, #0
 8001368:	f000 fd72 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string("Ripristino in corso");
 800136c:	4883      	ldr	r0, [pc, #524]	; (800157c <ImpostazioniCambiaValore+0x2c4>)
 800136e:	f000 fd59 	bl	8001e24 <lcd_send_string>
			HAL_Delay(2000);
 8001372:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001376:	f001 fb81 	bl	8002a7c <HAL_Delay>
			menuPosition = oldMenuPosition;
 800137a:	4a7b      	ldr	r2, [pc, #492]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6013      	str	r3, [r2, #0]
			return;
 8001380:	e243      	b.n	800180a <ImpostazioniCambiaValore+0x552>
		}
		if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 8001382:	2120      	movs	r1, #32
 8001384:	487b      	ldr	r0, [pc, #492]	; (8001574 <ImpostazioniCambiaValore+0x2bc>)
 8001386:	f001 fe2f 	bl	8002fe8 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <ImpostazioniCambiaValore+0xe8>
				== GPIO_PIN_RESET) {
			HAL_Delay(300);
 8001390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001394:	f001 fb72 	bl	8002a7c <HAL_Delay>
			menuPosition = oldMenuPosition;
 8001398:	4a73      	ldr	r2, [pc, #460]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6013      	str	r3, [r2, #0]
			return;
 800139e:	e234      	b.n	800180a <ImpostazioniCambiaValore+0x552>

		}
		if (previousMenuPosition != menuPosition) {
 80013a0:	4b71      	ldr	r3, [pc, #452]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	f000 822b 	beq.w	8001802 <ImpostazioniCambiaValore+0x54a>
			if (menuPosition < previousMenuPosition) {
 80013ac:	4b6e      	ldr	r3, [pc, #440]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dd03      	ble.n	80013be <ImpostazioniCambiaValore+0x106>
				variation = -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	e006      	b.n	80013cc <ImpostazioniCambiaValore+0x114>
			} else if (menuPosition > previousMenuPosition) {
 80013be:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	da01      	bge.n	80013cc <ImpostazioniCambiaValore+0x114>
				variation = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
			}
			previousMenuPosition = menuPosition;
 80013cc:	4b66      	ldr	r3, [pc, #408]	; (8001568 <ImpostazioniCambiaValore+0x2b0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	617b      	str	r3, [r7, #20]

			switch (current) {
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	f200 81fc 	bhi.w	80017d4 <ImpostazioniCambiaValore+0x51c>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <ImpostazioniCambiaValore+0x12c>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	08001429 	.word	0x08001429
 80013e8:	08001445 	.word	0x08001445
 80013ec:	08001461 	.word	0x08001461
 80013f0:	080014d3 	.word	0x080014d3
 80013f4:	080014ff 	.word	0x080014ff
 80013f8:	0800152b 	.word	0x0800152b
 80013fc:	080015a1 	.word	0x080015a1
 8001400:	080015d5 	.word	0x080015d5
 8001404:	08001609 	.word	0x08001609
 8001408:	0800163d 	.word	0x0800163d
 800140c:	08001671 	.word	0x08001671
 8001410:	080016a5 	.word	0x080016a5
 8001414:	080016d9 	.word	0x080016d9
 8001418:	0800170b 	.word	0x0800170b
 800141c:	0800173d 	.word	0x0800173d
 8001420:	08001757 	.word	0x08001757
 8001424:	08001785 	.word	0x08001785
			case 1:
				if (one_turn_mandrel_steps + variation > 0)
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <ImpostazioniCambiaValore+0x2c8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f340 81b4 	ble.w	800179e <ImpostazioniCambiaValore+0x4e6>
					one_turn_mandrel_steps += variation;
 8001436:	4b52      	ldr	r3, [pc, #328]	; (8001580 <ImpostazioniCambiaValore+0x2c8>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	4a50      	ldr	r2, [pc, #320]	; (8001580 <ImpostazioniCambiaValore+0x2c8>)
 8001440:	6013      	str	r3, [r2, #0]
				break;
 8001442:	e1ac      	b.n	800179e <ImpostazioniCambiaValore+0x4e6>
			case 2:
				if (one_turn_screw_steps + variation > 0)
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <ImpostazioniCambiaValore+0x2cc>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 81a8 	beq.w	80017a2 <ImpostazioniCambiaValore+0x4ea>
					one_turn_screw_steps += variation;
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <ImpostazioniCambiaValore+0x2cc>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <ImpostazioniCambiaValore+0x2cc>)
 800145c:	6013      	str	r3, [r2, #0]
				break;
 800145e:	e1a0      	b.n	80017a2 <ImpostazioniCambiaValore+0x4ea>
			case 3:
				if ((((screw_pitch * 1000) + (variation)) / 1000) > 0)
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <ImpostazioniCambiaValore+0x2d0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4949      	ldr	r1, [pc, #292]	; (800158c <ImpostazioniCambiaValore+0x2d4>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fc6c 	bl	8000d44 <__aeabi_fmul>
 800146c:	4603      	mov	r3, r0
 800146e:	461c      	mov	r4, r3
 8001470:	6938      	ldr	r0, [r7, #16]
 8001472:	f7ff fc13 	bl	8000c9c <__aeabi_i2f>
 8001476:	4603      	mov	r3, r0
 8001478:	4619      	mov	r1, r3
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff fb5a 	bl	8000b34 <__addsf3>
 8001480:	4603      	mov	r3, r0
 8001482:	4942      	ldr	r1, [pc, #264]	; (800158c <ImpostazioniCambiaValore+0x2d4>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fd11 	bl	8000eac <__aeabi_fdiv>
 800148a:	4603      	mov	r3, r0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe13 	bl	80010bc <__aeabi_fcmpgt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d100      	bne.n	800149e <ImpostazioniCambiaValore+0x1e6>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
				break;
 800149c:	e19a      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
					screw_pitch = (((screw_pitch * 1000) + (variation)) / 1000);
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <ImpostazioniCambiaValore+0x2d0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	493a      	ldr	r1, [pc, #232]	; (800158c <ImpostazioniCambiaValore+0x2d4>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc4d 	bl	8000d44 <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461c      	mov	r4, r3
 80014ae:	6938      	ldr	r0, [r7, #16]
 80014b0:	f7ff fbf4 	bl	8000c9c <__aeabi_i2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fb3b 	bl	8000b34 <__addsf3>
 80014be:	4603      	mov	r3, r0
 80014c0:	4932      	ldr	r1, [pc, #200]	; (800158c <ImpostazioniCambiaValore+0x2d4>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fcf2 	bl	8000eac <__aeabi_fdiv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <ImpostazioniCambiaValore+0x2d0>)
 80014ce:	601a      	str	r2, [r3, #0]
				break;
 80014d0:	e180      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
			case 4:
				if (AccelerationDelay + variation * 5 > 0)
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <ImpostazioniCambiaValore+0x2d8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 815f 	beq.w	80017a6 <ImpostazioniCambiaValore+0x4ee>
					AccelerationDelay += (variation * 5);
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <ImpostazioniCambiaValore+0x2d8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <ImpostazioniCambiaValore+0x2d8>)
 80014fa:	6013      	str	r3, [r2, #0]
				break;
 80014fc:	e153      	b.n	80017a6 <ImpostazioniCambiaValore+0x4ee>
			case 5:
				if (DecelerationDelay + variation * 5 > 0)
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	461a      	mov	r2, r3
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <ImpostazioniCambiaValore+0x2dc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4413      	add	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 814b 	beq.w	80017aa <ImpostazioniCambiaValore+0x4f2>
					DecelerationDelay += (variation * 5);
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <ImpostazioniCambiaValore+0x2dc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <ImpostazioniCambiaValore+0x2dc>)
 8001526:	6013      	str	r3, [r2, #0]
				break;
 8001528:	e13f      	b.n	80017aa <ImpostazioniCambiaValore+0x4f2>
			case 6:
				CW = !(CW);
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <ImpostazioniCambiaValore+0x2e0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f083 0301 	eor.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <ImpostazioniCambiaValore+0x2e0>)
 8001546:	701a      	strb	r2, [r3, #0]
				CCW = !(CCW);
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <ImpostazioniCambiaValore+0x2e4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <ImpostazioniCambiaValore+0x2e4>)
 8001564:	701a      	strb	r2, [r3, #0]
				break;
 8001566:	e135      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
 8001568:	2000070c 	.word	0x2000070c
 800156c:	20000000 	.word	0x20000000
 8001570:	0800826c 	.word	0x0800826c
 8001574:	40010c00 	.word	0x40010c00
 8001578:	08008274 	.word	0x08008274
 800157c:	0800828c 	.word	0x0800828c
 8001580:	20000080 	.word	0x20000080
 8001584:	20000088 	.word	0x20000088
 8001588:	20000084 	.word	0x20000084
 800158c:	447a0000 	.word	0x447a0000
 8001590:	2000008c 	.word	0x2000008c
 8001594:	20000090 	.word	0x20000090
 8001598:	20000094 	.word	0x20000094
 800159c:	200002b4 	.word	0x200002b4
			case 7:
				if (av_carro[0] + variation / 5 > 0)
 80015a0:	4b9b      	ldr	r3, [pc, #620]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	499b      	ldr	r1, [pc, #620]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80015a8:	fb81 0103 	smull	r0, r1, r1, r3
 80015ac:	1049      	asrs	r1, r1, #1
 80015ae:	17db      	asrs	r3, r3, #31
 80015b0:	1acb      	subs	r3, r1, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80fa 	beq.w	80017ae <ImpostazioniCambiaValore+0x4f6>
					av_carro[0] += (variation / 5);
 80015ba:	4b95      	ldr	r3, [pc, #596]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4994      	ldr	r1, [pc, #592]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80015c2:	fb81 0103 	smull	r0, r1, r1, r3
 80015c6:	1049      	asrs	r1, r1, #1
 80015c8:	17db      	asrs	r3, r3, #31
 80015ca:	1acb      	subs	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	4a90      	ldr	r2, [pc, #576]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80015d0:	6013      	str	r3, [r2, #0]
				break;
 80015d2:	e0ec      	b.n	80017ae <ImpostazioniCambiaValore+0x4f6>
			case 8:
				if (av_trasv[0] + variation / 5 > 0)
 80015d4:	4b90      	ldr	r3, [pc, #576]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	498e      	ldr	r1, [pc, #568]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80015dc:	fb81 0103 	smull	r0, r1, r1, r3
 80015e0:	1049      	asrs	r1, r1, #1
 80015e2:	17db      	asrs	r3, r3, #31
 80015e4:	1acb      	subs	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80e2 	beq.w	80017b2 <ImpostazioniCambiaValore+0x4fa>
					av_trasv[0] += (variation / 5);
 80015ee:	4b8a      	ldr	r3, [pc, #552]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4987      	ldr	r1, [pc, #540]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80015f6:	fb81 0103 	smull	r0, r1, r1, r3
 80015fa:	1049      	asrs	r1, r1, #1
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	4a85      	ldr	r2, [pc, #532]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 8001604:	6013      	str	r3, [r2, #0]
				break;
 8001606:	e0d4      	b.n	80017b2 <ImpostazioniCambiaValore+0x4fa>
			case 9:
				if (av_carro[1] + variation / 5 > 0)
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4981      	ldr	r1, [pc, #516]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 8001610:	fb81 0103 	smull	r0, r1, r1, r3
 8001614:	1049      	asrs	r1, r1, #1
 8001616:	17db      	asrs	r3, r3, #31
 8001618:	1acb      	subs	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80ca 	beq.w	80017b6 <ImpostazioniCambiaValore+0x4fe>
					av_carro[1] += (variation / 5);
 8001622:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	497a      	ldr	r1, [pc, #488]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 800162a:	fb81 0103 	smull	r0, r1, r1, r3
 800162e:	1049      	asrs	r1, r1, #1
 8001630:	17db      	asrs	r3, r3, #31
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	4a76      	ldr	r2, [pc, #472]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 8001638:	6053      	str	r3, [r2, #4]
				break;
 800163a:	e0bc      	b.n	80017b6 <ImpostazioniCambiaValore+0x4fe>
			case 10:
				if (av_trasv[1] + variation / 5 > 0)
 800163c:	4b76      	ldr	r3, [pc, #472]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4974      	ldr	r1, [pc, #464]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 8001644:	fb81 0103 	smull	r0, r1, r1, r3
 8001648:	1049      	asrs	r1, r1, #1
 800164a:	17db      	asrs	r3, r3, #31
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80b2 	beq.w	80017ba <ImpostazioniCambiaValore+0x502>
					av_trasv[1] += (variation / 5);
 8001656:	4b70      	ldr	r3, [pc, #448]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	496d      	ldr	r1, [pc, #436]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 800165e:	fb81 0103 	smull	r0, r1, r1, r3
 8001662:	1049      	asrs	r1, r1, #1
 8001664:	17db      	asrs	r3, r3, #31
 8001666:	1acb      	subs	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	4a6b      	ldr	r2, [pc, #428]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 800166c:	6053      	str	r3, [r2, #4]
				break;
 800166e:	e0a4      	b.n	80017ba <ImpostazioniCambiaValore+0x502>
			case 11:
				if (av_carro[2] + variation / 5 > 0)
 8001670:	4b67      	ldr	r3, [pc, #412]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4967      	ldr	r1, [pc, #412]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 8001678:	fb81 0103 	smull	r0, r1, r1, r3
 800167c:	1049      	asrs	r1, r1, #1
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1acb      	subs	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 809a 	beq.w	80017be <ImpostazioniCambiaValore+0x506>
					av_carro[2] += (variation / 5);
 800168a:	4b61      	ldr	r3, [pc, #388]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4960      	ldr	r1, [pc, #384]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 8001692:	fb81 0103 	smull	r0, r1, r1, r3
 8001696:	1049      	asrs	r1, r1, #1
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1acb      	subs	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80016a0:	6093      	str	r3, [r2, #8]
				break;
 80016a2:	e08c      	b.n	80017be <ImpostazioniCambiaValore+0x506>
			case 12:
				if (av_trasv[2] + variation / 5 > 0)
 80016a4:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	495a      	ldr	r1, [pc, #360]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80016ac:	fb81 0103 	smull	r0, r1, r1, r3
 80016b0:	1049      	asrs	r1, r1, #1
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1acb      	subs	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8082 	beq.w	80017c2 <ImpostazioniCambiaValore+0x50a>
					av_trasv[2] += (variation / 5);
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4953      	ldr	r1, [pc, #332]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80016c6:	fb81 0103 	smull	r0, r1, r1, r3
 80016ca:	1049      	asrs	r1, r1, #1
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 80016d4:	6093      	str	r3, [r2, #8]
				break;
 80016d6:	e074      	b.n	80017c2 <ImpostazioniCambiaValore+0x50a>
			case 13:
				if (av_carro[3] + variation / 5 > 0)
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	494d      	ldr	r1, [pc, #308]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80016e0:	fb81 0103 	smull	r0, r1, r1, r3
 80016e4:	1049      	asrs	r1, r1, #1
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1acb      	subs	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d06a      	beq.n	80017c6 <ImpostazioniCambiaValore+0x50e>
					av_carro[3] += (variation / 5);
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4947      	ldr	r1, [pc, #284]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 80016f8:	fb81 0103 	smull	r0, r1, r1, r3
 80016fc:	1049      	asrs	r1, r1, #1
 80016fe:	17db      	asrs	r3, r3, #31
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	4a42      	ldr	r2, [pc, #264]	; (8001810 <ImpostazioniCambiaValore+0x558>)
 8001706:	60d3      	str	r3, [r2, #12]
				break;
 8001708:	e05d      	b.n	80017c6 <ImpostazioniCambiaValore+0x50e>
			case 14:
				if (av_trasv[3] + variation / 5 > 0)
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4940      	ldr	r1, [pc, #256]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 8001712:	fb81 0103 	smull	r0, r1, r1, r3
 8001716:	1049      	asrs	r1, r1, #1
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1acb      	subs	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d053      	beq.n	80017ca <ImpostazioniCambiaValore+0x512>
					av_trasv[3] += (variation / 5);
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	493a      	ldr	r1, [pc, #232]	; (8001814 <ImpostazioniCambiaValore+0x55c>)
 800172a:	fb81 0103 	smull	r0, r1, r1, r3
 800172e:	1049      	asrs	r1, r1, #1
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1acb      	subs	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <ImpostazioniCambiaValore+0x560>)
 8001738:	60d3      	str	r3, [r2, #12]
				break;
 800173a:	e046      	b.n	80017ca <ImpostazioniCambiaValore+0x512>
			case 15:
				if (thread_offset_steps + variation > 0)
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <ImpostazioniCambiaValore+0x564>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd42      	ble.n	80017ce <ImpostazioniCambiaValore+0x516>
					thread_offset_steps += variation;
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <ImpostazioniCambiaValore+0x564>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <ImpostazioniCambiaValore+0x564>)
 8001752:	6013      	str	r3, [r2, #0]
				break;
 8001754:	e03b      	b.n	80017ce <ImpostazioniCambiaValore+0x516>
			case 16:
				if (NORTON_gearbox + variation > 0)
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <ImpostazioniCambiaValore+0x568>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4413      	add	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd07      	ble.n	8001774 <ImpostazioniCambiaValore+0x4bc>
					NORTON_gearbox += variation;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <ImpostazioniCambiaValore+0x568>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4413      	add	r3, r2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <ImpostazioniCambiaValore+0x568>)
 8001772:	701a      	strb	r2, [r3, #0]
				if (NORTON_gearbox > 3)
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <ImpostazioniCambiaValore+0x568>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d92a      	bls.n	80017d2 <ImpostazioniCambiaValore+0x51a>
					NORTON_gearbox = 3;
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <ImpostazioniCambiaValore+0x568>)
 800177e:	2203      	movs	r2, #3
 8001780:	701a      	strb	r2, [r3, #0]
				break;
 8001782:	e026      	b.n	80017d2 <ImpostazioniCambiaValore+0x51a>
			case 17:
				if (MaxStepperSpeed + variation > 0)
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <ImpostazioniCambiaValore+0x56c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4413      	add	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d021      	beq.n	80017d4 <ImpostazioniCambiaValore+0x51c>
					MaxStepperSpeed += variation;
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <ImpostazioniCambiaValore+0x56c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4413      	add	r3, r2
 8001798:	4a22      	ldr	r2, [pc, #136]	; (8001824 <ImpostazioniCambiaValore+0x56c>)
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e01a      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 800179e:	bf00      	nop
 80017a0:	e018      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017a2:	bf00      	nop
 80017a4:	e016      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017a6:	bf00      	nop
 80017a8:	e014      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017aa:	bf00      	nop
 80017ac:	e012      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017ae:	bf00      	nop
 80017b0:	e010      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017b2:	bf00      	nop
 80017b4:	e00e      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017b6:	bf00      	nop
 80017b8:	e00c      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017ba:	bf00      	nop
 80017bc:	e00a      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017be:	bf00      	nop
 80017c0:	e008      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017c2:	bf00      	nop
 80017c4:	e006      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017c6:	bf00      	nop
 80017c8:	e004      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017ca:	bf00      	nop
 80017cc:	e002      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017ce:	bf00      	nop
 80017d0:	e000      	b.n	80017d4 <ImpostazioniCambiaValore+0x51c>
				break;
 80017d2:	bf00      	nop
			}
			lcd_cursor_pos(0, 1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 fb3a 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string("                    ");
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <ImpostazioniCambiaValore+0x570>)
 80017de:	f000 fb21 	bl	8001e24 <lcd_send_string>
			lcd_cursor_pos(0, 1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fb33 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string(ImpostazioniGetStringValueFromMenuIndex(current));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f81d 	bl	800182c <ImpostazioniGetStringValueFromMenuIndex>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fb15 	bl	8001e24 <lcd_send_string>
			HAL_Delay(300);
 80017fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017fe:	f001 f93d 	bl	8002a7c <HAL_Delay>
	while (stay) {
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f47f ad8a 	bne.w	800131e <ImpostazioniCambiaValore+0x66>
		}
	}
}
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	20000060 	.word	0x20000060
 8001814:	66666667 	.word	0x66666667
 8001818:	20000070 	.word	0x20000070
 800181c:	20000098 	.word	0x20000098
 8001820:	200002cc 	.word	0x200002cc
 8001824:	2000009c 	.word	0x2000009c
 8001828:	080082a0 	.word	0x080082a0

0800182c <ImpostazioniGetStringValueFromMenuIndex>:

char* ImpostazioniGetStringValueFromMenuIndex(unsigned char current) {
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	char *buff;
	buff = malloc(sizeof(char) * 20);
 8001836:	2014      	movs	r0, #20
 8001838:	f003 fd98 	bl	800536c <malloc>
 800183c:	4603      	mov	r3, r0
 800183e:	60bb      	str	r3, [r7, #8]

	switch (current) {
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3b01      	subs	r3, #1
 8001844:	2b11      	cmp	r3, #17
 8001846:	f200 80c5 	bhi.w	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <ImpostazioniGetStringValueFromMenuIndex+0x24>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001899 	.word	0x08001899
 8001854:	080018a9 	.word	0x080018a9
 8001858:	080018b9 	.word	0x080018b9
 800185c:	080018d1 	.word	0x080018d1
 8001860:	080018e1 	.word	0x080018e1
 8001864:	080018f1 	.word	0x080018f1
 8001868:	08001915 	.word	0x08001915
 800186c:	08001925 	.word	0x08001925
 8001870:	08001935 	.word	0x08001935
 8001874:	08001945 	.word	0x08001945
 8001878:	08001955 	.word	0x08001955
 800187c:	08001965 	.word	0x08001965
 8001880:	08001975 	.word	0x08001975
 8001884:	08001985 	.word	0x08001985
 8001888:	08001995 	.word	0x08001995
 800188c:	080019a5 	.word	0x080019a5
 8001890:	080019b7 	.word	0x080019b7
 8001894:	080019c7 	.word	0x080019c7
	case 1:
		sprintf(buff, "%d", one_turn_mandrel_steps);
 8001898:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <ImpostazioniGetStringValueFromMenuIndex+0x200>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4964      	ldr	r1, [pc, #400]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f004 fab1 	bl	8005e08 <siprintf>
		break;
 80018a6:	e095      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 2:
		sprintf(buff, "%d", one_turn_screw_steps);
 80018a8:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <ImpostazioniGetStringValueFromMenuIndex+0x208>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4960      	ldr	r1, [pc, #384]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f004 faa9 	bl	8005e08 <siprintf>
		break;
 80018b6:	e08d      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 3:
		sprintf(buff, "%.3f", screw_pitch);
 80018b8:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <ImpostazioniGetStringValueFromMenuIndex+0x20c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fdb3 	bl	8000428 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	495d      	ldr	r1, [pc, #372]	; (8001a3c <ImpostazioniGetStringValueFromMenuIndex+0x210>)
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f004 fa9d 	bl	8005e08 <siprintf>
		break;
 80018ce:	e081      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 4:
		sprintf(buff, "%d", AccelerationDelay);
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <ImpostazioniGetStringValueFromMenuIndex+0x214>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4956      	ldr	r1, [pc, #344]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f004 fa95 	bl	8005e08 <siprintf>
		break;
 80018de:	e079      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 5:
		sprintf(buff, "%d", DecelerationDelay);
 80018e0:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <ImpostazioniGetStringValueFromMenuIndex+0x218>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4952      	ldr	r1, [pc, #328]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80018e8:	68b8      	ldr	r0, [r7, #8]
 80018ea:	f004 fa8d 	bl	8005e08 <siprintf>
		break;
 80018ee:	e071      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 6:
		if (CCW)
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <ImpostazioniGetStringValueFromMenuIndex+0x21c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <ImpostazioniGetStringValueFromMenuIndex+0xda>
			sprintf(buff, MenuImpostazioni[19]);
 80018f8:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	4619      	mov	r1, r3
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	f004 fa82 	bl	8005e08 <siprintf>
		else
			sprintf(buff, MenuImpostazioni[20]);
		break;
 8001904:	e066      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
			sprintf(buff, MenuImpostazioni[20]);
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 8001908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190a:	4619      	mov	r1, r3
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f004 fa7b 	bl	8005e08 <siprintf>
		break;
 8001912:	e05f      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>

	case 7:
		sprintf(buff, "%d", av_carro[0]);
 8001914:	4b4e      	ldr	r3, [pc, #312]	; (8001a50 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4945      	ldr	r1, [pc, #276]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f004 fa73 	bl	8005e08 <siprintf>
		break;
 8001922:	e057      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 8:
		sprintf(buff, "%d", av_trasv[0]);
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4941      	ldr	r1, [pc, #260]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f004 fa6b 	bl	8005e08 <siprintf>
		break;
 8001932:	e04f      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 9:
		sprintf(buff, "%d", av_carro[1]);
 8001934:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	461a      	mov	r2, r3
 800193a:	493d      	ldr	r1, [pc, #244]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800193c:	68b8      	ldr	r0, [r7, #8]
 800193e:	f004 fa63 	bl	8005e08 <siprintf>
		break;
 8001942:	e047      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 10:
		sprintf(buff, "%d", av_trasv[1]);
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	4939      	ldr	r1, [pc, #228]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800194c:	68b8      	ldr	r0, [r7, #8]
 800194e:	f004 fa5b 	bl	8005e08 <siprintf>
		break;
 8001952:	e03f      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 11:
		sprintf(buff, "%d", av_carro[2]);
 8001954:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	461a      	mov	r2, r3
 800195a:	4935      	ldr	r1, [pc, #212]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f004 fa53 	bl	8005e08 <siprintf>
		break;
 8001962:	e037      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 12:
		sprintf(buff, "%d", av_trasv[2]);
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	461a      	mov	r2, r3
 800196a:	4931      	ldr	r1, [pc, #196]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f004 fa4b 	bl	8005e08 <siprintf>
		break;
 8001972:	e02f      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 13:
		sprintf(buff, "%d", av_carro[3]);
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <ImpostazioniGetStringValueFromMenuIndex+0x224>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	461a      	mov	r2, r3
 800197a:	492d      	ldr	r1, [pc, #180]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f004 fa43 	bl	8005e08 <siprintf>
		break;
 8001982:	e027      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 14:
		sprintf(buff, "%d", av_trasv[3]);
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <ImpostazioniGetStringValueFromMenuIndex+0x228>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	461a      	mov	r2, r3
 800198a:	4929      	ldr	r1, [pc, #164]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800198c:	68b8      	ldr	r0, [r7, #8]
 800198e:	f004 fa3b 	bl	8005e08 <siprintf>
		break;
 8001992:	e01f      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 15:
		sprintf(buff, "%d", thread_offset_steps);
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <ImpostazioniGetStringValueFromMenuIndex+0x22c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4925      	ldr	r1, [pc, #148]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f004 fa33 	bl	8005e08 <siprintf>
		break;
 80019a2:	e017      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 16:
		sprintf(buff, "%d", NORTON_gearbox + 1);
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <ImpostazioniGetStringValueFromMenuIndex+0x230>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	461a      	mov	r2, r3
 80019ac:	4920      	ldr	r1, [pc, #128]	; (8001a30 <ImpostazioniGetStringValueFromMenuIndex+0x204>)
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f004 fa2a 	bl	8005e08 <siprintf>
		break;
 80019b4:	e00e      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 17:
		sprintf(buff, "%lu", MaxStepperSpeed);
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <ImpostazioniGetStringValueFromMenuIndex+0x234>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4929      	ldr	r1, [pc, #164]	; (8001a64 <ImpostazioniGetStringValueFromMenuIndex+0x238>)
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f004 fa22 	bl	8005e08 <siprintf>
		break;
 80019c4:	e006      	b.n	80019d4 <ImpostazioniGetStringValueFromMenuIndex+0x1a8>
	case 18:
		sprintf(buff, MenuImpostazioni[21]);
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <ImpostazioniGetStringValueFromMenuIndex+0x220>)
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	4619      	mov	r1, r3
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f004 fa1b 	bl	8005e08 <siprintf>
		break;
 80019d2:	bf00      	nop
	}

	//ltrim string
	int nhead = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

	while (buff[nhead++] == ' ')
 80019d8:	bf00      	nop
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d0f6      	beq.n	80019da <ImpostazioniGetStringValueFromMenuIndex+0x1ae>
		;

	nhead--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
	memmove(buff, &buff[nhead], strlen(buff) - (nhead));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	18d4      	adds	r4, r2, r3
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f7fe fba9 	bl	8000150 <strlen>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f003 fcc5 	bl	8005398 <memmove>
	buff[strlen(buff) - (nhead)] = '\0';
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f7fe fb9e 	bl	8000150 <strlen>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]

	return buff;
 8001a22:	68bb      	ldr	r3, [r7, #8]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	20000080 	.word	0x20000080
 8001a30:	080082b8 	.word	0x080082b8
 8001a34:	20000088 	.word	0x20000088
 8001a38:	20000084 	.word	0x20000084
 8001a3c:	080082bc 	.word	0x080082bc
 8001a40:	2000008c 	.word	0x2000008c
 8001a44:	20000090 	.word	0x20000090
 8001a48:	200002b4 	.word	0x200002b4
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000060 	.word	0x20000060
 8001a54:	20000070 	.word	0x20000070
 8001a58:	20000098 	.word	0x20000098
 8001a5c:	200002cc 	.word	0x200002cc
 8001a60:	2000009c 	.word	0x2000009c
 8001a64:	080082c4 	.word	0x080082c4

08001a68 <PosizioneAngolare>:
extern int one_turn_mandrel_steps;
extern char buff[];
extern int steps;
extern TIM_HandleTypeDef htim1;

void PosizioneAngolare() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
	float Degrees = 0.00;                       //variable used to store degrees
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
	float old_Degrees = 0.01; //variable to check if the position is changed. Set different from Degrees to print LCD output on the first cycle
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <PosizioneAngolare+0x138>)
 8001a76:	60bb      	str	r3, [r7, #8]
	float AngularRatio = 360.0/(float)one_turn_mandrel_steps; //calculates the degrees per single mandrel encoder step
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <PosizioneAngolare+0x13c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f90d 	bl	8000c9c <__aeabi_i2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4848      	ldr	r0, [pc, #288]	; (8001ba8 <PosizioneAngolare+0x140>)
 8001a88:	f7ff fa10 	bl	8000eac <__aeabi_fdiv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	607b      	str	r3, [r7, #4]

	lcd_clear();
 8001a90:	f000 f974 	bl	8001d7c <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001a94:	2100      	movs	r1, #0
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f9da 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[0]);
 8001a9c:	4b43      	ldr	r3, [pc, #268]	; (8001bac <PosizioneAngolare+0x144>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f9bf 	bl	8001e24 <lcd_send_string>
	lcd_cursor_pos(0, 3);
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f9d1 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(MenuPosizioneAngolare[1]);
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <PosizioneAngolare+0x144>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f9b6 	bl	8001e24 <lcd_send_string>
	steps = 0;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <PosizioneAngolare+0x148>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]



	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001abe:	e05e      	b.n	8001b7e <PosizioneAngolare+0x116>
		if (HAL_GPIO_ReadPin(MENU_RESET_GPIO_Port, MENU_RESET_Pin) == GPIO_PIN_RESET){
 8001ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac4:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <PosizioneAngolare+0x14c>)
 8001ac6:	f001 fa8f 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <PosizioneAngolare+0x7c>
			HAL_Delay(300);
 8001ad0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ad4:	f000 ffd2 	bl	8002a7c <HAL_Delay>
			steps = 0;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <PosizioneAngolare+0x148>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
			Degrees = 0;
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
		}

		Degrees = ((float) ((abs(steps) % one_turn_mandrel_steps))
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <PosizioneAngolare+0x148>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bfb8      	it	lt
 8001aec:	425b      	neglt	r3, r3
 8001aee:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <PosizioneAngolare+0x13c>)
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001af6:	fb02 f201 	mul.w	r2, r2, r1
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f8cd 	bl	8000c9c <__aeabi_i2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff f91c 	bl	8000d44 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
				* AngularRatio);
		steps = TIM1->CNT;
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <PosizioneAngolare+0x150>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <PosizioneAngolare+0x148>)
 8001b18:	601a      	str	r2, [r3, #0]
		if (steps < 0)
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <PosizioneAngolare+0x148>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da05      	bge.n	8001b2e <PosizioneAngolare+0xc6>
			Degrees = 360 - Degrees;
 8001b22:	68f9      	ldr	r1, [r7, #12]
 8001b24:	4820      	ldr	r0, [pc, #128]	; (8001ba8 <PosizioneAngolare+0x140>)
 8001b26:	f7ff f803 	bl	8000b30 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]
		if (Degrees == 360)
 8001b2e:	491e      	ldr	r1, [pc, #120]	; (8001ba8 <PosizioneAngolare+0x140>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fa9b 	bl	800106c <__aeabi_fcmpeq>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <PosizioneAngolare+0xda>
			Degrees = 0;
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
		if (Degrees != old_Degrees) {
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fa91 	bl	800106c <__aeabi_fcmpeq>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d000      	beq.n	8001b52 <PosizioneAngolare+0xea>
 8001b50:	e015      	b.n	8001b7e <PosizioneAngolare+0x116>
			lcd_cursor_pos(1, 1);
 8001b52:	2101      	movs	r1, #1
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 f97b 	bl	8001e50 <lcd_cursor_pos>
			sprintf(buff,"gradi:%.3f" , Degrees);
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7fe fc64 	bl	8000428 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4915      	ldr	r1, [pc, #84]	; (8001bbc <PosizioneAngolare+0x154>)
 8001b66:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <PosizioneAngolare+0x158>)
 8001b68:	f004 f94e 	bl	8005e08 <siprintf>
			lcd_send_string(buff);
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <PosizioneAngolare+0x158>)
 8001b6e:	f000 f959 	bl	8001e24 <lcd_send_string>
			old_Degrees = Degrees;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
			HAL_Delay(300);
 8001b76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b7a:	f000 ff7f 	bl	8002a7c <HAL_Delay>
	while (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin) != GPIO_PIN_RESET) {
 8001b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b82:	4810      	ldr	r0, [pc, #64]	; (8001bc4 <PosizioneAngolare+0x15c>)
 8001b84:	f001 fa30 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d198      	bne.n	8001ac0 <PosizioneAngolare+0x58>

		}
	}
	HAL_Delay(300);
 8001b8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b92:	f000 ff73 	bl	8002a7c <HAL_Delay>
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	3c23d70a 	.word	0x3c23d70a
 8001ba4:	20000080 	.word	0x20000080
 8001ba8:	43b40000 	.word	0x43b40000
 8001bac:	20000058 	.word	0x20000058
 8001bb0:	200002b8 	.word	0x200002b8
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40012c00 	.word	0x40012c00
 8001bbc:	080082f8 	.word	0x080082f8
 8001bc0:	20000644 	.word	0x20000644
 8001bc4:	40010800 	.word	0x40010800

08001bc8 <MandrelSpeed>:
extern volatile int menuPosition;
extern volatile float rpm;
extern char buff[];


void MandrelSpeed() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0

	int oldMenuPosition = menuPosition;
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <MandrelSpeed+0xd8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	607b      	str	r3, [r7, #4]
	bool stay = true; //boolean to determine if stay or not in the reading cycle
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]

	lcd_clear();
 8001bd8:	f000 f8d0 	bl	8001d7c <lcd_clear>
	lcd_cursor_pos(0, 0);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f936 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string("*VELOCITA' MANDRINO*");
 8001be4:	482f      	ldr	r0, [pc, #188]	; (8001ca4 <MandrelSpeed+0xdc>)
 8001be6:	f000 f91d 	bl	8001e24 <lcd_send_string>
	float lastRpm = rpm + 0.1;
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <MandrelSpeed+0xe0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc1a 	bl	8000428 <__aeabi_f2d>
 8001bf4:	a328      	add	r3, pc, #160	; (adr r3, 8001c98 <MandrelSpeed+0xd0>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fab7 	bl	800016c <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff3f 	bl	8000a88 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	60bb      	str	r3, [r7, #8]

	while (stay) {
 8001c0e:	e038      	b.n	8001c82 <MandrelSpeed+0xba>
		if (HAL_GPIO_ReadPin(MENU_ESC_GPIO_Port, MENU_ESC_Pin)
 8001c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <MandrelSpeed+0xe4>)
 8001c16:	f001 f9e7 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d108      	bne.n	8001c32 <MandrelSpeed+0x6a>
							== GPIO_PIN_RESET) {
						HAL_Delay(300);
 8001c20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c24:	f000 ff2a 	bl	8002a7c <HAL_Delay>
						stay = false;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
						menuPosition = oldMenuPosition;
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <MandrelSpeed+0xd8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
					}
		if (lastRpm != rpm){
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <MandrelSpeed+0xe0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7ff fa17 	bl	800106c <__aeabi_fcmpeq>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d000      	beq.n	8001c46 <MandrelSpeed+0x7e>
 8001c44:	e01d      	b.n	8001c82 <MandrelSpeed+0xba>
			sprintf(buff,"RPM:%.3f",rpm/4.0);
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MandrelSpeed+0xe0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fbec 	bl	8000428 <__aeabi_f2d>
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MandrelSpeed+0xe8>)
 8001c56:	f7fe fd69 	bl	800072c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4915      	ldr	r1, [pc, #84]	; (8001cb4 <MandrelSpeed+0xec>)
 8001c60:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <MandrelSpeed+0xf0>)
 8001c62:	f004 f8d1 	bl	8005e08 <siprintf>
			lcd_cursor_pos(0, 1);
 8001c66:	2101      	movs	r1, #1
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f8f1 	bl	8001e50 <lcd_cursor_pos>
			lcd_send_string(buff);
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MandrelSpeed+0xf0>)
 8001c70:	f000 f8d8 	bl	8001e24 <lcd_send_string>
			lastRpm = rpm;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MandrelSpeed+0xe0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]
			HAL_Delay(3000);
 8001c7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c7e:	f000 fefd 	bl	8002a7c <HAL_Delay>
	while (stay) {
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1c3      	bne.n	8001c10 <MandrelSpeed+0x48>
		}

	}

}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	f3af 8000 	nop.w
 8001c98:	9999999a 	.word	0x9999999a
 8001c9c:	3fb99999 	.word	0x3fb99999
 8001ca0:	2000070c 	.word	0x2000070c
 8001ca4:	08008304 	.word	0x08008304
 8001ca8:	20000664 	.word	0x20000664
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	40100000 	.word	0x40100000
 8001cb4:	0800831c 	.word	0x0800831c
 8001cb8:	20000644 	.word	0x20000644

08001cbc <lcd_send_cmd>:
#include "i2c-lcd.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd(char cmd) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	f043 030c 	orr.w	r3, r3, #12
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	f043 030c 	orr.w	r3, r3, #12
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 8001cf2:	7bbb      	ldrb	r3, [r7, #14]
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001cfc:	f107 0208 	add.w	r2, r7, #8
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2304      	movs	r3, #4
 8001d06:	214e      	movs	r1, #78	; 0x4e
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <lcd_send_cmd+0x5c>)
 8001d0a:	f001 fb03 	bl	8003314 <HAL_I2C_Master_Transmit>
			100);
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200005f0 	.word	0x200005f0

08001d1c <lcd_send_data>:

void lcd_send_data(char data) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f023 030f 	bic.w	r3, r3, #15
 8001d2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	f043 030d 	orr.w	r3, r3, #13
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	f043 0309 	orr.w	r3, r3, #9
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	f043 030d 	orr.w	r3, r3, #13
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	f043 0309 	orr.w	r3, r3, #9
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*) data_t, 4,
 8001d5c:	f107 0208 	add.w	r2, r7, #8
 8001d60:	2364      	movs	r3, #100	; 0x64
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2304      	movs	r3, #4
 8001d66:	214e      	movs	r1, #78	; 0x4e
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <lcd_send_data+0x5c>)
 8001d6a:	f001 fad3 	bl	8003314 <HAL_I2C_Master_Transmit>
			100);
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200005f0 	.word	0x200005f0

08001d7c <lcd_clear>:

void lcd_clear(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff ff9a 	bl	8001cbc <lcd_send_cmd>
	for (int i = 0; i < 100; i++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	e005      	b.n	8001d9a <lcd_clear+0x1e>
		lcd_send_data(' ');
 8001d8e:	2020      	movs	r0, #32
 8001d90:	f7ff ffc4 	bl	8001d1c <lcd_send_data>
	for (int i = 0; i < 100; i++) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b63      	cmp	r3, #99	; 0x63
 8001d9e:	ddf6      	ble.n	8001d8e <lcd_clear+0x12>
	}
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <lcd_init>:

void lcd_init(void) {
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001dae:	2032      	movs	r0, #50	; 0x32
 8001db0:	f000 fe64 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001db4:	2030      	movs	r0, #48	; 0x30
 8001db6:	f7ff ff81 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001dba:	2005      	movs	r0, #5
 8001dbc:	f000 fe5e 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001dc0:	2030      	movs	r0, #48	; 0x30
 8001dc2:	f7ff ff7b 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f000 fe58 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001dcc:	2030      	movs	r0, #48	; 0x30
 8001dce:	f7ff ff75 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(10);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f000 fe52 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8001dd8:	2020      	movs	r0, #32
 8001dda:	f7ff ff6f 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(10);
 8001dde:	200a      	movs	r0, #10
 8001de0:	f000 fe4c 	bl	8002a7c <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001de4:	2028      	movs	r0, #40	; 0x28
 8001de6:	f7ff ff69 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fe46 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001df0:	2008      	movs	r0, #8
 8001df2:	f7ff ff63 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fe40 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff ff5d 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fe3a 	bl	8002a7c <HAL_Delay>
	HAL_Delay(1);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f000 fe37 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001e0e:	2006      	movs	r0, #6
 8001e10:	f7ff ff54 	bl	8001cbc <lcd_send_cmd>
	HAL_Delay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f000 fe31 	bl	8002a7c <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001e1a:	200c      	movs	r0, #12
 8001e1c:	f7ff ff4e 	bl	8001cbc <lcd_send_cmd>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <lcd_send_string>:

void lcd_send_string(char *str) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	while (*str)
 8001e2c:	e006      	b.n	8001e3c <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff70 	bl	8001d1c <lcd_send_data>
	while (*str)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f4      	bne.n	8001e2e <lcd_send_string+0xa>
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <lcd_cursor_pos>:
// -------------------------------------------
// Set cursor position
// -------------------------------------------
void lcd_cursor_pos(char col, char row) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <lcd_cursor_pos+0x58>)
 8001e62:	f107 040c 	add.w	r4, r7, #12
 8001e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > LCD_ROWS) {
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d901      	bls.n	8001e76 <lcd_cursor_pos+0x26>
			row = LCD_ROWS-1;    // we count rows starting w/0
 8001e72:	2303      	movs	r3, #3
 8001e74:	71bb      	strb	r3, [r7, #6]
		}
	char cmd = 0x80|(col + (char)row_offsets[(int)row]);
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	f107 0220 	add.w	r2, r7, #32
 8001e7e:	4413      	add	r3, r2
 8001e80:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	4413      	add	r3, r2
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	77fb      	strb	r3, [r7, #31]
	lcd_send_cmd(cmd);
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff0f 	bl	8001cbc <lcd_send_cmd>
}
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08008328 	.word	0x08008328

08001eac <lcd_send_char>:

void lcd_send_char(char chr) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(chr);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff2f 	bl	8001d1c <lcd_send_data>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ece:	f000 fd73 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed2:	f000 f83f 	bl	8001f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed6:	f000 f98f 	bl	80021f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eda:	f000 f881 	bl	8001fe0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ede:	f000 f8ad 	bl	800203c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ee2:	f000 f903 	bl	80020ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL) != HAL_OK)
 8001ee6:	213c      	movs	r1, #60	; 0x3c
 8001ee8:	4818      	ldr	r0, [pc, #96]	; (8001f4c <main+0x84>)
 8001eea:	f002 fb6f 	bl	80045cc <HAL_TIM_Encoder_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <main+0x30>
	  Error_Handler();
 8001ef4:	f000 fa14 	bl	8002320 <Error_Handler>
  if (HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1)!= HAL_OK)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4815      	ldr	r0, [pc, #84]	; (8001f50 <main+0x88>)
 8001efc:	f002 f9be 	bl	800427c <HAL_TIM_IC_Start_IT>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <main+0x42>
	  Error_Handler();
 8001f06:	f000 fa0b 	bl	8002320 <Error_Handler>

	lcd_init();
 8001f0a:	f7ff ff4e 	bl	8001daa <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
		char scelta;
				  while (true)
				  {
				    scelta = Principale();
 8001f0e:	f000 fa0d 	bl	800232c <Principale>
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
				    switch (scelta) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d00b      	beq.n	8001f34 <main+0x6c>
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	dcf6      	bgt.n	8001f0e <main+0x46>
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d002      	beq.n	8001f2a <main+0x62>
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d00a      	beq.n	8001f3e <main+0x76>
 8001f28:	e00e      	b.n	8001f48 <main+0x80>
				    case 1: lcd_clear(); Impostazioni(); break;
 8001f2a:	f7ff ff27 	bl	8001d7c <lcd_clear>
 8001f2e:	f7ff f8cf 	bl	80010d0 <Impostazioni>
 8001f32:	e009      	b.n	8001f48 <main+0x80>
				    case 6: lcd_clear(); PosizioneAngolare(); break;
 8001f34:	f7ff ff22 	bl	8001d7c <lcd_clear>
 8001f38:	f7ff fd96 	bl	8001a68 <PosizioneAngolare>
 8001f3c:	e004      	b.n	8001f48 <main+0x80>
				    case 5: lcd_clear(); MandrelSpeed(); break;
 8001f3e:	f7ff ff1d 	bl	8001d7c <lcd_clear>
 8001f42:	f7ff fe41 	bl	8001bc8 <MandrelSpeed>
 8001f46:	bf00      	nop
				    scelta = Principale();
 8001f48:	e7e1      	b.n	8001f0e <main+0x46>
 8001f4a:	bf00      	nop
 8001f4c:	20000670 	.word	0x20000670
 8001f50:	200006bc 	.word	0x200006bc

08001f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b090      	sub	sp, #64	; 0x40
 8001f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5a:	f107 0318 	add.w	r3, r7, #24
 8001f5e:	2228      	movs	r2, #40	; 0x28
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fa32 	bl	80053cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f84:	2301      	movs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fcbf 	bl	8003920 <HAL_RCC_OscConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fa8:	f000 f9ba 	bl	8002320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fac:	230f      	movs	r3, #15
 8001fae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 ff2a 	bl	8003e20 <HAL_RCC_ClockConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001fd2:	f000 f9a5 	bl	8002320 <Error_Handler>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3740      	adds	r7, #64	; 0x40
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x50>)
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <MX_I2C1_Init+0x54>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C1_Init+0x50>)
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <MX_I2C1_Init+0x58>)
 8001fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_I2C1_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_I2C1_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_I2C1_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_I2C1_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C1_Init+0x50>)
 800201e:	f001 f835 	bl	800308c <HAL_I2C_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002028:	f000 f97a 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200005f0 	.word	0x200005f0
 8002034:	40005400 	.word	0x40005400
 8002038:	000186a0 	.word	0x000186a0

0800203c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f9be 	bl	80053cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <MX_TIM1_Init+0xa8>)
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <MX_TIM1_Init+0xac>)
 800205c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <MX_TIM1_Init+0xa8>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_TIM1_Init+0xa8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <MX_TIM1_Init+0xa8>)
 800206c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_TIM1_Init+0xa8>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_TIM1_Init+0xa8>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_TIM1_Init+0xa8>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002084:	2303      	movs	r3, #3
 8002086:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002088:	2302      	movs	r3, #2
 800208a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800208c:	2301      	movs	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002098:	2302      	movs	r3, #2
 800209a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800209c:	2301      	movs	r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4619      	mov	r1, r3
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_TIM1_Init+0xa8>)
 80020b0:	f002 f9ea 	bl	8004488 <HAL_TIM_Encoder_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80020ba:	f000 f931 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80020be:	2330      	movs	r3, #48	; 0x30
 80020c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	4619      	mov	r1, r3
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <MX_TIM1_Init+0xa8>)
 80020cc:	f003 f8b4 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020d6:	f000 f923 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000670 	.word	0x20000670
 80020e8:	40012c00 	.word	0x40012c00

080020ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b090      	sub	sp, #64	; 0x40
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <MX_TIM2_Init+0x108>)
 8002128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800212e:	4b31      	ldr	r3, [pc, #196]	; (80021f4 <MX_TIM2_Init+0x108>)
 8002130:	2247      	movs	r2, #71	; 0x47
 8002132:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <MX_TIM2_Init+0x108>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <MX_TIM2_Init+0x108>)
 800213c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <MX_TIM2_Init+0x108>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <MX_TIM2_Init+0x108>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800214e:	4829      	ldr	r0, [pc, #164]	; (80021f4 <MX_TIM2_Init+0x108>)
 8002150:	f001 ffec 	bl	800412c <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800215a:	f000 f8e1 	bl	8002320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002168:	4619      	mov	r1, r3
 800216a:	4822      	ldr	r0, [pc, #136]	; (80021f4 <MX_TIM2_Init+0x108>)
 800216c:	f002 fc78 	bl	8004a60 <HAL_TIM_ConfigClockSource>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002176:	f000 f8d3 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800217a:	481e      	ldr	r0, [pc, #120]	; (80021f4 <MX_TIM2_Init+0x108>)
 800217c:	f002 f825 	bl	80041ca <HAL_TIM_IC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002186:	f000 f8cb 	bl	8002320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800218a:	2304      	movs	r3, #4
 800218c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <MX_TIM2_Init+0x108>)
 800219a:	f002 fd25 	bl	8004be8 <HAL_TIM_SlaveConfigSynchro>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80021a4:	f000 f8bc 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <MX_TIM2_Init+0x108>)
 80021b8:	f003 f83e 	bl	8005238 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021c2:	f000 f8ad 	bl	8002320 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_TRC;
 80021ca:	2303      	movs	r3, #3
 80021cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2200      	movs	r2, #0
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_TIM2_Init+0x108>)
 80021de:	f002 fbab 	bl	8004938 <HAL_TIM_IC_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80021e8:	f000 f89a 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	3740      	adds	r7, #64	; 0x40
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200006bc 	.word	0x200006bc

080021f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <MX_GPIO_Init+0x114>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a3e      	ldr	r2, [pc, #248]	; (800230c <MX_GPIO_Init+0x114>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b3c      	ldr	r3, [pc, #240]	; (800230c <MX_GPIO_Init+0x114>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <MX_GPIO_Init+0x114>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <MX_GPIO_Init+0x114>)
 800222a:	f043 0320 	orr.w	r3, r3, #32
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <MX_GPIO_Init+0x114>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <MX_GPIO_Init+0x114>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <MX_GPIO_Init+0x114>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <MX_GPIO_Init+0x114>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <MX_GPIO_Init+0x114>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <MX_GPIO_Init+0x114>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <MX_GPIO_Init+0x114>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	4827      	ldr	r0, [pc, #156]	; (8002310 <MX_GPIO_Init+0x118>)
 8002274:	f000 fecf 	bl	8003016 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2302      	movs	r3, #2
 8002288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4619      	mov	r1, r3
 8002290:	481f      	ldr	r0, [pc, #124]	; (8002310 <MX_GPIO_Init+0x118>)
 8002292:	f000 fd25 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_RESET_Pin MENU_BUTTON_Pin */
  GPIO_InitStruct.Pin = MENU_RESET_Pin|MENU_BUTTON_Pin;
 8002296:	f248 0320 	movw	r3, #32800	; 0x8020
 800229a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	481a      	ldr	r0, [pc, #104]	; (8002314 <MX_GPIO_Init+0x11c>)
 80022ac:	f000 fd18 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_ESC_Pin */
  GPIO_InitStruct.Pin = MENU_ESC_Pin;
 80022b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_ESC_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	4814      	ldr	r0, [pc, #80]	; (8002318 <MX_GPIO_Init+0x120>)
 80022c6:	f000 fd0b 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_ENCODER_A_Pin MENU_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = MENU_ENCODER_A_Pin|MENU_ENCODER_B_Pin;
 80022ca:	2318      	movs	r3, #24
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_GPIO_Init+0x124>)
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_GPIO_Init+0x11c>)
 80022de:	f000 fcff 	bl	8002ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2009      	movs	r0, #9
 80022e8:	f000 fcc3 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022ec:	2009      	movs	r0, #9
 80022ee:	f000 fcdc 	bl	8002caa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	200a      	movs	r0, #10
 80022f8:	f000 fcbb 	bl	8002c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80022fc:	200a      	movs	r0, #10
 80022fe:	f000 fcd4 	bl	8002caa <HAL_NVIC_EnableIRQ>

}
 8002302:	bf00      	nop
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40011000 	.word	0x40011000
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40010800 	.word	0x40010800
 800231c:	10310000 	.word	0x10310000

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002328:	e7fe      	b.n	8002328 <Error_Handler+0x8>
	...

0800232c <Principale>:
		"Filettatura", "Movimento Libero",  "Velocita' mandrino","Posizione angolare" };

extern int timeToggle;
extern int menuPosition;

char Principale() {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	unsigned char current = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
	unsigned char previous = 6;
 8002336:	2306      	movs	r3, #6
 8002338:	71bb      	strb	r3, [r7, #6]
	unsigned char next = 2;
 800233a:	2302      	movs	r3, #2
 800233c:	717b      	strb	r3, [r7, #5]
	bool stay = true;
 800233e:	2301      	movs	r3, #1
 8002340:	713b      	strb	r3, [r7, #4]
	bool innerstay = true;
 8002342:	2301      	movs	r3, #1
 8002344:	70fb      	strb	r3, [r7, #3]

	lcd_clear();
 8002346:	f7ff fd19 	bl	8001d7c <lcd_clear>
	lcd_cursor_pos(0, 2);
 800234a:	2102      	movs	r1, #2
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff fd7f 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(">");
 8002352:	4851      	ldr	r0, [pc, #324]	; (8002498 <Principale+0x16c>)
 8002354:	f7ff fd66 	bl	8001e24 <lcd_send_string>
	lcd_cursor_pos(19, 2);
 8002358:	2102      	movs	r1, #2
 800235a:	2013      	movs	r0, #19
 800235c:	f7ff fd78 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_char('<');
 8002360:	203c      	movs	r0, #60	; 0x3c
 8002362:	f7ff fda3 	bl	8001eac <lcd_send_char>
	lcd_cursor_pos(0, 0);
 8002366:	2100      	movs	r1, #0
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fd71 	bl	8001e50 <lcd_cursor_pos>
	lcd_send_string(MenuPrincipale[0]);
 800236e:	4b4b      	ldr	r3, [pc, #300]	; (800249c <Principale+0x170>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fd56 	bl	8001e24 <lcd_send_string>
	menuPosition = 1;
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <Principale+0x174>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

	while (stay) {
 800237e:	e082      	b.n	8002486 <Principale+0x15a>
		// LED ON
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//HAL_Delay(timeToggle);

		switch (current) {
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <Principale+0x60>
 8002386:	2b07      	cmp	r3, #7
 8002388:	d003      	beq.n	8002392 <Principale+0x66>
 800238a:	e005      	b.n	8002398 <Principale+0x6c>
		case 0:
			current = 6;
 800238c:	2306      	movs	r3, #6
 800238e:	71fb      	strb	r3, [r7, #7]
			break;
 8002390:	e002      	b.n	8002398 <Principale+0x6c>
		case 7:
			current = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	71fb      	strb	r3, [r7, #7]
			break;
 8002396:	bf00      	nop
		}
		previous = current - 1;
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	3b01      	subs	r3, #1
 800239c:	71bb      	strb	r3, [r7, #6]
		next = current + 1;
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3301      	adds	r3, #1
 80023a2:	717b      	strb	r3, [r7, #5]
		if (previous == 0)
 80023a4:	79bb      	ldrb	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <Principale+0x82>
			previous = 6;
 80023aa:	2306      	movs	r3, #6
 80023ac:	71bb      	strb	r3, [r7, #6]
		if (next == 7)
 80023ae:	797b      	ldrb	r3, [r7, #5]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d101      	bne.n	80023b8 <Principale+0x8c>
			next = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	717b      	strb	r3, [r7, #5]

		lcd_cursor_pos(1, 1);
 80023b8:	2101      	movs	r1, #1
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fd48 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                  ");
 80023c0:	4838      	ldr	r0, [pc, #224]	; (80024a4 <Principale+0x178>)
 80023c2:	f7ff fd2f 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 1);
 80023c6:	2101      	movs	r1, #1
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fd41 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[previous]);
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	4a32      	ldr	r2, [pc, #200]	; (800249c <Principale+0x170>)
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fd24 	bl	8001e24 <lcd_send_string>

		lcd_cursor_pos(1, 2);
 80023dc:	2102      	movs	r1, #2
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fd36 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                  ");
 80023e4:	482f      	ldr	r0, [pc, #188]	; (80024a4 <Principale+0x178>)
 80023e6:	f7ff fd1d 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 2);
 80023ea:	2102      	movs	r1, #2
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7ff fd2f 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[current]);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <Principale+0x170>)
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fd12 	bl	8001e24 <lcd_send_string>

		lcd_cursor_pos(1, 3);
 8002400:	2103      	movs	r1, #3
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff fd24 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string("                  ");
 8002408:	4826      	ldr	r0, [pc, #152]	; (80024a4 <Principale+0x178>)
 800240a:	f7ff fd0b 	bl	8001e24 <lcd_send_string>
		lcd_cursor_pos(1, 3);
 800240e:	2103      	movs	r1, #3
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff fd1d 	bl	8001e50 <lcd_cursor_pos>
		lcd_send_string(MenuPrincipale[next]);
 8002416:	797b      	ldrb	r3, [r7, #5]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <Principale+0x170>)
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fd00 	bl	8001e24 <lcd_send_string>

		innerstay = true;
 8002424:	2301      	movs	r3, #1
 8002426:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 8002428:	e026      	b.n	8002478 <Principale+0x14c>
			if (HAL_GPIO_ReadPin(MENU_BUTTON_GPIO_Port, MENU_BUTTON_Pin)
 800242a:	2120      	movs	r1, #32
 800242c:	481e      	ldr	r0, [pc, #120]	; (80024a8 <Principale+0x17c>)
 800242e:	f000 fddb 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <Principale+0x11c>
					== GPIO_PIN_RESET) {
				stay = false;
 8002438:	2300      	movs	r3, #0
 800243a:	713b      	strb	r3, [r7, #4]
				innerstay = false;
 800243c:	2300      	movs	r3, #0
 800243e:	70fb      	strb	r3, [r7, #3]
				HAL_Delay(300);
 8002440:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002444:	f000 fb1a 	bl	8002a7c <HAL_Delay>
			}
			if (current != menuPosition) {
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <Principale+0x174>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d012      	beq.n	8002478 <Principale+0x14c>
				if (menuPosition >6) menuPosition = 1;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <Principale+0x174>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b06      	cmp	r3, #6
 8002458:	dd02      	ble.n	8002460 <Principale+0x134>
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <Principale+0x174>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
				if (menuPosition < 1) menuPosition = 6;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <Principale+0x174>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	dc02      	bgt.n	800246e <Principale+0x142>
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <Principale+0x174>)
 800246a:	2206      	movs	r2, #6
 800246c:	601a      	str	r2, [r3, #0]
				current = menuPosition;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <Principale+0x174>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
				innerstay = false;
 8002474:	2300      	movs	r3, #0
 8002476:	70fb      	strb	r3, [r7, #3]
		while (innerstay) {
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1d5      	bne.n	800242a <Principale+0xfe>
			}
		}
		HAL_Delay(300);
 800247e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002482:	f000 fafb 	bl	8002a7c <HAL_Delay>
	while (stay) {
 8002486:	793b      	ldrb	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f af79 	bne.w	8002380 <Principale+0x54>
	}

	return current;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	080083b4 	.word	0x080083b4
 800249c:	200000a0 	.word	0x200000a0
 80024a0:	2000070c 	.word	0x2000070c
 80024a4:	080083b8 	.word	0x080083b8
 80024a8:	40010c00 	.word	0x40010c00

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_MspInit+0x5c>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_MspInit+0x5c>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6193      	str	r3, [r2, #24]
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_MspInit+0x5c>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_MspInit+0x5c>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_MspInit+0x5c>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_MspInit+0x5c>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_MspInit+0x60>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_MspInit+0x60>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000

08002510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_I2C_MspInit+0x70>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d123      	bne.n	8002578 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_I2C_MspInit+0x74>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_I2C_MspInit+0x74>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_I2C_MspInit+0x74>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23c0      	movs	r3, #192	; 0xc0
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	480b      	ldr	r0, [pc, #44]	; (8002588 <HAL_I2C_MspInit+0x78>)
 800255c:	f000 fbc0 	bl	8002ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_I2C_MspInit+0x74>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_I2C_MspInit+0x74>)
 8002566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_I2C_MspInit+0x74>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40005400 	.word	0x40005400
 8002584:	40021000 	.word	0x40021000
 8002588:	40010c00 	.word	0x40010c00

0800258c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_TIM_Encoder_MspInit+0x74>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d124      	bne.n	80025f6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_TIM_Encoder_MspInit+0x78>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CHANNEL_A_Pin|CHANNEL_B_Pin;
 80025dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_TIM_Encoder_MspInit+0x7c>)
 80025f2:	f000 fb75 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40010800 	.word	0x40010800

0800260c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d113      	bne.n	8002646 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_TIM_Base_MspInit+0x44>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_TIM_Base_MspInit+0x44>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_TIM_Base_MspInit+0x44>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	201c      	movs	r0, #28
 800263c:	f000 fb19 	bl	8002c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002640:	201c      	movs	r0, #28
 8002642:	f000 fb32 	bl	8002caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f000 f9d3 	bl	8002a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 80026aa:	2108      	movs	r1, #8
 80026ac:	4817      	ldr	r0, [pc, #92]	; (800270c <EXTI3_IRQHandler+0x68>)
 80026ae:	f000 fc9b 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 80026b6:	2110      	movs	r1, #16
 80026b8:	4814      	ldr	r0, [pc, #80]	; (800270c <EXTI3_IRQHandler+0x68>)
 80026ba:	f000 fc95 	bl	8002fe8 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <EXTI3_IRQHandler+0x6c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d104      	bne.n	80026e8 <EXTI3_IRQHandler+0x44>
		menuPosition++;
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <EXTI3_IRQHandler+0x70>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <EXTI3_IRQHandler+0x70>)
 80026e6:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d104      	bne.n	80026f8 <EXTI3_IRQHandler+0x54>
		menuPosition--;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <EXTI3_IRQHandler+0x70>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <EXTI3_IRQHandler+0x70>)
 80026f6:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <EXTI3_IRQHandler+0x6c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_A_Pin);
 80026fe:	2008      	movs	r0, #8
 8002700:	f000 fca2 	bl	8003048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010c00 	.word	0x40010c00
 8002710:	20000660 	.word	0x20000660
 8002714:	2000070c 	.word	0x2000070c

08002718 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int MSB = HAL_GPIO_ReadPin(MENU_ENCODER_A_GPIO_Port, MENU_ENCODER_A_Pin); //MSB = most significant bit
 800271e:	2108      	movs	r1, #8
 8002720:	4817      	ldr	r0, [pc, #92]	; (8002780 <EXTI4_IRQHandler+0x68>)
 8002722:	f000 fc61 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8002726:	4603      	mov	r3, r0
 8002728:	60fb      	str	r3, [r7, #12]
	int LSB = HAL_GPIO_ReadPin(MENU_ENCODER_B_GPIO_Port, MENU_ENCODER_B_Pin); //LSB = least significant bit
 800272a:	2110      	movs	r1, #16
 800272c:	4814      	ldr	r0, [pc, #80]	; (8002780 <EXTI4_IRQHandler+0x68>)
 800272e:	f000 fc5b 	bl	8002fe8 <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
 8002734:	60bb      	str	r3, [r7, #8]

	int encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4313      	orrs	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
	int sum = (lastEncodedMenu << 2) | encoded; //adding it to the previous encoded value
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <EXTI4_IRQHandler+0x6c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4313      	orrs	r3, r2
 800274a:	603b      	str	r3, [r7, #0]

	if (sum == 0b1000)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d104      	bne.n	800275c <EXTI4_IRQHandler+0x44>
		menuPosition++;
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <EXTI4_IRQHandler+0x70>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <EXTI4_IRQHandler+0x70>)
 800275a:	6013      	str	r3, [r2, #0]
	if (sum == 0b0010)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d104      	bne.n	800276c <EXTI4_IRQHandler+0x54>
		menuPosition--;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <EXTI4_IRQHandler+0x70>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3b01      	subs	r3, #1
 8002768:	4a07      	ldr	r2, [pc, #28]	; (8002788 <EXTI4_IRQHandler+0x70>)
 800276a:	6013      	str	r3, [r2, #0]

	lastEncodedMenu = encoded;
 800276c:	4a05      	ldr	r2, [pc, #20]	; (8002784 <EXTI4_IRQHandler+0x6c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ENCODER_B_Pin);
 8002772:	2010      	movs	r0, #16
 8002774:	f000 fc68 	bl	8003048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010c00 	.word	0x40010c00
 8002784:	20000660 	.word	0x20000660
 8002788:	2000070c 	.word	0x2000070c

0800278c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  uint32_t rise = htim2.Instance->CCR1;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <TIM2_IRQHandler+0x48>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	607b      	str	r3, [r7, #4]
  if (rise!=0){
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d012      	beq.n	80027c6 <TIM2_IRQHandler+0x3a>
	  //freq in MHz
	  float freq = 1.0/(float)rise;
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe fa77 	bl	8000c94 <__aeabi_ui2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80027ae:	f7fe fb7d 	bl	8000eac <__aeabi_fdiv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	603b      	str	r3, [r7, #0]
	  //freq in Hz ==>rpm
	  rpm =   1000000*freq;
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <TIM2_IRQHandler+0x4c>)
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	f7fe fac3 	bl	8000d44 <__aeabi_fmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <TIM2_IRQHandler+0x50>)
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <TIM2_IRQHandler+0x48>)
 80027c8:	f001 ffae 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200006bc 	.word	0x200006bc
 80027d8:	49742400 	.word	0x49742400
 80027dc:	20000664 	.word	0x20000664

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <_kill>:

int _kill(int pid, int sig)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f8:	f002 fd8e 	bl	8005318 <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2216      	movs	r2, #22
 8002800:	601a      	str	r2, [r3, #0]
	return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_exit>:

void _exit (int status)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002816:	f04f 31ff 	mov.w	r1, #4294967295
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffe7 	bl	80027ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8002820:	e7fe      	b.n	8002820 <_exit+0x12>

08002822 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e00a      	b.n	800284a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002834:	f3af 8000 	nop.w
 8002838:	4601      	mov	r1, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	60ba      	str	r2, [r7, #8]
 8002840:	b2ca      	uxtb	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	dbf0      	blt.n	8002834 <_read+0x12>
	}

return len;
 8002852:	687b      	ldr	r3, [r7, #4]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e009      	b.n	8002882 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	60ba      	str	r2, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	dbf1      	blt.n	800286e <_write+0x12>
	}
	return len;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_close>:

int _close(int file)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ba:	605a      	str	r2, [r3, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <_isatty>:

int _isatty(int file)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	return 1;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f002 fcf8 	bl	8005318 <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20005000 	.word	0x20005000
 8002954:	00000400 	.word	0x00000400
 8002958:	200002bc 	.word	0x200002bc
 800295c:	20000728 	.word	0x20000728

08002960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800296c:	480c      	ldr	r0, [pc, #48]	; (80029a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296e:	490d      	ldr	r1, [pc, #52]	; (80029a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002970:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002992:	f7ff ffe5 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002996:	f002 fcc5 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299a:	f7ff fa95 	bl	8001ec8 <main>
  bx lr
 800299e:	4770      	bx	lr
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80029a8:	080087dc 	.word	0x080087dc
  ldr r2, =_sbss
 80029ac:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80029b0:	20000728 	.word	0x20000728

080029b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC1_2_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_Init+0x28>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_Init+0x28>)
 80029c2:	f043 0310 	orr.w	r3, r3, #16
 80029c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 f947 	bl	8002c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ce:	200f      	movs	r0, #15
 80029d0:	f000 f808 	bl	80029e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d4:	f7ff fd6a 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x54>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_InitTick+0x58>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f95f 	bl	8002cc6 <HAL_SYSTICK_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00e      	b.n	8002a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d80a      	bhi.n	8002a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f000 f927 	bl	8002c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <HAL_InitTick+0x5c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200000bc 	.word	0x200000bc
 8002a3c:	200000c4 	.word	0x200000c4
 8002a40:	200000c0 	.word	0x200000c0

08002a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x1c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x20>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <HAL_IncTick+0x20>)
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	200000c4 	.word	0x200000c4
 8002a64:	20000714 	.word	0x20000714

08002a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_GetTick+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000714 	.word	0x20000714

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffe0 	bl	8002a68 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200000c4 	.word	0x200000c4

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4906      	ldr	r1, [pc, #24]	; (8002b5c <__NVIC_EnableIRQ+0x34>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	db0a      	blt.n	8002b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	490c      	ldr	r1, [pc, #48]	; (8002bac <__NVIC_SetPriority+0x4c>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b88:	e00a      	b.n	8002ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <__NVIC_SetPriority+0x50>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3b04      	subs	r3, #4
 8002b98:	0112      	lsls	r2, r2, #4
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	761a      	strb	r2, [r3, #24]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f1c3 0307 	rsb	r3, r3, #7
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf28      	it	cs
 8002bd2:	2304      	movcs	r3, #4
 8002bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d902      	bls.n	8002be4 <NVIC_EncodePriority+0x30>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3b03      	subs	r3, #3
 8002be2:	e000      	b.n	8002be6 <NVIC_EncodePriority+0x32>
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	4313      	orrs	r3, r2
         );
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c28:	d301      	bcc.n	8002c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00f      	b.n	8002c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <SysTick_Config+0x40>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c36:	210f      	movs	r1, #15
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f7ff ff90 	bl	8002b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <SysTick_Config+0x40>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c46:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <SysTick_Config+0x40>)
 8002c48:	2207      	movs	r2, #7
 8002c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff2d 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c84:	f7ff ff42 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff ff90 	bl	8002bb4 <NVIC_EncodePriority>
 8002c94:	4602      	mov	r2, r0
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff5f 	bl	8002b60 <__NVIC_SetPriority>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff35 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffa2 	bl	8002c18 <SysTick_Config>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b08b      	sub	sp, #44	; 0x2c
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e169      	b.n	8002fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 8158 	bne.w	8002fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a9a      	ldr	r2, [pc, #616]	; (8002f80 <HAL_GPIO_Init+0x2a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d05e      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d1c:	4a98      	ldr	r2, [pc, #608]	; (8002f80 <HAL_GPIO_Init+0x2a0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d875      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d22:	4a98      	ldr	r2, [pc, #608]	; (8002f84 <HAL_GPIO_Init+0x2a4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d058      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d28:	4a96      	ldr	r2, [pc, #600]	; (8002f84 <HAL_GPIO_Init+0x2a4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d86f      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d2e:	4a96      	ldr	r2, [pc, #600]	; (8002f88 <HAL_GPIO_Init+0x2a8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d052      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d34:	4a94      	ldr	r2, [pc, #592]	; (8002f88 <HAL_GPIO_Init+0x2a8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d869      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d3a:	4a94      	ldr	r2, [pc, #592]	; (8002f8c <HAL_GPIO_Init+0x2ac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04c      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d40:	4a92      	ldr	r2, [pc, #584]	; (8002f8c <HAL_GPIO_Init+0x2ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d863      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d46:	4a92      	ldr	r2, [pc, #584]	; (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d046      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
 8002d4c:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <HAL_GPIO_Init+0x2b0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d85d      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	d82a      	bhi.n	8002dac <HAL_GPIO_Init+0xcc>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d859      	bhi.n	8002e0e <HAL_GPIO_Init+0x12e>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_GPIO_Init+0x80>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002ddb 	.word	0x08002ddb
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002dc7 	.word	0x08002dc7
 8002d6c:	08002e09 	.word	0x08002e09
 8002d70:	08002e0f 	.word	0x08002e0f
 8002d74:	08002e0f 	.word	0x08002e0f
 8002d78:	08002e0f 	.word	0x08002e0f
 8002d7c:	08002e0f 	.word	0x08002e0f
 8002d80:	08002e0f 	.word	0x08002e0f
 8002d84:	08002e0f 	.word	0x08002e0f
 8002d88:	08002e0f 	.word	0x08002e0f
 8002d8c:	08002e0f 	.word	0x08002e0f
 8002d90:	08002e0f 	.word	0x08002e0f
 8002d94:	08002e0f 	.word	0x08002e0f
 8002d98:	08002e0f 	.word	0x08002e0f
 8002d9c:	08002e0f 	.word	0x08002e0f
 8002da0:	08002e0f 	.word	0x08002e0f
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <HAL_GPIO_Init+0x2b4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002db2:	e02c      	b.n	8002e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e029      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e024      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	623b      	str	r3, [r7, #32]
          break;
 8002dce:	e01f      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	623b      	str	r3, [r7, #32]
          break;
 8002dd8:	e01a      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de2:	2304      	movs	r3, #4
 8002de4:	623b      	str	r3, [r7, #32]
          break;
 8002de6:	e013      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df0:	2308      	movs	r3, #8
 8002df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	611a      	str	r2, [r3, #16]
          break;
 8002dfa:	e009      	b.n	8002e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	615a      	str	r2, [r3, #20]
          break;
 8002e06:	e003      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
          break;
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x130>
          break;
 8002e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2bff      	cmp	r3, #255	; 0xff
 8002e14:	d801      	bhi.n	8002e1a <HAL_GPIO_Init+0x13a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	e001      	b.n	8002e1e <HAL_GPIO_Init+0x13e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2bff      	cmp	r3, #255	; 0xff
 8002e24:	d802      	bhi.n	8002e2c <HAL_GPIO_Init+0x14c>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	e002      	b.n	8002e32 <HAL_GPIO_Init+0x152>
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3b08      	subs	r3, #8
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	210f      	movs	r1, #15
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80b1 	beq.w	8002fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e60:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_GPIO_Init+0x2b8>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <HAL_GPIO_Init+0x2c0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_Init+0x1ec>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3f      	ldr	r2, [pc, #252]	; (8002fa4 <HAL_GPIO_Init+0x2c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_Init+0x1e8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <HAL_GPIO_Init+0x2c8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x1e4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3d      	ldr	r2, [pc, #244]	; (8002fac <HAL_GPIO_Init+0x2cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_Init+0x1e0>
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e006      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e004      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e002      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_GPIO_Init+0x1ee>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	f002 0203 	and.w	r2, r2, #3
 8002ed4:	0092      	lsls	r2, r2, #2
 8002ed6:	4093      	lsls	r3, r2
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ede:	492f      	ldr	r1, [pc, #188]	; (8002f9c <HAL_GPIO_Init+0x2bc>)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	492c      	ldr	r1, [pc, #176]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	4928      	ldr	r1, [pc, #160]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	491e      	ldr	r1, [pc, #120]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	4914      	ldr	r1, [pc, #80]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d021      	beq.n	8002fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60cb      	str	r3, [r1, #12]
 8002f7c:	e021      	b.n	8002fc2 <HAL_GPIO_Init+0x2e2>
 8002f7e:	bf00      	nop
 8002f80:	10320000 	.word	0x10320000
 8002f84:	10310000 	.word	0x10310000
 8002f88:	10220000 	.word	0x10220000
 8002f8c:	10210000 	.word	0x10210000
 8002f90:	10120000 	.word	0x10120000
 8002f94:	10110000 	.word	0x10110000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	40010800 	.word	0x40010800
 8002fa4:	40010c00 	.word	0x40010c00
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f47f ae8e 	bne.w	8002cf4 <HAL_GPIO_Init+0x14>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	372c      	adds	r7, #44	; 0x2c
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e001      	b.n	800300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	807b      	strh	r3, [r7, #2]
 8003022:	4613      	mov	r3, r2
 8003024:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302c:	887a      	ldrh	r2, [r7, #2]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003032:	e003      	b.n	800303c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	041a      	lsls	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f806 	bl	8003078 <HAL_GPIO_EXTI_Callback>
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12b      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fa2c 	bl	8002510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f0:	f000 ffea 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a81      	ldr	r2, [pc, #516]	; (8003300 <HAL_I2C_Init+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d807      	bhi.n	8003110 <HAL_I2C_Init+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_I2C_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e006      	b.n	800311e <HAL_I2C_Init+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_I2C_Init+0x27c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0e7      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a78      	ldr	r2, [pc, #480]	; (800330c <HAL_I2C_Init+0x280>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_I2C_Init+0x274>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <HAL_I2C_Init+0xd4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	e009      	b.n	8003174 <HAL_I2C_Init+0xe8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_I2C_Init+0x284>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	495c      	ldr	r1, [pc, #368]	; (8003300 <HAL_I2C_Init+0x274>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d819      	bhi.n	80031c8 <HAL_I2C_Init+0x13c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_I2C_Init+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	e051      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x168>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x18e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x196>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fb9e 	bl	8002a68 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80e0 	bne.w	80034fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4970      	ldr	r1, [pc, #448]	; (8003508 <HAL_I2C_Master_Transmit+0x1f4>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f964 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0d3      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f89c 	bl	8003510 <I2C_MasterRequestWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f9de 	bl	80037c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Master_Transmit+0x188>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f9ce 	bl	8003842 <I2C_WaitOnBTFFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d107      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01a      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d194      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d006      	beq.n	800353a <I2C_MasterRequestWrite+0x2a>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d003      	beq.n	800353a <I2C_MasterRequestWrite+0x2a>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003538:	d108      	bne.n	800354c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e00b      	b.n	8003564 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	2b12      	cmp	r3, #18
 8003552:	d107      	bne.n	8003564 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f84f 	bl	8003614 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d103      	bne.n	8003594 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e035      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d108      	bne.n	80035b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e01b      	b.n	80035ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	11db      	asrs	r3, r3, #7
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 0306 	and.w	r3, r3, #6
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f063 030f 	orn	r3, r3, #15
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <I2C_MasterRequestWrite+0xfc>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f875 	bl	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e010      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <I2C_MasterRequestWrite+0x100>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f865 	bl	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00010008 	.word	0x00010008
 8003610:	00010002 	.word	0x00010002

08003614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003624:	e025      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d021      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7ff fa1b 	bl	8002a68 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d116      	bne.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e023      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10d      	bne.n	8003698 <I2C_WaitOnFlagUntilTimeout+0x84>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	e00c      	b.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d0b6      	beq.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036d0:	e051      	b.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d123      	bne.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e046      	b.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d021      	beq.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7ff f999 	bl	8002a68 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e020      	b.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10c      	bne.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf14      	ite	ne
 8003792:	2301      	movne	r3, #1
 8003794:	2300      	moveq	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e00b      	b.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	43da      	mvns	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d18d      	bne.n	80036d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037cc:	e02d      	b.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f878 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e02d      	b.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d021      	beq.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f93f 	bl	8002a68 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e007      	b.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d1ca      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800384e:	e02d      	b.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f837 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e02d      	b.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d021      	beq.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7ff f8fe 	bl	8002a68 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d1ca      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d11b      	bne.n	8003914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e26c      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003940:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b04      	cmp	r3, #4
 800394a:	d00c      	beq.n	8003966 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800394c:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d112      	bne.n	800397e <HAL_RCC_OscConfig+0x5e>
 8003958:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d10b      	bne.n	800397e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003966:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d06c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x12c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d168      	bne.n	8003a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e246      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x76>
 8003988:	4b80      	ldr	r3, [pc, #512]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7f      	ldr	r2, [pc, #508]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e02e      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x98>
 800399e:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7a      	ldr	r2, [pc, #488]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a77      	ldr	r2, [pc, #476]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0xbc>
 80039c2:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a71      	ldr	r2, [pc, #452]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b6f      	ldr	r3, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd4>
 80039dc:	4b6b      	ldr	r3, [pc, #428]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6a      	ldr	r2, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b68      	ldr	r3, [pc, #416]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a67      	ldr	r2, [pc, #412]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7ff f834 	bl	8002a68 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7ff f830 	bl	8002a68 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1fa      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe4>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff f820 	bl	8002a68 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7ff f81c 	bl	8002a68 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1e6      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x10c>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a5a:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a66:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x18c>
 8003a72:	4b46      	ldr	r3, [pc, #280]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x176>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1ba      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4939      	ldr	r1, [pc, #228]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe ffd5 	bl	8002a68 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe ffd1 	bl	8002a68 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e19b      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4927      	ldr	r1, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <HAL_RCC_OscConfig+0x270>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe ffb4 	bl	8002a68 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fe ffb0 	bl	8002a68 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e17a      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03a      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d019      	beq.n	8003b6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_RCC_OscConfig+0x274>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fe ff94 	bl	8002a68 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe ff90 	bl	8002a68 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e15a      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCC_OscConfig+0x26c>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f000 fac4 	bl	80040f0 <RCC_Delay>
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b70:	f7fe ff7a 	bl	8002a68 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b76:	e00f      	b.n	8003b98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fe ff76 	bl	8002a68 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d908      	bls.n	8003b98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e140      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	42420000 	.word	0x42420000
 8003b94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	4b9e      	ldr	r3, [pc, #632]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e9      	bne.n	8003b78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a6 	beq.w	8003cfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb6:	4b97      	ldr	r3, [pc, #604]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc2:	4b94      	ldr	r3, [pc, #592]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4a93      	ldr	r2, [pc, #588]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	61d3      	str	r3, [r2, #28]
 8003bce:	4b91      	ldr	r3, [pc, #580]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b8e      	ldr	r3, [pc, #568]	; (8003e18 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a8a      	ldr	r2, [pc, #552]	; (8003e18 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fe ff37 	bl	8002a68 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fe ff33 	bl	8002a68 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b64      	cmp	r3, #100	; 0x64
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0fd      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b81      	ldr	r3, [pc, #516]	; (8003e18 <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x312>
 8003c24:	4b7b      	ldr	r3, [pc, #492]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a7a      	ldr	r2, [pc, #488]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6213      	str	r3, [r2, #32]
 8003c30:	e02d      	b.n	8003c8e <HAL_RCC_OscConfig+0x36e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x334>
 8003c3a:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a75      	ldr	r2, [pc, #468]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	6213      	str	r3, [r2, #32]
 8003c46:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4a72      	ldr	r2, [pc, #456]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	6213      	str	r3, [r2, #32]
 8003c52:	e01c      	b.n	8003c8e <HAL_RCC_OscConfig+0x36e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d10c      	bne.n	8003c76 <HAL_RCC_OscConfig+0x356>
 8003c5c:	4b6d      	ldr	r3, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a6c      	ldr	r2, [pc, #432]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	6213      	str	r3, [r2, #32]
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a69      	ldr	r2, [pc, #420]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	e00b      	b.n	8003c8e <HAL_RCC_OscConfig+0x36e>
 8003c76:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a66      	ldr	r2, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6213      	str	r3, [r2, #32]
 8003c82:	4b64      	ldr	r3, [pc, #400]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d015      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe fee7 	bl	8002a68 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fe fee3 	bl	8002a68 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0ab      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ee      	beq.n	8003c9e <HAL_RCC_OscConfig+0x37e>
 8003cc0:	e014      	b.n	8003cec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fed1 	bl	8002a68 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fe fecd 	bl	8002a68 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e095      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ee      	bne.n	8003cca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	4b48      	ldr	r3, [pc, #288]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a47      	ldr	r2, [pc, #284]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8081 	beq.w	8003e0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d08:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d061      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d146      	bne.n	8003daa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_OscConfig+0x4fc>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fea1 	bl	8002a68 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe fe9d 	bl	8002a68 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e067      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d108      	bne.n	8003d64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	492d      	ldr	r1, [pc, #180]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a19      	ldr	r1, [r3, #32]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	430b      	orrs	r3, r1
 8003d76:	4927      	ldr	r1, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_RCC_OscConfig+0x4fc>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe fe71 	bl	8002a68 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fe fe6d 	bl	8002a68 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e037      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x46a>
 8003da8:	e02f      	b.n	8003e0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_RCC_OscConfig+0x4fc>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe fe5a 	bl	8002a68 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe fe56 	bl	8002a68 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e020      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x498>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e013      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42420060 	.word	0x42420060

08003e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0d0      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d910      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4965      	ldr	r1, [pc, #404]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0b8      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e94:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	494d      	ldr	r1, [pc, #308]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d040      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d115      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e073      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06b      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4936      	ldr	r1, [pc, #216]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fdaa 	bl	8002a68 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f18:	f7fe fda6 	bl	8002a68 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e053      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 020c 	and.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1eb      	bne.n	8003f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f40:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d210      	bcs.n	8003f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	4922      	ldr	r1, [pc, #136]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e032      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4916      	ldr	r1, [pc, #88]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fae:	f000 f821 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490a      	ldr	r1, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x1cc>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fd08 	bl	80029e4 <HAL_InitTick>

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	080083dc 	.word	0x080083dc
 8003fec:	200000bc 	.word	0x200000bc
 8003ff0:	200000c0 	.word	0x200000c0

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b490      	push	{r4, r7}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ffc:	1d3c      	adds	r4, r7, #4
 8003ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004004:	f240 2301 	movw	r3, #513	; 0x201
 8004008:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	2300      	movs	r3, #0
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b04      	cmp	r3, #4
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x40>
 800402e:	2b08      	cmp	r3, #8
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x46>
 8004032:	e02d      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004036:	623b      	str	r3, [r7, #32]
      break;
 8004038:	e02d      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004046:	4413      	add	r3, r2
 8004048:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800404c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0c5b      	lsrs	r3, r3, #17
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004066:	4413      	add	r3, r2
 8004068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800406c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004072:	fb02 f203 	mul.w	r2, r2, r3
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e004      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	623b      	str	r3, [r7, #32]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004092:	623b      	str	r3, [r7, #32]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	6a3b      	ldr	r3, [r7, #32]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc90      	pop	{r4, r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	080083cc 	.word	0x080083cc
 80040a8:	40021000 	.word	0x40021000
 80040ac:	007a1200 	.word	0x007a1200
 80040b0:	003d0900 	.word	0x003d0900

080040b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b02      	ldr	r3, [pc, #8]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	200000bc 	.word	0x200000bc

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff2 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	080083ec 	.word	0x080083ec

080040f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <RCC_Delay+0x34>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <RCC_Delay+0x38>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800410c:	bf00      	nop
  }
  while (Delay --);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1e5a      	subs	r2, r3, #1
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f9      	bne.n	800410c <RCC_Delay+0x1c>
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	200000bc 	.word	0x200000bc
 8004128:	10624dd3 	.word	0x10624dd3

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e041      	b.n	80041c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fe fa5a 	bl	800260c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fdac 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e041      	b.n	8004260 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f839 	bl	8004268 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f000 fd5d 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
	...

0800427c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <HAL_TIM_IC_Start_IT+0x1a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e013      	b.n	80042be <HAL_TIM_IC_Start_IT+0x42>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_IC_Start_IT+0x2a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e00b      	b.n	80042be <HAL_TIM_IC_Start_IT+0x42>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_IC_Start_IT+0x3a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e003      	b.n	80042be <HAL_TIM_IC_Start_IT+0x42>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <HAL_TIM_IC_Start_IT+0x54>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e013      	b.n	80042f8 <HAL_TIM_IC_Start_IT+0x7c>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d104      	bne.n	80042e0 <HAL_TIM_IC_Start_IT+0x64>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e00b      	b.n	80042f8 <HAL_TIM_IC_Start_IT+0x7c>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d104      	bne.n	80042f0 <HAL_TIM_IC_Start_IT+0x74>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e003      	b.n	80042f8 <HAL_TIM_IC_Start_IT+0x7c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004300:	7bbb      	ldrb	r3, [r7, #14]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d001      	beq.n	800430a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0b3      	b.n	8004472 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <HAL_TIM_IC_Start_IT+0x9e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	e013      	b.n	8004342 <HAL_TIM_IC_Start_IT+0xc6>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start_IT+0xae>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	e00b      	b.n	8004342 <HAL_TIM_IC_Start_IT+0xc6>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d104      	bne.n	800433a <HAL_TIM_IC_Start_IT+0xbe>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	e003      	b.n	8004342 <HAL_TIM_IC_Start_IT+0xc6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <HAL_TIM_IC_Start_IT+0xd6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004350:	e013      	b.n	800437a <HAL_TIM_IC_Start_IT+0xfe>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d104      	bne.n	8004362 <HAL_TIM_IC_Start_IT+0xe6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	e00b      	b.n	800437a <HAL_TIM_IC_Start_IT+0xfe>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d104      	bne.n	8004372 <HAL_TIM_IC_Start_IT+0xf6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	e003      	b.n	800437a <HAL_TIM_IC_Start_IT+0xfe>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d841      	bhi.n	8004404 <HAL_TIM_IC_Start_IT+0x188>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <HAL_TIM_IC_Start_IT+0x10c>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043bd 	.word	0x080043bd
 800438c:	08004405 	.word	0x08004405
 8004390:	08004405 	.word	0x08004405
 8004394:	08004405 	.word	0x08004405
 8004398:	080043cf 	.word	0x080043cf
 800439c:	08004405 	.word	0x08004405
 80043a0:	08004405 	.word	0x08004405
 80043a4:	08004405 	.word	0x08004405
 80043a8:	080043e1 	.word	0x080043e1
 80043ac:	08004405 	.word	0x08004405
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004405 	.word	0x08004405
 80043b8:	080043f3 	.word	0x080043f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0202 	orr.w	r2, r2, #2
 80043ca:	60da      	str	r2, [r3, #12]
      break;
 80043cc:	e01b      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0204 	orr.w	r2, r2, #4
 80043dc:	60da      	str	r2, [r3, #12]
      break;
 80043de:	e012      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0208 	orr.w	r2, r2, #8
 80043ee:	60da      	str	r2, [r3, #12]
      break;
 80043f0:	e009      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0210 	orr.w	r2, r2, #16
 8004400:	60da      	str	r2, [r3, #12]
      break;
 8004402:	e000      	b.n	8004406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004404:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 feed 	bl	80051ee <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIM_IC_Start_IT+0x200>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_TIM_IC_Start_IT+0x1c0>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d009      	beq.n	800443c <HAL_TIM_IC_Start_IT+0x1c0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <HAL_TIM_IC_Start_IT+0x204>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_TIM_IC_Start_IT+0x1c0>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <HAL_TIM_IC_Start_IT+0x208>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d111      	bne.n	8004460 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d010      	beq.n	8004470 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	e007      	b.n	8004470 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800

08004488 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e093      	b.n	80045c4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fe f86b 	bl	800258c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f000 fbf3 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	4313      	orrs	r3, r2
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004528:	f023 030c 	bic.w	r3, r3, #12
 800452c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	4313      	orrs	r3, r2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	011a      	lsls	r2, r3, #4
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	031b      	lsls	r3, r3, #12
 8004558:	4313      	orrs	r3, r2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4313      	orrs	r3, r2
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d110      	bne.n	800461e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004602:	7b7b      	ldrb	r3, [r7, #13]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e089      	b.n	8004720 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800461c:	e031      	b.n	8004682 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d110      	bne.n	8004646 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800462a:	7b3b      	ldrb	r3, [r7, #12]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e075      	b.n	8004720 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004644:	e01d      	b.n	8004682 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d108      	bne.n	800465e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004652:	7b7b      	ldrb	r3, [r7, #13]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d102      	bne.n	800465e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004658:	7b3b      	ldrb	r3, [r7, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e05e      	b.n	8004720 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d010      	beq.n	80046b0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800468e:	e01f      	b.n	80046d0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fda8 	bl	80051ee <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0202 	orr.w	r2, r2, #2
 80046ac:	60da      	str	r2, [r3, #12]
      break;
 80046ae:	e02e      	b.n	800470e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	2104      	movs	r1, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd98 	bl	80051ee <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0204 	orr.w	r2, r2, #4
 80046cc:	60da      	str	r2, [r3, #12]
      break;
 80046ce:	e01e      	b.n	800470e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fd88 	bl	80051ee <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	2104      	movs	r1, #4
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd81 	bl	80051ee <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0202 	orr.w	r2, r2, #2
 80046fa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0204 	orr.w	r2, r2, #4
 800470a:	60da      	str	r2, [r3, #12]
      break;
 800470c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d122      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0202 	mvn.w	r2, #2
 8004754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa90 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fa83 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fa92 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0204 	mvn.w	r2, #4
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa66 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fa59 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa68 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0208 	mvn.w	r2, #8
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa3c 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa2f 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa3e 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa12 	bl	8004c90 <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa05 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fa14 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0201 	mvn.w	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9e0 	bl	8004c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fd17 	bl	8005306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9d8 	bl	8004cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0220 	mvn.w	r2, #32
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fce2 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_IC_ConfigChannel+0x1a>
 800494e:	2302      	movs	r3, #2
 8004950:	e082      	b.n	8004a58 <HAL_TIM_IC_ConfigChannel+0x120>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f000 fa9a 	bl	8004ea8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 020c 	bic.w	r2, r2, #12
 8004982:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6999      	ldr	r1, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e05a      	b.n	8004a4e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d11c      	bne.n	80049d8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f000 fb03 	bl	8004fb8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6999      	ldr	r1, [r3, #24]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	021a      	lsls	r2, r3, #8
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	619a      	str	r2, [r3, #24]
 80049d6:	e03a      	b.n	8004a4e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d11b      	bne.n	8004a16 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f000 fb4e 	bl	800508e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 020c 	bic.w	r2, r2, #12
 8004a00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69d9      	ldr	r1, [r3, #28]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	61da      	str	r2, [r3, #28]
 8004a14:	e01b      	b.n	8004a4e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f000 fb6d 	bl	8005104 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a38:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69d9      	ldr	r1, [r3, #28]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	021a      	lsls	r2, r3, #8
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_ConfigClockSource+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e0b3      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x180>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab0:	d03e      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0xd0>
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab6:	f200 8087 	bhi.w	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	f000 8085 	beq.w	8004bcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d87f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ac8:	2b70      	cmp	r3, #112	; 0x70
 8004aca:	d01a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xa2>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d87b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad0:	2b60      	cmp	r3, #96	; 0x60
 8004ad2:	d050      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x116>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d877      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad8:	2b50      	cmp	r3, #80	; 0x50
 8004ada:	d03c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xf6>
 8004adc:	2b50      	cmp	r3, #80	; 0x50
 8004ade:	d873      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d058      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x136>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d86f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d064      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d86b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d060      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d867      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d05a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b00:	e062      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f000 fb4d 	bl	80051b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	609a      	str	r2, [r3, #8]
      break;
 8004b2e:	e04e      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f000 fb36 	bl	80051b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b52:	609a      	str	r2, [r3, #8]
      break;
 8004b54:	e03b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 f9fa 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2150      	movs	r1, #80	; 0x50
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb04 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004b74:	e02b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 fa54 	bl	8005030 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2160      	movs	r1, #96	; 0x60
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 faf4 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004b94:	e01b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 f9da 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fae4 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fadb 	bl	800517c <TIM_ITRx_SetConfig>
        break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e031      	b.n	8004c64 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8ba 	bl	8004d8c <TIM_SlaveTimer_SetConfig>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e018      	b.n	8004c64 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c40:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c50:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
	...

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0xb8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_Base_SetConfig+0x30>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d007      	beq.n	8004cf8 <TIM_Base_SetConfig+0x30>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <TIM_Base_SetConfig+0xbc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0x30>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <TIM_Base_SetConfig+0xc0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <TIM_Base_SetConfig+0xb8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	; (8004d84 <TIM_Base_SetConfig+0xbc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0x62>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <TIM_Base_SetConfig+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <TIM_Base_SetConfig+0xb8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800

08004d8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0307 	bic.w	r3, r3, #7
 8004db6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b70      	cmp	r3, #112	; 0x70
 8004dd0:	d01a      	beq.n	8004e08 <TIM_SlaveTimer_SetConfig+0x7c>
 8004dd2:	2b70      	cmp	r3, #112	; 0x70
 8004dd4:	d860      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004dd6:	2b60      	cmp	r3, #96	; 0x60
 8004dd8:	d054      	beq.n	8004e84 <TIM_SlaveTimer_SetConfig+0xf8>
 8004dda:	2b60      	cmp	r3, #96	; 0x60
 8004ddc:	d85c      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004dde:	2b50      	cmp	r3, #80	; 0x50
 8004de0:	d046      	beq.n	8004e70 <TIM_SlaveTimer_SetConfig+0xe4>
 8004de2:	2b50      	cmp	r3, #80	; 0x50
 8004de4:	d858      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d019      	beq.n	8004e1e <TIM_SlaveTimer_SetConfig+0x92>
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d854      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004dee:	2b30      	cmp	r3, #48	; 0x30
 8004df0:	d054      	beq.n	8004e9c <TIM_SlaveTimer_SetConfig+0x110>
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d850      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d050      	beq.n	8004e9c <TIM_SlaveTimer_SetConfig+0x110>
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d84c      	bhi.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d04c      	beq.n	8004e9c <TIM_SlaveTimer_SetConfig+0x110>
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d04a      	beq.n	8004e9c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004e06:	e047      	b.n	8004e98 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68d9      	ldr	r1, [r3, #12]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f000 f9ca 	bl	80051b0 <TIM_ETR_SetConfig>
      break;
 8004e1c:	e03f      	b.n	8004e9e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d101      	bne.n	8004e2a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e03a      	b.n	8004ea0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	621a      	str	r2, [r3, #32]
      break;
 8004e6e:	e016      	b.n	8004e9e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f000 f86d 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      break;
 8004e82:	e00c      	b.n	8004e9e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f000 f8cd 	bl	8005030 <TIM_TI2_ConfigInputStage>
      break;
 8004e96:	e002      	b.n	8004e9e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004e9c:	bf00      	nop
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <TIM_TI1_SetConfig+0xa8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_TI1_SetConfig+0x46>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d007      	beq.n	8004eee <TIM_TI1_SetConfig+0x46>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <TIM_TI1_SetConfig+0xac>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_TI1_SetConfig+0x46>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <TIM_TI1_SetConfig+0xb0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d101      	bne.n	8004ef2 <TIM_TI1_SetConfig+0x4a>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <TIM_TI1_SetConfig+0x4c>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e003      	b.n	8004f12 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f023 030a 	bic.w	r3, r3, #10
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f003 030a 	and.w	r3, r3, #10
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800

08004f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 030a 	bic.w	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0210 	bic.w	r2, r3, #16
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	031b      	lsls	r3, r3, #12
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800500a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	bf00      	nop
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	f023 0210 	bic.w	r2, r3, #16
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	031b      	lsls	r3, r3, #12
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800506c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800508e:	b480      	push	{r7}
 8005090:	b087      	sub	sp, #28
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005142:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	b29b      	uxth	r3, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005156:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	031b      	lsls	r3, r3, #12
 800515c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	f043 0307 	orr.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	021a      	lsls	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2201      	movs	r2, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	43db      	mvns	r3, r3
 8005210:	401a      	ands	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1a      	ldr	r2, [r3, #32]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	431a      	orrs	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800524c:	2302      	movs	r3, #2
 800524e:	e046      	b.n	80052de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529c:	d009      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10c      	bne.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	200000c8 	.word	0x200000c8

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	2600      	movs	r6, #0
 8005328:	4d0c      	ldr	r5, [pc, #48]	; (800535c <__libc_init_array+0x38>)
 800532a:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532c:	1b64      	subs	r4, r4, r5
 800532e:	10a4      	asrs	r4, r4, #2
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	f002 febc 	bl	80080b0 <_init>
 8005338:	2600      	movs	r6, #0
 800533a:	4d0a      	ldr	r5, [pc, #40]	; (8005364 <__libc_init_array+0x40>)
 800533c:	4c0a      	ldr	r4, [pc, #40]	; (8005368 <__libc_init_array+0x44>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	080087d4 	.word	0x080087d4
 8005360:	080087d4 	.word	0x080087d4
 8005364:	080087d4 	.word	0x080087d4
 8005368:	080087d8 	.word	0x080087d8

0800536c <malloc>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <malloc+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f000 b87f 	b.w	8005474 <_malloc_r>
 8005376:	bf00      	nop
 8005378:	200000c8 	.word	0x200000c8

0800537c <memcpy>:
 800537c:	440a      	add	r2, r1
 800537e:	4291      	cmp	r1, r2
 8005380:	f100 33ff 	add.w	r3, r0, #4294967295
 8005384:	d100      	bne.n	8005388 <memcpy+0xc>
 8005386:	4770      	bx	lr
 8005388:	b510      	push	{r4, lr}
 800538a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538e:	4291      	cmp	r1, r2
 8005390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005394:	d1f9      	bne.n	800538a <memcpy+0xe>
 8005396:	bd10      	pop	{r4, pc}

08005398 <memmove>:
 8005398:	4288      	cmp	r0, r1
 800539a:	b510      	push	{r4, lr}
 800539c:	eb01 0402 	add.w	r4, r1, r2
 80053a0:	d902      	bls.n	80053a8 <memmove+0x10>
 80053a2:	4284      	cmp	r4, r0
 80053a4:	4623      	mov	r3, r4
 80053a6:	d807      	bhi.n	80053b8 <memmove+0x20>
 80053a8:	1e43      	subs	r3, r0, #1
 80053aa:	42a1      	cmp	r1, r4
 80053ac:	d008      	beq.n	80053c0 <memmove+0x28>
 80053ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053b6:	e7f8      	b.n	80053aa <memmove+0x12>
 80053b8:	4601      	mov	r1, r0
 80053ba:	4402      	add	r2, r0
 80053bc:	428a      	cmp	r2, r1
 80053be:	d100      	bne.n	80053c2 <memmove+0x2a>
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053ca:	e7f7      	b.n	80053bc <memmove+0x24>

080053cc <memset>:
 80053cc:	4603      	mov	r3, r0
 80053ce:	4402      	add	r2, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	f803 1b01 	strb.w	r1, [r3], #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <_free_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4605      	mov	r5, r0
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d043      	beq.n	800546c <_free_r+0x90>
 80053e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e8:	1f0c      	subs	r4, r1, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfb8      	it	lt
 80053ee:	18e4      	addlt	r4, r4, r3
 80053f0:	f001 fbba 	bl	8006b68 <__malloc_lock>
 80053f4:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <_free_r+0x94>)
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	4610      	mov	r0, r2
 80053fa:	b933      	cbnz	r3, 800540a <_free_r+0x2e>
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	6014      	str	r4, [r2, #0]
 8005400:	4628      	mov	r0, r5
 8005402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005406:	f001 bbb5 	b.w	8006b74 <__malloc_unlock>
 800540a:	42a3      	cmp	r3, r4
 800540c:	d90a      	bls.n	8005424 <_free_r+0x48>
 800540e:	6821      	ldr	r1, [r4, #0]
 8005410:	1862      	adds	r2, r4, r1
 8005412:	4293      	cmp	r3, r2
 8005414:	bf01      	itttt	eq
 8005416:	681a      	ldreq	r2, [r3, #0]
 8005418:	685b      	ldreq	r3, [r3, #4]
 800541a:	1852      	addeq	r2, r2, r1
 800541c:	6022      	streq	r2, [r4, #0]
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	6004      	str	r4, [r0, #0]
 8005422:	e7ed      	b.n	8005400 <_free_r+0x24>
 8005424:	461a      	mov	r2, r3
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b10b      	cbz	r3, 800542e <_free_r+0x52>
 800542a:	42a3      	cmp	r3, r4
 800542c:	d9fa      	bls.n	8005424 <_free_r+0x48>
 800542e:	6811      	ldr	r1, [r2, #0]
 8005430:	1850      	adds	r0, r2, r1
 8005432:	42a0      	cmp	r0, r4
 8005434:	d10b      	bne.n	800544e <_free_r+0x72>
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	4401      	add	r1, r0
 800543a:	1850      	adds	r0, r2, r1
 800543c:	4283      	cmp	r3, r0
 800543e:	6011      	str	r1, [r2, #0]
 8005440:	d1de      	bne.n	8005400 <_free_r+0x24>
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4401      	add	r1, r0
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	6053      	str	r3, [r2, #4]
 800544c:	e7d8      	b.n	8005400 <_free_r+0x24>
 800544e:	d902      	bls.n	8005456 <_free_r+0x7a>
 8005450:	230c      	movs	r3, #12
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	e7d4      	b.n	8005400 <_free_r+0x24>
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	1821      	adds	r1, r4, r0
 800545a:	428b      	cmp	r3, r1
 800545c:	bf01      	itttt	eq
 800545e:	6819      	ldreq	r1, [r3, #0]
 8005460:	685b      	ldreq	r3, [r3, #4]
 8005462:	1809      	addeq	r1, r1, r0
 8005464:	6021      	streq	r1, [r4, #0]
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7c9      	b.n	8005400 <_free_r+0x24>
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	bf00      	nop
 8005470:	200002c0 	.word	0x200002c0

08005474 <_malloc_r>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	1ccd      	adds	r5, r1, #3
 8005478:	f025 0503 	bic.w	r5, r5, #3
 800547c:	3508      	adds	r5, #8
 800547e:	2d0c      	cmp	r5, #12
 8005480:	bf38      	it	cc
 8005482:	250c      	movcc	r5, #12
 8005484:	2d00      	cmp	r5, #0
 8005486:	4606      	mov	r6, r0
 8005488:	db01      	blt.n	800548e <_malloc_r+0x1a>
 800548a:	42a9      	cmp	r1, r5
 800548c:	d903      	bls.n	8005496 <_malloc_r+0x22>
 800548e:	230c      	movs	r3, #12
 8005490:	6033      	str	r3, [r6, #0]
 8005492:	2000      	movs	r0, #0
 8005494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005496:	f001 fb67 	bl	8006b68 <__malloc_lock>
 800549a:	4921      	ldr	r1, [pc, #132]	; (8005520 <_malloc_r+0xac>)
 800549c:	680a      	ldr	r2, [r1, #0]
 800549e:	4614      	mov	r4, r2
 80054a0:	b99c      	cbnz	r4, 80054ca <_malloc_r+0x56>
 80054a2:	4f20      	ldr	r7, [pc, #128]	; (8005524 <_malloc_r+0xb0>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	b923      	cbnz	r3, 80054b2 <_malloc_r+0x3e>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4630      	mov	r0, r6
 80054ac:	f000 fc9c 	bl	8005de8 <_sbrk_r>
 80054b0:	6038      	str	r0, [r7, #0]
 80054b2:	4629      	mov	r1, r5
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 fc97 	bl	8005de8 <_sbrk_r>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d123      	bne.n	8005506 <_malloc_r+0x92>
 80054be:	230c      	movs	r3, #12
 80054c0:	4630      	mov	r0, r6
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	f001 fb56 	bl	8006b74 <__malloc_unlock>
 80054c8:	e7e3      	b.n	8005492 <_malloc_r+0x1e>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	1b5b      	subs	r3, r3, r5
 80054ce:	d417      	bmi.n	8005500 <_malloc_r+0x8c>
 80054d0:	2b0b      	cmp	r3, #11
 80054d2:	d903      	bls.n	80054dc <_malloc_r+0x68>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	441c      	add	r4, r3
 80054d8:	6025      	str	r5, [r4, #0]
 80054da:	e004      	b.n	80054e6 <_malloc_r+0x72>
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	42a2      	cmp	r2, r4
 80054e0:	bf0c      	ite	eq
 80054e2:	600b      	streq	r3, [r1, #0]
 80054e4:	6053      	strne	r3, [r2, #4]
 80054e6:	4630      	mov	r0, r6
 80054e8:	f001 fb44 	bl	8006b74 <__malloc_unlock>
 80054ec:	f104 000b 	add.w	r0, r4, #11
 80054f0:	1d23      	adds	r3, r4, #4
 80054f2:	f020 0007 	bic.w	r0, r0, #7
 80054f6:	1ac2      	subs	r2, r0, r3
 80054f8:	d0cc      	beq.n	8005494 <_malloc_r+0x20>
 80054fa:	1a1b      	subs	r3, r3, r0
 80054fc:	50a3      	str	r3, [r4, r2]
 80054fe:	e7c9      	b.n	8005494 <_malloc_r+0x20>
 8005500:	4622      	mov	r2, r4
 8005502:	6864      	ldr	r4, [r4, #4]
 8005504:	e7cc      	b.n	80054a0 <_malloc_r+0x2c>
 8005506:	1cc4      	adds	r4, r0, #3
 8005508:	f024 0403 	bic.w	r4, r4, #3
 800550c:	42a0      	cmp	r0, r4
 800550e:	d0e3      	beq.n	80054d8 <_malloc_r+0x64>
 8005510:	1a21      	subs	r1, r4, r0
 8005512:	4630      	mov	r0, r6
 8005514:	f000 fc68 	bl	8005de8 <_sbrk_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d1dd      	bne.n	80054d8 <_malloc_r+0x64>
 800551c:	e7cf      	b.n	80054be <_malloc_r+0x4a>
 800551e:	bf00      	nop
 8005520:	200002c0 	.word	0x200002c0
 8005524:	200002c4 	.word	0x200002c4

08005528 <__cvt>:
 8005528:	2b00      	cmp	r3, #0
 800552a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552e:	461f      	mov	r7, r3
 8005530:	bfbb      	ittet	lt
 8005532:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005536:	461f      	movlt	r7, r3
 8005538:	2300      	movge	r3, #0
 800553a:	232d      	movlt	r3, #45	; 0x2d
 800553c:	b088      	sub	sp, #32
 800553e:	4614      	mov	r4, r2
 8005540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005542:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005544:	7013      	strb	r3, [r2, #0]
 8005546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005548:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800554c:	f023 0820 	bic.w	r8, r3, #32
 8005550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005554:	d005      	beq.n	8005562 <__cvt+0x3a>
 8005556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800555a:	d100      	bne.n	800555e <__cvt+0x36>
 800555c:	3501      	adds	r5, #1
 800555e:	2302      	movs	r3, #2
 8005560:	e000      	b.n	8005564 <__cvt+0x3c>
 8005562:	2303      	movs	r3, #3
 8005564:	aa07      	add	r2, sp, #28
 8005566:	9204      	str	r2, [sp, #16]
 8005568:	aa06      	add	r2, sp, #24
 800556a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800556e:	e9cd 3500 	strd	r3, r5, [sp]
 8005572:	4622      	mov	r2, r4
 8005574:	463b      	mov	r3, r7
 8005576:	f000 fcf7 	bl	8005f68 <_dtoa_r>
 800557a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800557e:	4606      	mov	r6, r0
 8005580:	d102      	bne.n	8005588 <__cvt+0x60>
 8005582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005584:	07db      	lsls	r3, r3, #31
 8005586:	d522      	bpl.n	80055ce <__cvt+0xa6>
 8005588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800558c:	eb06 0905 	add.w	r9, r6, r5
 8005590:	d110      	bne.n	80055b4 <__cvt+0x8c>
 8005592:	7833      	ldrb	r3, [r6, #0]
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d10a      	bne.n	80055ae <__cvt+0x86>
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4620      	mov	r0, r4
 800559e:	4639      	mov	r1, r7
 80055a0:	f7fb fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80055a4:	b918      	cbnz	r0, 80055ae <__cvt+0x86>
 80055a6:	f1c5 0501 	rsb	r5, r5, #1
 80055aa:	f8ca 5000 	str.w	r5, [sl]
 80055ae:	f8da 3000 	ldr.w	r3, [sl]
 80055b2:	4499      	add	r9, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	4620      	mov	r0, r4
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fb f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80055c0:	b108      	cbz	r0, 80055c6 <__cvt+0x9e>
 80055c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80055c6:	2230      	movs	r2, #48	; 0x30
 80055c8:	9b07      	ldr	r3, [sp, #28]
 80055ca:	454b      	cmp	r3, r9
 80055cc:	d307      	bcc.n	80055de <__cvt+0xb6>
 80055ce:	4630      	mov	r0, r6
 80055d0:	9b07      	ldr	r3, [sp, #28]
 80055d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055d4:	1b9b      	subs	r3, r3, r6
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	b008      	add	sp, #32
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	9107      	str	r1, [sp, #28]
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e7f0      	b.n	80055c8 <__cvt+0xa0>

080055e6 <__exponent>:
 80055e6:	4603      	mov	r3, r0
 80055e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ea:	2900      	cmp	r1, #0
 80055ec:	f803 2b02 	strb.w	r2, [r3], #2
 80055f0:	bfb6      	itet	lt
 80055f2:	222d      	movlt	r2, #45	; 0x2d
 80055f4:	222b      	movge	r2, #43	; 0x2b
 80055f6:	4249      	neglt	r1, r1
 80055f8:	2909      	cmp	r1, #9
 80055fa:	7042      	strb	r2, [r0, #1]
 80055fc:	dd2b      	ble.n	8005656 <__exponent+0x70>
 80055fe:	f10d 0407 	add.w	r4, sp, #7
 8005602:	46a4      	mov	ip, r4
 8005604:	270a      	movs	r7, #10
 8005606:	fb91 f6f7 	sdiv	r6, r1, r7
 800560a:	460a      	mov	r2, r1
 800560c:	46a6      	mov	lr, r4
 800560e:	fb07 1516 	mls	r5, r7, r6, r1
 8005612:	2a63      	cmp	r2, #99	; 0x63
 8005614:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005618:	4631      	mov	r1, r6
 800561a:	f104 34ff 	add.w	r4, r4, #4294967295
 800561e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005622:	dcf0      	bgt.n	8005606 <__exponent+0x20>
 8005624:	3130      	adds	r1, #48	; 0x30
 8005626:	f1ae 0502 	sub.w	r5, lr, #2
 800562a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800562e:	4629      	mov	r1, r5
 8005630:	1c44      	adds	r4, r0, #1
 8005632:	4561      	cmp	r1, ip
 8005634:	d30a      	bcc.n	800564c <__exponent+0x66>
 8005636:	f10d 0209 	add.w	r2, sp, #9
 800563a:	eba2 020e 	sub.w	r2, r2, lr
 800563e:	4565      	cmp	r5, ip
 8005640:	bf88      	it	hi
 8005642:	2200      	movhi	r2, #0
 8005644:	4413      	add	r3, r2
 8005646:	1a18      	subs	r0, r3, r0
 8005648:	b003      	add	sp, #12
 800564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005650:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005654:	e7ed      	b.n	8005632 <__exponent+0x4c>
 8005656:	2330      	movs	r3, #48	; 0x30
 8005658:	3130      	adds	r1, #48	; 0x30
 800565a:	7083      	strb	r3, [r0, #2]
 800565c:	70c1      	strb	r1, [r0, #3]
 800565e:	1d03      	adds	r3, r0, #4
 8005660:	e7f1      	b.n	8005646 <__exponent+0x60>
	...

08005664 <_printf_float>:
 8005664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	b091      	sub	sp, #68	; 0x44
 800566a:	460c      	mov	r4, r1
 800566c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005670:	4616      	mov	r6, r2
 8005672:	461f      	mov	r7, r3
 8005674:	4605      	mov	r5, r0
 8005676:	f001 fa65 	bl	8006b44 <_localeconv_r>
 800567a:	6803      	ldr	r3, [r0, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	9309      	str	r3, [sp, #36]	; 0x24
 8005680:	f7fa fd66 	bl	8000150 <strlen>
 8005684:	2300      	movs	r3, #0
 8005686:	930e      	str	r3, [sp, #56]	; 0x38
 8005688:	f8d8 3000 	ldr.w	r3, [r8]
 800568c:	900a      	str	r0, [sp, #40]	; 0x28
 800568e:	3307      	adds	r3, #7
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	f103 0208 	add.w	r2, r3, #8
 8005698:	f894 9018 	ldrb.w	r9, [r4, #24]
 800569c:	f8d4 b000 	ldr.w	fp, [r4]
 80056a0:	f8c8 2000 	str.w	r2, [r8]
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80056b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80056b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	4640      	mov	r0, r8
 80056bc:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <_printf_float+0x2cc>)
 80056be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056c0:	f7fb f9a4 	bl	8000a0c <__aeabi_dcmpun>
 80056c4:	bb70      	cbnz	r0, 8005724 <_printf_float+0xc0>
 80056c6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ca:	4640      	mov	r0, r8
 80056cc:	4b98      	ldr	r3, [pc, #608]	; (8005930 <_printf_float+0x2cc>)
 80056ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056d0:	f7fb f97e 	bl	80009d0 <__aeabi_dcmple>
 80056d4:	bb30      	cbnz	r0, 8005724 <_printf_float+0xc0>
 80056d6:	2200      	movs	r2, #0
 80056d8:	2300      	movs	r3, #0
 80056da:	4640      	mov	r0, r8
 80056dc:	4651      	mov	r1, sl
 80056de:	f7fb f96d 	bl	80009bc <__aeabi_dcmplt>
 80056e2:	b110      	cbz	r0, 80056ea <_printf_float+0x86>
 80056e4:	232d      	movs	r3, #45	; 0x2d
 80056e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ea:	4b92      	ldr	r3, [pc, #584]	; (8005934 <_printf_float+0x2d0>)
 80056ec:	4892      	ldr	r0, [pc, #584]	; (8005938 <_printf_float+0x2d4>)
 80056ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80056f2:	bf94      	ite	ls
 80056f4:	4698      	movls	r8, r3
 80056f6:	4680      	movhi	r8, r0
 80056f8:	2303      	movs	r3, #3
 80056fa:	f04f 0a00 	mov.w	sl, #0
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	f02b 0304 	bic.w	r3, fp, #4
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	4633      	mov	r3, r6
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	9700      	str	r7, [sp, #0]
 800570e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005710:	f000 f9d4 	bl	8005abc <_printf_common>
 8005714:	3001      	adds	r0, #1
 8005716:	f040 8090 	bne.w	800583a <_printf_float+0x1d6>
 800571a:	f04f 30ff 	mov.w	r0, #4294967295
 800571e:	b011      	add	sp, #68	; 0x44
 8005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005724:	4642      	mov	r2, r8
 8005726:	4653      	mov	r3, sl
 8005728:	4640      	mov	r0, r8
 800572a:	4651      	mov	r1, sl
 800572c:	f7fb f96e 	bl	8000a0c <__aeabi_dcmpun>
 8005730:	b148      	cbz	r0, 8005746 <_printf_float+0xe2>
 8005732:	f1ba 0f00 	cmp.w	sl, #0
 8005736:	bfb8      	it	lt
 8005738:	232d      	movlt	r3, #45	; 0x2d
 800573a:	4880      	ldr	r0, [pc, #512]	; (800593c <_printf_float+0x2d8>)
 800573c:	bfb8      	it	lt
 800573e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005742:	4b7f      	ldr	r3, [pc, #508]	; (8005940 <_printf_float+0x2dc>)
 8005744:	e7d3      	b.n	80056ee <_printf_float+0x8a>
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	d142      	bne.n	80057d6 <_printf_float+0x172>
 8005750:	2306      	movs	r3, #6
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	9206      	str	r2, [sp, #24]
 8005758:	aa0e      	add	r2, sp, #56	; 0x38
 800575a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800575e:	aa0d      	add	r2, sp, #52	; 0x34
 8005760:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005764:	9203      	str	r2, [sp, #12]
 8005766:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800576a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	4642      	mov	r2, r8
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4628      	mov	r0, r5
 8005778:	4653      	mov	r3, sl
 800577a:	910b      	str	r1, [sp, #44]	; 0x2c
 800577c:	f7ff fed4 	bl	8005528 <__cvt>
 8005780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005782:	4680      	mov	r8, r0
 8005784:	2947      	cmp	r1, #71	; 0x47
 8005786:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005788:	d108      	bne.n	800579c <_printf_float+0x138>
 800578a:	1cc8      	adds	r0, r1, #3
 800578c:	db02      	blt.n	8005794 <_printf_float+0x130>
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	4299      	cmp	r1, r3
 8005792:	dd40      	ble.n	8005816 <_printf_float+0x1b2>
 8005794:	f1a9 0902 	sub.w	r9, r9, #2
 8005798:	fa5f f989 	uxtb.w	r9, r9
 800579c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057a0:	d81f      	bhi.n	80057e2 <_printf_float+0x17e>
 80057a2:	464a      	mov	r2, r9
 80057a4:	3901      	subs	r1, #1
 80057a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057aa:	910d      	str	r1, [sp, #52]	; 0x34
 80057ac:	f7ff ff1b 	bl	80055e6 <__exponent>
 80057b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057b2:	4682      	mov	sl, r0
 80057b4:	1813      	adds	r3, r2, r0
 80057b6:	2a01      	cmp	r2, #1
 80057b8:	6123      	str	r3, [r4, #16]
 80057ba:	dc02      	bgt.n	80057c2 <_printf_float+0x15e>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	07d2      	lsls	r2, r2, #31
 80057c0:	d501      	bpl.n	80057c6 <_printf_float+0x162>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d09b      	beq.n	8005706 <_printf_float+0xa2>
 80057ce:	232d      	movs	r3, #45	; 0x2d
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d4:	e797      	b.n	8005706 <_printf_float+0xa2>
 80057d6:	2947      	cmp	r1, #71	; 0x47
 80057d8:	d1bc      	bne.n	8005754 <_printf_float+0xf0>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1ba      	bne.n	8005754 <_printf_float+0xf0>
 80057de:	2301      	movs	r3, #1
 80057e0:	e7b7      	b.n	8005752 <_printf_float+0xee>
 80057e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80057e6:	d118      	bne.n	800581a <_printf_float+0x1b6>
 80057e8:	2900      	cmp	r1, #0
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	dd0b      	ble.n	8005806 <_printf_float+0x1a2>
 80057ee:	6121      	str	r1, [r4, #16]
 80057f0:	b913      	cbnz	r3, 80057f8 <_printf_float+0x194>
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	07d0      	lsls	r0, r2, #31
 80057f6:	d502      	bpl.n	80057fe <_printf_float+0x19a>
 80057f8:	3301      	adds	r3, #1
 80057fa:	440b      	add	r3, r1
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	f04f 0a00 	mov.w	sl, #0
 8005802:	65a1      	str	r1, [r4, #88]	; 0x58
 8005804:	e7df      	b.n	80057c6 <_printf_float+0x162>
 8005806:	b913      	cbnz	r3, 800580e <_printf_float+0x1aa>
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	07d2      	lsls	r2, r2, #31
 800580c:	d501      	bpl.n	8005812 <_printf_float+0x1ae>
 800580e:	3302      	adds	r3, #2
 8005810:	e7f4      	b.n	80057fc <_printf_float+0x198>
 8005812:	2301      	movs	r3, #1
 8005814:	e7f2      	b.n	80057fc <_printf_float+0x198>
 8005816:	f04f 0967 	mov.w	r9, #103	; 0x67
 800581a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800581c:	4299      	cmp	r1, r3
 800581e:	db05      	blt.n	800582c <_printf_float+0x1c8>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	6121      	str	r1, [r4, #16]
 8005824:	07d8      	lsls	r0, r3, #31
 8005826:	d5ea      	bpl.n	80057fe <_printf_float+0x19a>
 8005828:	1c4b      	adds	r3, r1, #1
 800582a:	e7e7      	b.n	80057fc <_printf_float+0x198>
 800582c:	2900      	cmp	r1, #0
 800582e:	bfcc      	ite	gt
 8005830:	2201      	movgt	r2, #1
 8005832:	f1c1 0202 	rsble	r2, r1, #2
 8005836:	4413      	add	r3, r2
 8005838:	e7e0      	b.n	80057fc <_printf_float+0x198>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	055a      	lsls	r2, r3, #21
 800583e:	d407      	bmi.n	8005850 <_printf_float+0x1ec>
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	4642      	mov	r2, r8
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	47b8      	blx	r7
 800584a:	3001      	adds	r0, #1
 800584c:	d12b      	bne.n	80058a6 <_printf_float+0x242>
 800584e:	e764      	b.n	800571a <_printf_float+0xb6>
 8005850:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005854:	f240 80dd 	bls.w	8005a12 <_printf_float+0x3ae>
 8005858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800585c:	2200      	movs	r2, #0
 800585e:	2300      	movs	r3, #0
 8005860:	f7fb f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8005864:	2800      	cmp	r0, #0
 8005866:	d033      	beq.n	80058d0 <_printf_float+0x26c>
 8005868:	2301      	movs	r3, #1
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	4a35      	ldr	r2, [pc, #212]	; (8005944 <_printf_float+0x2e0>)
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f af51 	beq.w	800571a <_printf_float+0xb6>
 8005878:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800587c:	429a      	cmp	r2, r3
 800587e:	db02      	blt.n	8005886 <_printf_float+0x222>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	07d8      	lsls	r0, r3, #31
 8005884:	d50f      	bpl.n	80058a6 <_printf_float+0x242>
 8005886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	f43f af42 	beq.w	800571a <_printf_float+0xb6>
 8005896:	f04f 0800 	mov.w	r8, #0
 800589a:	f104 091a 	add.w	r9, r4, #26
 800589e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a0:	3b01      	subs	r3, #1
 80058a2:	4543      	cmp	r3, r8
 80058a4:	dc09      	bgt.n	80058ba <_printf_float+0x256>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	079b      	lsls	r3, r3, #30
 80058aa:	f100 8102 	bmi.w	8005ab2 <_printf_float+0x44e>
 80058ae:	68e0      	ldr	r0, [r4, #12]
 80058b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058b2:	4298      	cmp	r0, r3
 80058b4:	bfb8      	it	lt
 80058b6:	4618      	movlt	r0, r3
 80058b8:	e731      	b.n	800571e <_printf_float+0xba>
 80058ba:	2301      	movs	r3, #1
 80058bc:	464a      	mov	r2, r9
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	f43f af28 	beq.w	800571a <_printf_float+0xb6>
 80058ca:	f108 0801 	add.w	r8, r8, #1
 80058ce:	e7e6      	b.n	800589e <_printf_float+0x23a>
 80058d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dc38      	bgt.n	8005948 <_printf_float+0x2e4>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <_printf_float+0x2e0>)
 80058de:	47b8      	blx	r7
 80058e0:	3001      	adds	r0, #1
 80058e2:	f43f af1a 	beq.w	800571a <_printf_float+0xb6>
 80058e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d102      	bne.n	80058f4 <_printf_float+0x290>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	07d9      	lsls	r1, r3, #31
 80058f2:	d5d8      	bpl.n	80058a6 <_printf_float+0x242>
 80058f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af0b 	beq.w	800571a <_printf_float+0xb6>
 8005904:	f04f 0900 	mov.w	r9, #0
 8005908:	f104 0a1a 	add.w	sl, r4, #26
 800590c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590e:	425b      	negs	r3, r3
 8005910:	454b      	cmp	r3, r9
 8005912:	dc01      	bgt.n	8005918 <_printf_float+0x2b4>
 8005914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005916:	e794      	b.n	8005842 <_printf_float+0x1de>
 8005918:	2301      	movs	r3, #1
 800591a:	4652      	mov	r2, sl
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f aef9 	beq.w	800571a <_printf_float+0xb6>
 8005928:	f109 0901 	add.w	r9, r9, #1
 800592c:	e7ee      	b.n	800590c <_printf_float+0x2a8>
 800592e:	bf00      	nop
 8005930:	7fefffff 	.word	0x7fefffff
 8005934:	080083f8 	.word	0x080083f8
 8005938:	080083fc 	.word	0x080083fc
 800593c:	08008404 	.word	0x08008404
 8005940:	08008400 	.word	0x08008400
 8005944:	08008408 	.word	0x08008408
 8005948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800594a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800594c:	429a      	cmp	r2, r3
 800594e:	bfa8      	it	ge
 8005950:	461a      	movge	r2, r3
 8005952:	2a00      	cmp	r2, #0
 8005954:	4691      	mov	r9, r2
 8005956:	dc37      	bgt.n	80059c8 <_printf_float+0x364>
 8005958:	f04f 0b00 	mov.w	fp, #0
 800595c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005960:	f104 021a 	add.w	r2, r4, #26
 8005964:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005968:	ebaa 0309 	sub.w	r3, sl, r9
 800596c:	455b      	cmp	r3, fp
 800596e:	dc33      	bgt.n	80059d8 <_printf_float+0x374>
 8005970:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005974:	429a      	cmp	r2, r3
 8005976:	db3b      	blt.n	80059f0 <_printf_float+0x38c>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	07da      	lsls	r2, r3, #31
 800597c:	d438      	bmi.n	80059f0 <_printf_float+0x38c>
 800597e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005980:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005982:	eba2 030a 	sub.w	r3, r2, sl
 8005986:	eba2 0901 	sub.w	r9, r2, r1
 800598a:	4599      	cmp	r9, r3
 800598c:	bfa8      	it	ge
 800598e:	4699      	movge	r9, r3
 8005990:	f1b9 0f00 	cmp.w	r9, #0
 8005994:	dc34      	bgt.n	8005a00 <_printf_float+0x39c>
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800599e:	f104 0a1a 	add.w	sl, r4, #26
 80059a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	eba3 0309 	sub.w	r3, r3, r9
 80059ac:	4543      	cmp	r3, r8
 80059ae:	f77f af7a 	ble.w	80058a6 <_printf_float+0x242>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f aeac 	beq.w	800571a <_printf_float+0xb6>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	e7ec      	b.n	80059a2 <_printf_float+0x33e>
 80059c8:	4613      	mov	r3, r2
 80059ca:	4631      	mov	r1, r6
 80059cc:	4642      	mov	r2, r8
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	d1c0      	bne.n	8005958 <_printf_float+0x2f4>
 80059d6:	e6a0      	b.n	800571a <_printf_float+0xb6>
 80059d8:	2301      	movs	r3, #1
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	920b      	str	r2, [sp, #44]	; 0x2c
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	f43f ae99 	beq.w	800571a <_printf_float+0xb6>
 80059e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059ea:	f10b 0b01 	add.w	fp, fp, #1
 80059ee:	e7b9      	b.n	8005964 <_printf_float+0x300>
 80059f0:	4631      	mov	r1, r6
 80059f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	d1bf      	bne.n	800597e <_printf_float+0x31a>
 80059fe:	e68c      	b.n	800571a <_printf_float+0xb6>
 8005a00:	464b      	mov	r3, r9
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	eb08 020a 	add.w	r2, r8, sl
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d1c2      	bne.n	8005996 <_printf_float+0x332>
 8005a10:	e683      	b.n	800571a <_printf_float+0xb6>
 8005a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a14:	2a01      	cmp	r2, #1
 8005a16:	dc01      	bgt.n	8005a1c <_printf_float+0x3b8>
 8005a18:	07db      	lsls	r3, r3, #31
 8005a1a:	d537      	bpl.n	8005a8c <_printf_float+0x428>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4642      	mov	r2, r8
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	f43f ae77 	beq.w	800571a <_printf_float+0xb6>
 8005a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f ae6f 	beq.w	800571a <_printf_float+0xb6>
 8005a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a40:	2200      	movs	r2, #0
 8005a42:	2300      	movs	r3, #0
 8005a44:	f7fa ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8005a48:	b9d8      	cbnz	r0, 8005a82 <_printf_float+0x41e>
 8005a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a4c:	f108 0201 	add.w	r2, r8, #1
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4631      	mov	r1, r6
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b8      	blx	r7
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d10e      	bne.n	8005a7a <_printf_float+0x416>
 8005a5c:	e65d      	b.n	800571a <_printf_float+0xb6>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	464a      	mov	r2, r9
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f43f ae56 	beq.w	800571a <_printf_float+0xb6>
 8005a6e:	f108 0801 	add.w	r8, r8, #1
 8005a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4543      	cmp	r3, r8
 8005a78:	dcf1      	bgt.n	8005a5e <_printf_float+0x3fa>
 8005a7a:	4653      	mov	r3, sl
 8005a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a80:	e6e0      	b.n	8005844 <_printf_float+0x1e0>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	f104 091a 	add.w	r9, r4, #26
 8005a8a:	e7f2      	b.n	8005a72 <_printf_float+0x40e>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4642      	mov	r2, r8
 8005a90:	e7df      	b.n	8005a52 <_printf_float+0x3ee>
 8005a92:	2301      	movs	r3, #1
 8005a94:	464a      	mov	r2, r9
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f ae3c 	beq.w	800571a <_printf_float+0xb6>
 8005aa2:	f108 0801 	add.w	r8, r8, #1
 8005aa6:	68e3      	ldr	r3, [r4, #12]
 8005aa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005aaa:	1a5b      	subs	r3, r3, r1
 8005aac:	4543      	cmp	r3, r8
 8005aae:	dcf0      	bgt.n	8005a92 <_printf_float+0x42e>
 8005ab0:	e6fd      	b.n	80058ae <_printf_float+0x24a>
 8005ab2:	f04f 0800 	mov.w	r8, #0
 8005ab6:	f104 0919 	add.w	r9, r4, #25
 8005aba:	e7f4      	b.n	8005aa6 <_printf_float+0x442>

08005abc <_printf_common>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	688a      	ldr	r2, [r1, #8]
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	4607      	mov	r7, r0
 8005aca:	4293      	cmp	r3, r2
 8005acc:	bfb8      	it	lt
 8005ace:	4613      	movlt	r3, r2
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005adc:	b10a      	cbz	r2, 8005ae2 <_printf_common+0x26>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	0699      	lsls	r1, r3, #26
 8005ae6:	bf42      	ittt	mi
 8005ae8:	6833      	ldrmi	r3, [r6, #0]
 8005aea:	3302      	addmi	r3, #2
 8005aec:	6033      	strmi	r3, [r6, #0]
 8005aee:	6825      	ldr	r5, [r4, #0]
 8005af0:	f015 0506 	ands.w	r5, r5, #6
 8005af4:	d106      	bne.n	8005b04 <_printf_common+0x48>
 8005af6:	f104 0a19 	add.w	sl, r4, #25
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	6832      	ldr	r2, [r6, #0]
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dc28      	bgt.n	8005b56 <_printf_common+0x9a>
 8005b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b08:	1e13      	subs	r3, r2, #0
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	bf18      	it	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	0692      	lsls	r2, r2, #26
 8005b12:	d42d      	bmi.n	8005b70 <_printf_common+0xb4>
 8005b14:	4649      	mov	r1, r9
 8005b16:	4638      	mov	r0, r7
 8005b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b1c:	47c0      	blx	r8
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d020      	beq.n	8005b64 <_printf_common+0xa8>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	68e5      	ldr	r5, [r4, #12]
 8005b26:	f003 0306 	and.w	r3, r3, #6
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	bf18      	it	ne
 8005b2e:	2500      	movne	r5, #0
 8005b30:	6832      	ldr	r2, [r6, #0]
 8005b32:	f04f 0600 	mov.w	r6, #0
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	bf08      	it	eq
 8005b3a:	1aad      	subeq	r5, r5, r2
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	bf08      	it	eq
 8005b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bfc4      	itt	gt
 8005b48:	1a9b      	subgt	r3, r3, r2
 8005b4a:	18ed      	addgt	r5, r5, r3
 8005b4c:	341a      	adds	r4, #26
 8005b4e:	42b5      	cmp	r5, r6
 8005b50:	d11a      	bne.n	8005b88 <_printf_common+0xcc>
 8005b52:	2000      	movs	r0, #0
 8005b54:	e008      	b.n	8005b68 <_printf_common+0xac>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4652      	mov	r2, sl
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	47c0      	blx	r8
 8005b60:	3001      	adds	r0, #1
 8005b62:	d103      	bne.n	8005b6c <_printf_common+0xb0>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	e7c4      	b.n	8005afa <_printf_common+0x3e>
 8005b70:	2030      	movs	r0, #48	; 0x30
 8005b72:	18e1      	adds	r1, r4, r3
 8005b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b7e:	4422      	add	r2, r4
 8005b80:	3302      	adds	r3, #2
 8005b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b86:	e7c5      	b.n	8005b14 <_printf_common+0x58>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d0e6      	beq.n	8005b64 <_printf_common+0xa8>
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7d9      	b.n	8005b4e <_printf_common+0x92>
	...

08005b9c <_printf_i>:
 8005b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	7e27      	ldrb	r7, [r4, #24]
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	2f78      	cmp	r7, #120	; 0x78
 8005ba8:	4680      	mov	r8, r0
 8005baa:	469a      	mov	sl, r3
 8005bac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb2:	d807      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bb4:	2f62      	cmp	r7, #98	; 0x62
 8005bb6:	d80a      	bhi.n	8005bce <_printf_i+0x32>
 8005bb8:	2f00      	cmp	r7, #0
 8005bba:	f000 80d9 	beq.w	8005d70 <_printf_i+0x1d4>
 8005bbe:	2f58      	cmp	r7, #88	; 0x58
 8005bc0:	f000 80a4 	beq.w	8005d0c <_printf_i+0x170>
 8005bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bcc:	e03a      	b.n	8005c44 <_printf_i+0xa8>
 8005bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bd2:	2b15      	cmp	r3, #21
 8005bd4:	d8f6      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bd6:	a001      	add	r0, pc, #4	; (adr r0, 8005bdc <_printf_i+0x40>)
 8005bd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005bc5 	.word	0x08005bc5
 8005be8:	08005bc5 	.word	0x08005bc5
 8005bec:	08005bc5 	.word	0x08005bc5
 8005bf0:	08005bc5 	.word	0x08005bc5
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005bc5 	.word	0x08005bc5
 8005bfc:	08005bc5 	.word	0x08005bc5
 8005c00:	08005bc5 	.word	0x08005bc5
 8005c04:	08005bc5 	.word	0x08005bc5
 8005c08:	08005d57 	.word	0x08005d57
 8005c0c:	08005c79 	.word	0x08005c79
 8005c10:	08005d39 	.word	0x08005d39
 8005c14:	08005bc5 	.word	0x08005bc5
 8005c18:	08005bc5 	.word	0x08005bc5
 8005c1c:	08005d79 	.word	0x08005d79
 8005c20:	08005bc5 	.word	0x08005bc5
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005bc5 	.word	0x08005bc5
 8005c2c:	08005bc5 	.word	0x08005bc5
 8005c30:	08005d41 	.word	0x08005d41
 8005c34:	680b      	ldr	r3, [r1, #0]
 8005c36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	600a      	str	r2, [r1, #0]
 8005c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0a4      	b.n	8005d92 <_printf_i+0x1f6>
 8005c48:	6825      	ldr	r5, [r4, #0]
 8005c4a:	6808      	ldr	r0, [r1, #0]
 8005c4c:	062e      	lsls	r6, r5, #24
 8005c4e:	f100 0304 	add.w	r3, r0, #4
 8005c52:	d50a      	bpl.n	8005c6a <_printf_i+0xce>
 8005c54:	6805      	ldr	r5, [r0, #0]
 8005c56:	600b      	str	r3, [r1, #0]
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	da03      	bge.n	8005c64 <_printf_i+0xc8>
 8005c5c:	232d      	movs	r3, #45	; 0x2d
 8005c5e:	426d      	negs	r5, r5
 8005c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c64:	230a      	movs	r3, #10
 8005c66:	485e      	ldr	r0, [pc, #376]	; (8005de0 <_printf_i+0x244>)
 8005c68:	e019      	b.n	8005c9e <_printf_i+0x102>
 8005c6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c6e:	6805      	ldr	r5, [r0, #0]
 8005c70:	600b      	str	r3, [r1, #0]
 8005c72:	bf18      	it	ne
 8005c74:	b22d      	sxthne	r5, r5
 8005c76:	e7ef      	b.n	8005c58 <_printf_i+0xbc>
 8005c78:	680b      	ldr	r3, [r1, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	1d18      	adds	r0, r3, #4
 8005c7e:	6008      	str	r0, [r1, #0]
 8005c80:	0628      	lsls	r0, r5, #24
 8005c82:	d501      	bpl.n	8005c88 <_printf_i+0xec>
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <_printf_i+0xf2>
 8005c88:	0669      	lsls	r1, r5, #25
 8005c8a:	d5fb      	bpl.n	8005c84 <_printf_i+0xe8>
 8005c8c:	881d      	ldrh	r5, [r3, #0]
 8005c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8005c90:	bf0c      	ite	eq
 8005c92:	2308      	moveq	r3, #8
 8005c94:	230a      	movne	r3, #10
 8005c96:	4852      	ldr	r0, [pc, #328]	; (8005de0 <_printf_i+0x244>)
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c9e:	6866      	ldr	r6, [r4, #4]
 8005ca0:	2e00      	cmp	r6, #0
 8005ca2:	bfa8      	it	ge
 8005ca4:	6821      	ldrge	r1, [r4, #0]
 8005ca6:	60a6      	str	r6, [r4, #8]
 8005ca8:	bfa4      	itt	ge
 8005caa:	f021 0104 	bicge.w	r1, r1, #4
 8005cae:	6021      	strge	r1, [r4, #0]
 8005cb0:	b90d      	cbnz	r5, 8005cb6 <_printf_i+0x11a>
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	d04d      	beq.n	8005d52 <_printf_i+0x1b6>
 8005cb6:	4616      	mov	r6, r2
 8005cb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cbc:	fb03 5711 	mls	r7, r3, r1, r5
 8005cc0:	5dc7      	ldrb	r7, [r0, r7]
 8005cc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cc6:	462f      	mov	r7, r5
 8005cc8:	42bb      	cmp	r3, r7
 8005cca:	460d      	mov	r5, r1
 8005ccc:	d9f4      	bls.n	8005cb8 <_printf_i+0x11c>
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d10b      	bne.n	8005cea <_printf_i+0x14e>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	07df      	lsls	r7, r3, #31
 8005cd6:	d508      	bpl.n	8005cea <_printf_i+0x14e>
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	6861      	ldr	r1, [r4, #4]
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	bfde      	ittt	le
 8005ce0:	2330      	movle	r3, #48	; 0x30
 8005ce2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ce6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cea:	1b92      	subs	r2, r2, r6
 8005cec:	6122      	str	r2, [r4, #16]
 8005cee:	464b      	mov	r3, r9
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f8cd a000 	str.w	sl, [sp]
 8005cf8:	aa03      	add	r2, sp, #12
 8005cfa:	f7ff fedf 	bl	8005abc <_printf_common>
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d14c      	bne.n	8005d9c <_printf_i+0x200>
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	b004      	add	sp, #16
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	4834      	ldr	r0, [pc, #208]	; (8005de0 <_printf_i+0x244>)
 8005d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d12:	680e      	ldr	r6, [r1, #0]
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d1a:	061f      	lsls	r7, r3, #24
 8005d1c:	600e      	str	r6, [r1, #0]
 8005d1e:	d514      	bpl.n	8005d4a <_printf_i+0x1ae>
 8005d20:	07d9      	lsls	r1, r3, #31
 8005d22:	bf44      	itt	mi
 8005d24:	f043 0320 	orrmi.w	r3, r3, #32
 8005d28:	6023      	strmi	r3, [r4, #0]
 8005d2a:	b91d      	cbnz	r5, 8005d34 <_printf_i+0x198>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	f023 0320 	bic.w	r3, r3, #32
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	2310      	movs	r3, #16
 8005d36:	e7af      	b.n	8005c98 <_printf_i+0xfc>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	f043 0320 	orr.w	r3, r3, #32
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	2378      	movs	r3, #120	; 0x78
 8005d42:	4828      	ldr	r0, [pc, #160]	; (8005de4 <_printf_i+0x248>)
 8005d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d48:	e7e3      	b.n	8005d12 <_printf_i+0x176>
 8005d4a:	065e      	lsls	r6, r3, #25
 8005d4c:	bf48      	it	mi
 8005d4e:	b2ad      	uxthmi	r5, r5
 8005d50:	e7e6      	b.n	8005d20 <_printf_i+0x184>
 8005d52:	4616      	mov	r6, r2
 8005d54:	e7bb      	b.n	8005cce <_printf_i+0x132>
 8005d56:	680b      	ldr	r3, [r1, #0]
 8005d58:	6826      	ldr	r6, [r4, #0]
 8005d5a:	1d1d      	adds	r5, r3, #4
 8005d5c:	6960      	ldr	r0, [r4, #20]
 8005d5e:	600d      	str	r5, [r1, #0]
 8005d60:	0635      	lsls	r5, r6, #24
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	d501      	bpl.n	8005d6a <_printf_i+0x1ce>
 8005d66:	6018      	str	r0, [r3, #0]
 8005d68:	e002      	b.n	8005d70 <_printf_i+0x1d4>
 8005d6a:	0671      	lsls	r1, r6, #25
 8005d6c:	d5fb      	bpl.n	8005d66 <_printf_i+0x1ca>
 8005d6e:	8018      	strh	r0, [r3, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	4616      	mov	r6, r2
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	e7ba      	b.n	8005cee <_printf_i+0x152>
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	600a      	str	r2, [r1, #0]
 8005d7e:	681e      	ldr	r6, [r3, #0]
 8005d80:	2100      	movs	r1, #0
 8005d82:	4630      	mov	r0, r6
 8005d84:	6862      	ldr	r2, [r4, #4]
 8005d86:	f000 fee1 	bl	8006b4c <memchr>
 8005d8a:	b108      	cbz	r0, 8005d90 <_printf_i+0x1f4>
 8005d8c:	1b80      	subs	r0, r0, r6
 8005d8e:	6060      	str	r0, [r4, #4]
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	6123      	str	r3, [r4, #16]
 8005d94:	2300      	movs	r3, #0
 8005d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9a:	e7a8      	b.n	8005cee <_printf_i+0x152>
 8005d9c:	4632      	mov	r2, r6
 8005d9e:	4649      	mov	r1, r9
 8005da0:	4640      	mov	r0, r8
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	47d0      	blx	sl
 8005da6:	3001      	adds	r0, #1
 8005da8:	d0ab      	beq.n	8005d02 <_printf_i+0x166>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	079b      	lsls	r3, r3, #30
 8005dae:	d413      	bmi.n	8005dd8 <_printf_i+0x23c>
 8005db0:	68e0      	ldr	r0, [r4, #12]
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	4298      	cmp	r0, r3
 8005db6:	bfb8      	it	lt
 8005db8:	4618      	movlt	r0, r3
 8005dba:	e7a4      	b.n	8005d06 <_printf_i+0x16a>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	47d0      	blx	sl
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d09b      	beq.n	8005d02 <_printf_i+0x166>
 8005dca:	3501      	adds	r5, #1
 8005dcc:	68e3      	ldr	r3, [r4, #12]
 8005dce:	9903      	ldr	r1, [sp, #12]
 8005dd0:	1a5b      	subs	r3, r3, r1
 8005dd2:	42ab      	cmp	r3, r5
 8005dd4:	dcf2      	bgt.n	8005dbc <_printf_i+0x220>
 8005dd6:	e7eb      	b.n	8005db0 <_printf_i+0x214>
 8005dd8:	2500      	movs	r5, #0
 8005dda:	f104 0619 	add.w	r6, r4, #25
 8005dde:	e7f5      	b.n	8005dcc <_printf_i+0x230>
 8005de0:	0800840a 	.word	0x0800840a
 8005de4:	0800841b 	.word	0x0800841b

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	2300      	movs	r3, #0
 8005dec:	4d05      	ldr	r5, [pc, #20]	; (8005e04 <_sbrk_r+0x1c>)
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fc fd7e 	bl	80028f4 <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20000718 	.word	0x20000718

08005e08 <siprintf>:
 8005e08:	b40e      	push	{r1, r2, r3}
 8005e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0e:	b500      	push	{lr}
 8005e10:	b09c      	sub	sp, #112	; 0x70
 8005e12:	ab1d      	add	r3, sp, #116	; 0x74
 8005e14:	9002      	str	r0, [sp, #8]
 8005e16:	9006      	str	r0, [sp, #24]
 8005e18:	9107      	str	r1, [sp, #28]
 8005e1a:	9104      	str	r1, [sp, #16]
 8005e1c:	4808      	ldr	r0, [pc, #32]	; (8005e40 <siprintf+0x38>)
 8005e1e:	4909      	ldr	r1, [pc, #36]	; (8005e44 <siprintf+0x3c>)
 8005e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	6800      	ldr	r0, [r0, #0]
 8005e28:	a902      	add	r1, sp, #8
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	f001 fa94 	bl	8007358 <_svfiprintf_r>
 8005e30:	2200      	movs	r2, #0
 8005e32:	9b02      	ldr	r3, [sp, #8]
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	b01c      	add	sp, #112	; 0x70
 8005e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e3c:	b003      	add	sp, #12
 8005e3e:	4770      	bx	lr
 8005e40:	200000c8 	.word	0x200000c8
 8005e44:	ffff0208 	.word	0xffff0208

08005e48 <quorem>:
 8005e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	6903      	ldr	r3, [r0, #16]
 8005e4e:	690c      	ldr	r4, [r1, #16]
 8005e50:	4607      	mov	r7, r0
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	f2c0 8083 	blt.w	8005f5e <quorem+0x116>
 8005e58:	3c01      	subs	r4, #1
 8005e5a:	f100 0514 	add.w	r5, r0, #20
 8005e5e:	f101 0814 	add.w	r8, r1, #20
 8005e62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e70:	3301      	adds	r3, #1
 8005e72:	429a      	cmp	r2, r3
 8005e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e80:	d332      	bcc.n	8005ee8 <quorem+0xa0>
 8005e82:	f04f 0e00 	mov.w	lr, #0
 8005e86:	4640      	mov	r0, r8
 8005e88:	46ac      	mov	ip, r5
 8005e8a:	46f2      	mov	sl, lr
 8005e8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e90:	b293      	uxth	r3, r2
 8005e92:	fb06 e303 	mla	r3, r6, r3, lr
 8005e96:	0c12      	lsrs	r2, r2, #16
 8005e98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e9c:	fb06 e202 	mla	r2, r6, r2, lr
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ea6:	f8dc a000 	ldr.w	sl, [ip]
 8005eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eae:	fa1f fa8a 	uxth.w	sl, sl
 8005eb2:	4453      	add	r3, sl
 8005eb4:	fa1f fa82 	uxth.w	sl, r2
 8005eb8:	f8dc 2000 	ldr.w	r2, [ip]
 8005ebc:	4581      	cmp	r9, r0
 8005ebe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ecc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ed0:	f84c 3b04 	str.w	r3, [ip], #4
 8005ed4:	d2da      	bcs.n	8005e8c <quorem+0x44>
 8005ed6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005eda:	b92b      	cbnz	r3, 8005ee8 <quorem+0xa0>
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	429d      	cmp	r5, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	d32f      	bcc.n	8005f46 <quorem+0xfe>
 8005ee6:	613c      	str	r4, [r7, #16]
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f001 f8c3 	bl	8007074 <__mcmp>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	db25      	blt.n	8005f3e <quorem+0xf6>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f04f 0c00 	mov.w	ip, #0
 8005ef8:	3601      	adds	r6, #1
 8005efa:	f858 1b04 	ldr.w	r1, [r8], #4
 8005efe:	f8d0 e000 	ldr.w	lr, [r0]
 8005f02:	b28b      	uxth	r3, r1
 8005f04:	ebac 0303 	sub.w	r3, ip, r3
 8005f08:	fa1f f28e 	uxth.w	r2, lr
 8005f0c:	4413      	add	r3, r2
 8005f0e:	0c0a      	lsrs	r2, r1, #16
 8005f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f1e:	45c1      	cmp	r9, r8
 8005f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f24:	f840 3b04 	str.w	r3, [r0], #4
 8005f28:	d2e7      	bcs.n	8005efa <quorem+0xb2>
 8005f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f32:	b922      	cbnz	r2, 8005f3e <quorem+0xf6>
 8005f34:	3b04      	subs	r3, #4
 8005f36:	429d      	cmp	r5, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	d30a      	bcc.n	8005f52 <quorem+0x10a>
 8005f3c:	613c      	str	r4, [r7, #16]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	b003      	add	sp, #12
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	3b04      	subs	r3, #4
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d1cb      	bne.n	8005ee6 <quorem+0x9e>
 8005f4e:	3c01      	subs	r4, #1
 8005f50:	e7c6      	b.n	8005ee0 <quorem+0x98>
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	d1f0      	bne.n	8005f3c <quorem+0xf4>
 8005f5a:	3c01      	subs	r4, #1
 8005f5c:	e7eb      	b.n	8005f36 <quorem+0xee>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e7ee      	b.n	8005f40 <quorem+0xf8>
 8005f62:	0000      	movs	r0, r0
 8005f64:	0000      	movs	r0, r0
	...

08005f68 <_dtoa_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	461f      	mov	r7, r3
 8005f70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f72:	b099      	sub	sp, #100	; 0x64
 8005f74:	4605      	mov	r5, r0
 8005f76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f7e:	b974      	cbnz	r4, 8005f9e <_dtoa_r+0x36>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7ff f9f3 	bl	800536c <malloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6268      	str	r0, [r5, #36]	; 0x24
 8005f8a:	b920      	cbnz	r0, 8005f96 <_dtoa_r+0x2e>
 8005f8c:	21ea      	movs	r1, #234	; 0xea
 8005f8e:	4bae      	ldr	r3, [pc, #696]	; (8006248 <_dtoa_r+0x2e0>)
 8005f90:	48ae      	ldr	r0, [pc, #696]	; (800624c <_dtoa_r+0x2e4>)
 8005f92:	f001 fae1 	bl	8007558 <__assert_func>
 8005f96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f9a:	6004      	str	r4, [r0, #0]
 8005f9c:	60c4      	str	r4, [r0, #12]
 8005f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	b151      	cbz	r1, 8005fba <_dtoa_r+0x52>
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	604a      	str	r2, [r1, #4]
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fe26 	bl	8006c00 <_Bfree>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	1e3b      	subs	r3, r7, #0
 8005fbc:	bfaf      	iteee	ge
 8005fbe:	2300      	movge	r3, #0
 8005fc0:	2201      	movlt	r2, #1
 8005fc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	9305      	strlt	r3, [sp, #20]
 8005fc8:	bfa8      	it	ge
 8005fca:	f8c8 3000 	strge.w	r3, [r8]
 8005fce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005fd2:	4b9f      	ldr	r3, [pc, #636]	; (8006250 <_dtoa_r+0x2e8>)
 8005fd4:	bfb8      	it	lt
 8005fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8005fda:	ea33 0309 	bics.w	r3, r3, r9
 8005fde:	d119      	bne.n	8006014 <_dtoa_r+0xac>
 8005fe0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fec:	4333      	orrs	r3, r6
 8005fee:	f000 8580 	beq.w	8006af2 <_dtoa_r+0xb8a>
 8005ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ff4:	b953      	cbnz	r3, 800600c <_dtoa_r+0xa4>
 8005ff6:	4b97      	ldr	r3, [pc, #604]	; (8006254 <_dtoa_r+0x2ec>)
 8005ff8:	e022      	b.n	8006040 <_dtoa_r+0xd8>
 8005ffa:	4b97      	ldr	r3, [pc, #604]	; (8006258 <_dtoa_r+0x2f0>)
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	3308      	adds	r3, #8
 8006000:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	9808      	ldr	r0, [sp, #32]
 8006006:	b019      	add	sp, #100	; 0x64
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4b91      	ldr	r3, [pc, #580]	; (8006254 <_dtoa_r+0x2ec>)
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	3303      	adds	r3, #3
 8006012:	e7f5      	b.n	8006000 <_dtoa_r+0x98>
 8006014:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006018:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800601c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006028:	4680      	mov	r8, r0
 800602a:	b158      	cbz	r0, 8006044 <_dtoa_r+0xdc>
 800602c:	2301      	movs	r3, #1
 800602e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8559 	beq.w	8006aec <_dtoa_r+0xb84>
 800603a:	4888      	ldr	r0, [pc, #544]	; (800625c <_dtoa_r+0x2f4>)
 800603c:	6018      	str	r0, [r3, #0]
 800603e:	1e43      	subs	r3, r0, #1
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	e7df      	b.n	8006004 <_dtoa_r+0x9c>
 8006044:	ab16      	add	r3, sp, #88	; 0x58
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	ab17      	add	r3, sp, #92	; 0x5c
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4628      	mov	r0, r5
 800604e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006052:	f001 f8bb 	bl	80071cc <__d2b>
 8006056:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800605a:	4682      	mov	sl, r0
 800605c:	2c00      	cmp	r4, #0
 800605e:	d07e      	beq.n	800615e <_dtoa_r+0x1f6>
 8006060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006066:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800606a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800606e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006072:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006076:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800607a:	2200      	movs	r2, #0
 800607c:	4b78      	ldr	r3, [pc, #480]	; (8006260 <_dtoa_r+0x2f8>)
 800607e:	f7fa f873 	bl	8000168 <__aeabi_dsub>
 8006082:	a36b      	add	r3, pc, #428	; (adr r3, 8006230 <_dtoa_r+0x2c8>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa fa26 	bl	80004d8 <__aeabi_dmul>
 800608c:	a36a      	add	r3, pc, #424	; (adr r3, 8006238 <_dtoa_r+0x2d0>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa f86b 	bl	800016c <__adddf3>
 8006096:	4606      	mov	r6, r0
 8006098:	4620      	mov	r0, r4
 800609a:	460f      	mov	r7, r1
 800609c:	f7fa f9b2 	bl	8000404 <__aeabi_i2d>
 80060a0:	a367      	add	r3, pc, #412	; (adr r3, 8006240 <_dtoa_r+0x2d8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa fa17 	bl	80004d8 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f85b 	bl	800016c <__adddf3>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	f7fa fcbd 	bl	8000a38 <__aeabi_d2iz>
 80060be:	2200      	movs	r2, #0
 80060c0:	4681      	mov	r9, r0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fc78 	bl	80009bc <__aeabi_dcmplt>
 80060cc:	b148      	cbz	r0, 80060e2 <_dtoa_r+0x17a>
 80060ce:	4648      	mov	r0, r9
 80060d0:	f7fa f998 	bl	8000404 <__aeabi_i2d>
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	f7fa fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80060dc:	b908      	cbnz	r0, 80060e2 <_dtoa_r+0x17a>
 80060de:	f109 39ff 	add.w	r9, r9, #4294967295
 80060e2:	f1b9 0f16 	cmp.w	r9, #22
 80060e6:	d857      	bhi.n	8006198 <_dtoa_r+0x230>
 80060e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ec:	4b5d      	ldr	r3, [pc, #372]	; (8006264 <_dtoa_r+0x2fc>)
 80060ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fc61 	bl	80009bc <__aeabi_dcmplt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d04e      	beq.n	800619c <_dtoa_r+0x234>
 80060fe:	2300      	movs	r3, #0
 8006100:	f109 39ff 	add.w	r9, r9, #4294967295
 8006104:	930f      	str	r3, [sp, #60]	; 0x3c
 8006106:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006108:	1b1c      	subs	r4, r3, r4
 800610a:	1e63      	subs	r3, r4, #1
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	bf49      	itett	mi
 8006110:	f1c4 0301 	rsbmi	r3, r4, #1
 8006114:	2300      	movpl	r3, #0
 8006116:	9306      	strmi	r3, [sp, #24]
 8006118:	2300      	movmi	r3, #0
 800611a:	bf54      	ite	pl
 800611c:	9306      	strpl	r3, [sp, #24]
 800611e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006120:	f1b9 0f00 	cmp.w	r9, #0
 8006124:	db3c      	blt.n	80061a0 <_dtoa_r+0x238>
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800612c:	444b      	add	r3, r9
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	2300      	movs	r3, #0
 8006132:	930a      	str	r3, [sp, #40]	; 0x28
 8006134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006136:	2b09      	cmp	r3, #9
 8006138:	d86c      	bhi.n	8006214 <_dtoa_r+0x2ac>
 800613a:	2b05      	cmp	r3, #5
 800613c:	bfc4      	itt	gt
 800613e:	3b04      	subgt	r3, #4
 8006140:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006144:	bfc8      	it	gt
 8006146:	2400      	movgt	r4, #0
 8006148:	f1a3 0302 	sub.w	r3, r3, #2
 800614c:	bfd8      	it	le
 800614e:	2401      	movle	r4, #1
 8006150:	2b03      	cmp	r3, #3
 8006152:	f200 808b 	bhi.w	800626c <_dtoa_r+0x304>
 8006156:	e8df f003 	tbb	[pc, r3]
 800615a:	4f2d      	.short	0x4f2d
 800615c:	5b4d      	.short	0x5b4d
 800615e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006162:	441c      	add	r4, r3
 8006164:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006168:	2b20      	cmp	r3, #32
 800616a:	bfc3      	ittte	gt
 800616c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006170:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006174:	fa09 f303 	lslgt.w	r3, r9, r3
 8006178:	f1c3 0320 	rsble	r3, r3, #32
 800617c:	bfc6      	itte	gt
 800617e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006182:	4318      	orrgt	r0, r3
 8006184:	fa06 f003 	lslle.w	r0, r6, r3
 8006188:	f7fa f92c 	bl	80003e4 <__aeabi_ui2d>
 800618c:	2301      	movs	r3, #1
 800618e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006192:	3c01      	subs	r4, #1
 8006194:	9313      	str	r3, [sp, #76]	; 0x4c
 8006196:	e770      	b.n	800607a <_dtoa_r+0x112>
 8006198:	2301      	movs	r3, #1
 800619a:	e7b3      	b.n	8006104 <_dtoa_r+0x19c>
 800619c:	900f      	str	r0, [sp, #60]	; 0x3c
 800619e:	e7b2      	b.n	8006106 <_dtoa_r+0x19e>
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	eba3 0309 	sub.w	r3, r3, r9
 80061a6:	9306      	str	r3, [sp, #24]
 80061a8:	f1c9 0300 	rsb	r3, r9, #0
 80061ac:	930a      	str	r3, [sp, #40]	; 0x28
 80061ae:	2300      	movs	r3, #0
 80061b0:	930e      	str	r3, [sp, #56]	; 0x38
 80061b2:	e7bf      	b.n	8006134 <_dtoa_r+0x1cc>
 80061b4:	2300      	movs	r3, #0
 80061b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc59      	bgt.n	8006272 <_dtoa_r+0x30a>
 80061be:	f04f 0b01 	mov.w	fp, #1
 80061c2:	465b      	mov	r3, fp
 80061c4:	f8cd b008 	str.w	fp, [sp, #8]
 80061c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80061cc:	2200      	movs	r2, #0
 80061ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80061d0:	6042      	str	r2, [r0, #4]
 80061d2:	2204      	movs	r2, #4
 80061d4:	f102 0614 	add.w	r6, r2, #20
 80061d8:	429e      	cmp	r6, r3
 80061da:	6841      	ldr	r1, [r0, #4]
 80061dc:	d94f      	bls.n	800627e <_dtoa_r+0x316>
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fcce 	bl	8006b80 <_Balloc>
 80061e4:	9008      	str	r0, [sp, #32]
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d14d      	bne.n	8006286 <_dtoa_r+0x31e>
 80061ea:	4602      	mov	r2, r0
 80061ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <_dtoa_r+0x300>)
 80061f2:	e6cd      	b.n	8005f90 <_dtoa_r+0x28>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7de      	b.n	80061b6 <_dtoa_r+0x24e>
 80061f8:	2300      	movs	r3, #0
 80061fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80061fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061fe:	eb09 0b03 	add.w	fp, r9, r3
 8006202:	f10b 0301 	add.w	r3, fp, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	bfb8      	it	lt
 800620c:	2301      	movlt	r3, #1
 800620e:	e7dd      	b.n	80061cc <_dtoa_r+0x264>
 8006210:	2301      	movs	r3, #1
 8006212:	e7f2      	b.n	80061fa <_dtoa_r+0x292>
 8006214:	2401      	movs	r4, #1
 8006216:	2300      	movs	r3, #0
 8006218:	940b      	str	r4, [sp, #44]	; 0x2c
 800621a:	9322      	str	r3, [sp, #136]	; 0x88
 800621c:	f04f 3bff 	mov.w	fp, #4294967295
 8006220:	2200      	movs	r2, #0
 8006222:	2312      	movs	r3, #18
 8006224:	f8cd b008 	str.w	fp, [sp, #8]
 8006228:	9223      	str	r2, [sp, #140]	; 0x8c
 800622a:	e7cf      	b.n	80061cc <_dtoa_r+0x264>
 800622c:	f3af 8000 	nop.w
 8006230:	636f4361 	.word	0x636f4361
 8006234:	3fd287a7 	.word	0x3fd287a7
 8006238:	8b60c8b3 	.word	0x8b60c8b3
 800623c:	3fc68a28 	.word	0x3fc68a28
 8006240:	509f79fb 	.word	0x509f79fb
 8006244:	3fd34413 	.word	0x3fd34413
 8006248:	08008439 	.word	0x08008439
 800624c:	08008450 	.word	0x08008450
 8006250:	7ff00000 	.word	0x7ff00000
 8006254:	08008435 	.word	0x08008435
 8006258:	0800842c 	.word	0x0800842c
 800625c:	08008409 	.word	0x08008409
 8006260:	3ff80000 	.word	0x3ff80000
 8006264:	08008548 	.word	0x08008548
 8006268:	080084af 	.word	0x080084af
 800626c:	2301      	movs	r3, #1
 800626e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006270:	e7d4      	b.n	800621c <_dtoa_r+0x2b4>
 8006272:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006276:	465b      	mov	r3, fp
 8006278:	f8cd b008 	str.w	fp, [sp, #8]
 800627c:	e7a6      	b.n	80061cc <_dtoa_r+0x264>
 800627e:	3101      	adds	r1, #1
 8006280:	6041      	str	r1, [r0, #4]
 8006282:	0052      	lsls	r2, r2, #1
 8006284:	e7a6      	b.n	80061d4 <_dtoa_r+0x26c>
 8006286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006288:	9a08      	ldr	r2, [sp, #32]
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2b0e      	cmp	r3, #14
 8006290:	f200 80a8 	bhi.w	80063e4 <_dtoa_r+0x47c>
 8006294:	2c00      	cmp	r4, #0
 8006296:	f000 80a5 	beq.w	80063e4 <_dtoa_r+0x47c>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	dd34      	ble.n	800630a <_dtoa_r+0x3a2>
 80062a0:	4a9a      	ldr	r2, [pc, #616]	; (800650c <_dtoa_r+0x5a4>)
 80062a2:	f009 030f 	and.w	r3, r9, #15
 80062a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80062ba:	d016      	beq.n	80062ea <_dtoa_r+0x382>
 80062bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c0:	4b93      	ldr	r3, [pc, #588]	; (8006510 <_dtoa_r+0x5a8>)
 80062c2:	2703      	movs	r7, #3
 80062c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c8:	f7fa fa30 	bl	800072c <__aeabi_ddiv>
 80062cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d0:	f004 040f 	and.w	r4, r4, #15
 80062d4:	4e8e      	ldr	r6, [pc, #568]	; (8006510 <_dtoa_r+0x5a8>)
 80062d6:	b954      	cbnz	r4, 80062ee <_dtoa_r+0x386>
 80062d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e0:	f7fa fa24 	bl	800072c <__aeabi_ddiv>
 80062e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e8:	e029      	b.n	800633e <_dtoa_r+0x3d6>
 80062ea:	2702      	movs	r7, #2
 80062ec:	e7f2      	b.n	80062d4 <_dtoa_r+0x36c>
 80062ee:	07e1      	lsls	r1, r4, #31
 80062f0:	d508      	bpl.n	8006304 <_dtoa_r+0x39c>
 80062f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062fa:	f7fa f8ed 	bl	80004d8 <__aeabi_dmul>
 80062fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006302:	3701      	adds	r7, #1
 8006304:	1064      	asrs	r4, r4, #1
 8006306:	3608      	adds	r6, #8
 8006308:	e7e5      	b.n	80062d6 <_dtoa_r+0x36e>
 800630a:	f000 80a5 	beq.w	8006458 <_dtoa_r+0x4f0>
 800630e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006312:	f1c9 0400 	rsb	r4, r9, #0
 8006316:	4b7d      	ldr	r3, [pc, #500]	; (800650c <_dtoa_r+0x5a4>)
 8006318:	f004 020f 	and.w	r2, r4, #15
 800631c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f8d8 	bl	80004d8 <__aeabi_dmul>
 8006328:	2702      	movs	r7, #2
 800632a:	2300      	movs	r3, #0
 800632c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006330:	4e77      	ldr	r6, [pc, #476]	; (8006510 <_dtoa_r+0x5a8>)
 8006332:	1124      	asrs	r4, r4, #4
 8006334:	2c00      	cmp	r4, #0
 8006336:	f040 8084 	bne.w	8006442 <_dtoa_r+0x4da>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1d2      	bne.n	80062e4 <_dtoa_r+0x37c>
 800633e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 808b 	beq.w	800645c <_dtoa_r+0x4f4>
 8006346:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800634a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800634e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006352:	2200      	movs	r2, #0
 8006354:	4b6f      	ldr	r3, [pc, #444]	; (8006514 <_dtoa_r+0x5ac>)
 8006356:	f7fa fb31 	bl	80009bc <__aeabi_dcmplt>
 800635a:	2800      	cmp	r0, #0
 800635c:	d07e      	beq.n	800645c <_dtoa_r+0x4f4>
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d07b      	beq.n	800645c <_dtoa_r+0x4f4>
 8006364:	f1bb 0f00 	cmp.w	fp, #0
 8006368:	dd38      	ble.n	80063dc <_dtoa_r+0x474>
 800636a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800636e:	2200      	movs	r2, #0
 8006370:	4b69      	ldr	r3, [pc, #420]	; (8006518 <_dtoa_r+0x5b0>)
 8006372:	f7fa f8b1 	bl	80004d8 <__aeabi_dmul>
 8006376:	465c      	mov	r4, fp
 8006378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800637c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006380:	3701      	adds	r7, #1
 8006382:	4638      	mov	r0, r7
 8006384:	f7fa f83e 	bl	8000404 <__aeabi_i2d>
 8006388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638c:	f7fa f8a4 	bl	80004d8 <__aeabi_dmul>
 8006390:	2200      	movs	r2, #0
 8006392:	4b62      	ldr	r3, [pc, #392]	; (800651c <_dtoa_r+0x5b4>)
 8006394:	f7f9 feea 	bl	800016c <__adddf3>
 8006398:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800639c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063a0:	9611      	str	r6, [sp, #68]	; 0x44
 80063a2:	2c00      	cmp	r4, #0
 80063a4:	d15d      	bne.n	8006462 <_dtoa_r+0x4fa>
 80063a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063aa:	2200      	movs	r2, #0
 80063ac:	4b5c      	ldr	r3, [pc, #368]	; (8006520 <_dtoa_r+0x5b8>)
 80063ae:	f7f9 fedb 	bl	8000168 <__aeabi_dsub>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063ba:	4633      	mov	r3, r6
 80063bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063be:	f7fa fb1b 	bl	80009f8 <__aeabi_dcmpgt>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f040 829e 	bne.w	8006904 <_dtoa_r+0x99c>
 80063c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063d2:	f7fa faf3 	bl	80009bc <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f040 8292 	bne.w	8006900 <_dtoa_r+0x998>
 80063dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80063e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f2c0 8153 	blt.w	8006692 <_dtoa_r+0x72a>
 80063ec:	f1b9 0f0e 	cmp.w	r9, #14
 80063f0:	f300 814f 	bgt.w	8006692 <_dtoa_r+0x72a>
 80063f4:	4b45      	ldr	r3, [pc, #276]	; (800650c <_dtoa_r+0x5a4>)
 80063f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80063fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006404:	2b00      	cmp	r3, #0
 8006406:	f280 80db 	bge.w	80065c0 <_dtoa_r+0x658>
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f300 80d7 	bgt.w	80065c0 <_dtoa_r+0x658>
 8006412:	f040 8274 	bne.w	80068fe <_dtoa_r+0x996>
 8006416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641a:	2200      	movs	r2, #0
 800641c:	4b40      	ldr	r3, [pc, #256]	; (8006520 <_dtoa_r+0x5b8>)
 800641e:	f7fa f85b 	bl	80004d8 <__aeabi_dmul>
 8006422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006426:	f7fa fadd 	bl	80009e4 <__aeabi_dcmpge>
 800642a:	9c02      	ldr	r4, [sp, #8]
 800642c:	4626      	mov	r6, r4
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 824a 	bne.w	80068c8 <_dtoa_r+0x960>
 8006434:	2331      	movs	r3, #49	; 0x31
 8006436:	9f08      	ldr	r7, [sp, #32]
 8006438:	f109 0901 	add.w	r9, r9, #1
 800643c:	f807 3b01 	strb.w	r3, [r7], #1
 8006440:	e246      	b.n	80068d0 <_dtoa_r+0x968>
 8006442:	07e2      	lsls	r2, r4, #31
 8006444:	d505      	bpl.n	8006452 <_dtoa_r+0x4ea>
 8006446:	e9d6 2300 	ldrd	r2, r3, [r6]
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	2301      	movs	r3, #1
 8006450:	3701      	adds	r7, #1
 8006452:	1064      	asrs	r4, r4, #1
 8006454:	3608      	adds	r6, #8
 8006456:	e76d      	b.n	8006334 <_dtoa_r+0x3cc>
 8006458:	2702      	movs	r7, #2
 800645a:	e770      	b.n	800633e <_dtoa_r+0x3d6>
 800645c:	46c8      	mov	r8, r9
 800645e:	9c02      	ldr	r4, [sp, #8]
 8006460:	e78f      	b.n	8006382 <_dtoa_r+0x41a>
 8006462:	9908      	ldr	r1, [sp, #32]
 8006464:	4b29      	ldr	r3, [pc, #164]	; (800650c <_dtoa_r+0x5a4>)
 8006466:	4421      	add	r1, r4
 8006468:	9112      	str	r1, [sp, #72]	; 0x48
 800646a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800646c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006470:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006474:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006478:	2900      	cmp	r1, #0
 800647a:	d055      	beq.n	8006528 <_dtoa_r+0x5c0>
 800647c:	2000      	movs	r0, #0
 800647e:	4929      	ldr	r1, [pc, #164]	; (8006524 <_dtoa_r+0x5bc>)
 8006480:	f7fa f954 	bl	800072c <__aeabi_ddiv>
 8006484:	463b      	mov	r3, r7
 8006486:	4632      	mov	r2, r6
 8006488:	f7f9 fe6e 	bl	8000168 <__aeabi_dsub>
 800648c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006490:	9f08      	ldr	r7, [sp, #32]
 8006492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006496:	f7fa facf 	bl	8000a38 <__aeabi_d2iz>
 800649a:	4604      	mov	r4, r0
 800649c:	f7f9 ffb2 	bl	8000404 <__aeabi_i2d>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a8:	f7f9 fe5e 	bl	8000168 <__aeabi_dsub>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	3430      	adds	r4, #48	; 0x30
 80064b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ba:	f807 4b01 	strb.w	r4, [r7], #1
 80064be:	f7fa fa7d 	bl	80009bc <__aeabi_dcmplt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d174      	bne.n	80065b0 <_dtoa_r+0x648>
 80064c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ca:	2000      	movs	r0, #0
 80064cc:	4911      	ldr	r1, [pc, #68]	; (8006514 <_dtoa_r+0x5ac>)
 80064ce:	f7f9 fe4b 	bl	8000168 <__aeabi_dsub>
 80064d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064d6:	f7fa fa71 	bl	80009bc <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f040 80b6 	bne.w	800664c <_dtoa_r+0x6e4>
 80064e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e2:	429f      	cmp	r7, r3
 80064e4:	f43f af7a 	beq.w	80063dc <_dtoa_r+0x474>
 80064e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064ec:	2200      	movs	r2, #0
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <_dtoa_r+0x5b0>)
 80064f0:	f7f9 fff2 	bl	80004d8 <__aeabi_dmul>
 80064f4:	2200      	movs	r2, #0
 80064f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <_dtoa_r+0x5b0>)
 8006500:	f7f9 ffea 	bl	80004d8 <__aeabi_dmul>
 8006504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006508:	e7c3      	b.n	8006492 <_dtoa_r+0x52a>
 800650a:	bf00      	nop
 800650c:	08008548 	.word	0x08008548
 8006510:	08008520 	.word	0x08008520
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	40240000 	.word	0x40240000
 800651c:	401c0000 	.word	0x401c0000
 8006520:	40140000 	.word	0x40140000
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 ffd4 	bl	80004d8 <__aeabi_dmul>
 8006530:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006532:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006536:	9c08      	ldr	r4, [sp, #32]
 8006538:	9314      	str	r3, [sp, #80]	; 0x50
 800653a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800653e:	f7fa fa7b 	bl	8000a38 <__aeabi_d2iz>
 8006542:	9015      	str	r0, [sp, #84]	; 0x54
 8006544:	f7f9 ff5e 	bl	8000404 <__aeabi_i2d>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006550:	f7f9 fe0a 	bl	8000168 <__aeabi_dsub>
 8006554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006556:	4606      	mov	r6, r0
 8006558:	3330      	adds	r3, #48	; 0x30
 800655a:	f804 3b01 	strb.w	r3, [r4], #1
 800655e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006560:	460f      	mov	r7, r1
 8006562:	429c      	cmp	r4, r3
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	d124      	bne.n	80065b4 <_dtoa_r+0x64c>
 800656a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800656e:	4bb3      	ldr	r3, [pc, #716]	; (800683c <_dtoa_r+0x8d4>)
 8006570:	f7f9 fdfc 	bl	800016c <__adddf3>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f7fa fa3c 	bl	80009f8 <__aeabi_dcmpgt>
 8006580:	2800      	cmp	r0, #0
 8006582:	d162      	bne.n	800664a <_dtoa_r+0x6e2>
 8006584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006588:	2000      	movs	r0, #0
 800658a:	49ac      	ldr	r1, [pc, #688]	; (800683c <_dtoa_r+0x8d4>)
 800658c:	f7f9 fdec 	bl	8000168 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa fa10 	bl	80009bc <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	f43f af1d 	beq.w	80063dc <_dtoa_r+0x474>
 80065a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065a4:	1e7b      	subs	r3, r7, #1
 80065a6:	9314      	str	r3, [sp, #80]	; 0x50
 80065a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d0f8      	beq.n	80065a2 <_dtoa_r+0x63a>
 80065b0:	46c1      	mov	r9, r8
 80065b2:	e03a      	b.n	800662a <_dtoa_r+0x6c2>
 80065b4:	4ba2      	ldr	r3, [pc, #648]	; (8006840 <_dtoa_r+0x8d8>)
 80065b6:	f7f9 ff8f 	bl	80004d8 <__aeabi_dmul>
 80065ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065be:	e7bc      	b.n	800653a <_dtoa_r+0x5d2>
 80065c0:	9f08      	ldr	r7, [sp, #32]
 80065c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ca:	f7fa f8af 	bl	800072c <__aeabi_ddiv>
 80065ce:	f7fa fa33 	bl	8000a38 <__aeabi_d2iz>
 80065d2:	4604      	mov	r4, r0
 80065d4:	f7f9 ff16 	bl	8000404 <__aeabi_i2d>
 80065d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065dc:	f7f9 ff7c 	bl	80004d8 <__aeabi_dmul>
 80065e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065e4:	460b      	mov	r3, r1
 80065e6:	4602      	mov	r2, r0
 80065e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ec:	f7f9 fdbc 	bl	8000168 <__aeabi_dsub>
 80065f0:	f807 6b01 	strb.w	r6, [r7], #1
 80065f4:	9e08      	ldr	r6, [sp, #32]
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	1bbe      	subs	r6, r7, r6
 80065fa:	42b3      	cmp	r3, r6
 80065fc:	d13a      	bne.n	8006674 <_dtoa_r+0x70c>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	f7f9 fdb3 	bl	800016c <__adddf3>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800660e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006612:	f7fa f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8006616:	bb58      	cbnz	r0, 8006670 <_dtoa_r+0x708>
 8006618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800661c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006620:	f7fa f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8006624:	b108      	cbz	r0, 800662a <_dtoa_r+0x6c2>
 8006626:	07e1      	lsls	r1, r4, #31
 8006628:	d422      	bmi.n	8006670 <_dtoa_r+0x708>
 800662a:	4628      	mov	r0, r5
 800662c:	4651      	mov	r1, sl
 800662e:	f000 fae7 	bl	8006c00 <_Bfree>
 8006632:	2300      	movs	r3, #0
 8006634:	703b      	strb	r3, [r7, #0]
 8006636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006638:	f109 0001 	add.w	r0, r9, #1
 800663c:	6018      	str	r0, [r3, #0]
 800663e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006640:	2b00      	cmp	r3, #0
 8006642:	f43f acdf 	beq.w	8006004 <_dtoa_r+0x9c>
 8006646:	601f      	str	r7, [r3, #0]
 8006648:	e4dc      	b.n	8006004 <_dtoa_r+0x9c>
 800664a:	4627      	mov	r7, r4
 800664c:	463b      	mov	r3, r7
 800664e:	461f      	mov	r7, r3
 8006650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006654:	2a39      	cmp	r2, #57	; 0x39
 8006656:	d107      	bne.n	8006668 <_dtoa_r+0x700>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	429a      	cmp	r2, r3
 800665c:	d1f7      	bne.n	800664e <_dtoa_r+0x6e6>
 800665e:	2230      	movs	r2, #48	; 0x30
 8006660:	9908      	ldr	r1, [sp, #32]
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	700a      	strb	r2, [r1, #0]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	3201      	adds	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e79f      	b.n	80065b0 <_dtoa_r+0x648>
 8006670:	46c8      	mov	r8, r9
 8006672:	e7eb      	b.n	800664c <_dtoa_r+0x6e4>
 8006674:	2200      	movs	r2, #0
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <_dtoa_r+0x8d8>)
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d098      	beq.n	80065c2 <_dtoa_r+0x65a>
 8006690:	e7cb      	b.n	800662a <_dtoa_r+0x6c2>
 8006692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006694:	2a00      	cmp	r2, #0
 8006696:	f000 80cd 	beq.w	8006834 <_dtoa_r+0x8cc>
 800669a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800669c:	2a01      	cmp	r2, #1
 800669e:	f300 80af 	bgt.w	8006800 <_dtoa_r+0x898>
 80066a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	f000 80a7 	beq.w	80067f8 <_dtoa_r+0x890>
 80066aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066b0:	9f06      	ldr	r7, [sp, #24]
 80066b2:	9a06      	ldr	r2, [sp, #24]
 80066b4:	2101      	movs	r1, #1
 80066b6:	441a      	add	r2, r3
 80066b8:	9206      	str	r2, [sp, #24]
 80066ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066bc:	4628      	mov	r0, r5
 80066be:	441a      	add	r2, r3
 80066c0:	9209      	str	r2, [sp, #36]	; 0x24
 80066c2:	f000 fb57 	bl	8006d74 <__i2b>
 80066c6:	4606      	mov	r6, r0
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	dd0c      	ble.n	80066e6 <_dtoa_r+0x77e>
 80066cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd09      	ble.n	80066e6 <_dtoa_r+0x77e>
 80066d2:	42bb      	cmp	r3, r7
 80066d4:	bfa8      	it	ge
 80066d6:	463b      	movge	r3, r7
 80066d8:	9a06      	ldr	r2, [sp, #24]
 80066da:	1aff      	subs	r7, r7, r3
 80066dc:	1ad2      	subs	r2, r2, r3
 80066de:	9206      	str	r2, [sp, #24]
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	9309      	str	r3, [sp, #36]	; 0x24
 80066e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e8:	b1f3      	cbz	r3, 8006728 <_dtoa_r+0x7c0>
 80066ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80a9 	beq.w	8006844 <_dtoa_r+0x8dc>
 80066f2:	2c00      	cmp	r4, #0
 80066f4:	dd10      	ble.n	8006718 <_dtoa_r+0x7b0>
 80066f6:	4631      	mov	r1, r6
 80066f8:	4622      	mov	r2, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fbf4 	bl	8006ee8 <__pow5mult>
 8006700:	4652      	mov	r2, sl
 8006702:	4601      	mov	r1, r0
 8006704:	4606      	mov	r6, r0
 8006706:	4628      	mov	r0, r5
 8006708:	f000 fb4a 	bl	8006da0 <__multiply>
 800670c:	4680      	mov	r8, r0
 800670e:	4651      	mov	r1, sl
 8006710:	4628      	mov	r0, r5
 8006712:	f000 fa75 	bl	8006c00 <_Bfree>
 8006716:	46c2      	mov	sl, r8
 8006718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671a:	1b1a      	subs	r2, r3, r4
 800671c:	d004      	beq.n	8006728 <_dtoa_r+0x7c0>
 800671e:	4651      	mov	r1, sl
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fbe1 	bl	8006ee8 <__pow5mult>
 8006726:	4682      	mov	sl, r0
 8006728:	2101      	movs	r1, #1
 800672a:	4628      	mov	r0, r5
 800672c:	f000 fb22 	bl	8006d74 <__i2b>
 8006730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006732:	4604      	mov	r4, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	f340 8087 	ble.w	8006848 <_dtoa_r+0x8e0>
 800673a:	461a      	mov	r2, r3
 800673c:	4601      	mov	r1, r0
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fbd2 	bl	8006ee8 <__pow5mult>
 8006744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006746:	4604      	mov	r4, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	f340 8080 	ble.w	800684e <_dtoa_r+0x8e6>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006758:	6918      	ldr	r0, [r3, #16]
 800675a:	f000 fabd 	bl	8006cd8 <__hi0bits>
 800675e:	f1c0 0020 	rsb	r0, r0, #32
 8006762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006764:	4418      	add	r0, r3
 8006766:	f010 001f 	ands.w	r0, r0, #31
 800676a:	f000 8092 	beq.w	8006892 <_dtoa_r+0x92a>
 800676e:	f1c0 0320 	rsb	r3, r0, #32
 8006772:	2b04      	cmp	r3, #4
 8006774:	f340 808a 	ble.w	800688c <_dtoa_r+0x924>
 8006778:	f1c0 001c 	rsb	r0, r0, #28
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	4407      	add	r7, r0
 8006780:	4403      	add	r3, r0
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	4403      	add	r3, r0
 8006788:	9309      	str	r3, [sp, #36]	; 0x24
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dd05      	ble.n	800679c <_dtoa_r+0x834>
 8006790:	4651      	mov	r1, sl
 8006792:	461a      	mov	r2, r3
 8006794:	4628      	mov	r0, r5
 8006796:	f000 fc01 	bl	8006f9c <__lshift>
 800679a:	4682      	mov	sl, r0
 800679c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd05      	ble.n	80067ae <_dtoa_r+0x846>
 80067a2:	4621      	mov	r1, r4
 80067a4:	461a      	mov	r2, r3
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 fbf8 	bl	8006f9c <__lshift>
 80067ac:	4604      	mov	r4, r0
 80067ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d070      	beq.n	8006896 <_dtoa_r+0x92e>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4650      	mov	r0, sl
 80067b8:	f000 fc5c 	bl	8007074 <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	da6a      	bge.n	8006896 <_dtoa_r+0x92e>
 80067c0:	2300      	movs	r3, #0
 80067c2:	4651      	mov	r1, sl
 80067c4:	220a      	movs	r2, #10
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fa3c 	bl	8006c44 <__multadd>
 80067cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ce:	4682      	mov	sl, r0
 80067d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8193 	beq.w	8006b00 <_dtoa_r+0xb98>
 80067da:	4631      	mov	r1, r6
 80067dc:	2300      	movs	r3, #0
 80067de:	220a      	movs	r2, #10
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fa2f 	bl	8006c44 <__multadd>
 80067e6:	f1bb 0f00 	cmp.w	fp, #0
 80067ea:	4606      	mov	r6, r0
 80067ec:	f300 8093 	bgt.w	8006916 <_dtoa_r+0x9ae>
 80067f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	dc57      	bgt.n	80068a6 <_dtoa_r+0x93e>
 80067f6:	e08e      	b.n	8006916 <_dtoa_r+0x9ae>
 80067f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067fe:	e756      	b.n	80066ae <_dtoa_r+0x746>
 8006800:	9b02      	ldr	r3, [sp, #8]
 8006802:	1e5c      	subs	r4, r3, #1
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	42a3      	cmp	r3, r4
 8006808:	bfb7      	itett	lt
 800680a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800680c:	1b1c      	subge	r4, r3, r4
 800680e:	1ae2      	sublt	r2, r4, r3
 8006810:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006812:	bfbe      	ittt	lt
 8006814:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006816:	189b      	addlt	r3, r3, r2
 8006818:	930e      	strlt	r3, [sp, #56]	; 0x38
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	bfb8      	it	lt
 800681e:	2400      	movlt	r4, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	bfbb      	ittet	lt
 8006824:	9b06      	ldrlt	r3, [sp, #24]
 8006826:	9a02      	ldrlt	r2, [sp, #8]
 8006828:	9f06      	ldrge	r7, [sp, #24]
 800682a:	1a9f      	sublt	r7, r3, r2
 800682c:	bfac      	ite	ge
 800682e:	9b02      	ldrge	r3, [sp, #8]
 8006830:	2300      	movlt	r3, #0
 8006832:	e73e      	b.n	80066b2 <_dtoa_r+0x74a>
 8006834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006836:	9f06      	ldr	r7, [sp, #24]
 8006838:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800683a:	e745      	b.n	80066c8 <_dtoa_r+0x760>
 800683c:	3fe00000 	.word	0x3fe00000
 8006840:	40240000 	.word	0x40240000
 8006844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006846:	e76a      	b.n	800671e <_dtoa_r+0x7b6>
 8006848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800684a:	2b01      	cmp	r3, #1
 800684c:	dc19      	bgt.n	8006882 <_dtoa_r+0x91a>
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	b9bb      	cbnz	r3, 8006882 <_dtoa_r+0x91a>
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	b99b      	cbnz	r3, 8006882 <_dtoa_r+0x91a>
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	051b      	lsls	r3, r3, #20
 8006864:	b183      	cbz	r3, 8006888 <_dtoa_r+0x920>
 8006866:	f04f 0801 	mov.w	r8, #1
 800686a:	9b06      	ldr	r3, [sp, #24]
 800686c:	3301      	adds	r3, #1
 800686e:	9306      	str	r3, [sp, #24]
 8006870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006872:	3301      	adds	r3, #1
 8006874:	9309      	str	r3, [sp, #36]	; 0x24
 8006876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f af6a 	bne.w	8006752 <_dtoa_r+0x7ea>
 800687e:	2001      	movs	r0, #1
 8006880:	e76f      	b.n	8006762 <_dtoa_r+0x7fa>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	e7f6      	b.n	8006876 <_dtoa_r+0x90e>
 8006888:	4698      	mov	r8, r3
 800688a:	e7f4      	b.n	8006876 <_dtoa_r+0x90e>
 800688c:	f43f af7d 	beq.w	800678a <_dtoa_r+0x822>
 8006890:	4618      	mov	r0, r3
 8006892:	301c      	adds	r0, #28
 8006894:	e772      	b.n	800677c <_dtoa_r+0x814>
 8006896:	9b02      	ldr	r3, [sp, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc36      	bgt.n	800690a <_dtoa_r+0x9a2>
 800689c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dd33      	ble.n	800690a <_dtoa_r+0x9a2>
 80068a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80068a6:	f1bb 0f00 	cmp.w	fp, #0
 80068aa:	d10d      	bne.n	80068c8 <_dtoa_r+0x960>
 80068ac:	4621      	mov	r1, r4
 80068ae:	465b      	mov	r3, fp
 80068b0:	2205      	movs	r2, #5
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f9c6 	bl	8006c44 <__multadd>
 80068b8:	4601      	mov	r1, r0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4650      	mov	r0, sl
 80068be:	f000 fbd9 	bl	8007074 <__mcmp>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f73f adb6 	bgt.w	8006434 <_dtoa_r+0x4cc>
 80068c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ca:	9f08      	ldr	r7, [sp, #32]
 80068cc:	ea6f 0903 	mvn.w	r9, r3
 80068d0:	f04f 0800 	mov.w	r8, #0
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f992 	bl	8006c00 <_Bfree>
 80068dc:	2e00      	cmp	r6, #0
 80068de:	f43f aea4 	beq.w	800662a <_dtoa_r+0x6c2>
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	d005      	beq.n	80068f4 <_dtoa_r+0x98c>
 80068e8:	45b0      	cmp	r8, r6
 80068ea:	d003      	beq.n	80068f4 <_dtoa_r+0x98c>
 80068ec:	4641      	mov	r1, r8
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 f986 	bl	8006c00 <_Bfree>
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f982 	bl	8006c00 <_Bfree>
 80068fc:	e695      	b.n	800662a <_dtoa_r+0x6c2>
 80068fe:	2400      	movs	r4, #0
 8006900:	4626      	mov	r6, r4
 8006902:	e7e1      	b.n	80068c8 <_dtoa_r+0x960>
 8006904:	46c1      	mov	r9, r8
 8006906:	4626      	mov	r6, r4
 8006908:	e594      	b.n	8006434 <_dtoa_r+0x4cc>
 800690a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80fc 	beq.w	8006b0e <_dtoa_r+0xba6>
 8006916:	2f00      	cmp	r7, #0
 8006918:	dd05      	ble.n	8006926 <_dtoa_r+0x9be>
 800691a:	4631      	mov	r1, r6
 800691c:	463a      	mov	r2, r7
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fb3c 	bl	8006f9c <__lshift>
 8006924:	4606      	mov	r6, r0
 8006926:	f1b8 0f00 	cmp.w	r8, #0
 800692a:	d05c      	beq.n	80069e6 <_dtoa_r+0xa7e>
 800692c:	4628      	mov	r0, r5
 800692e:	6871      	ldr	r1, [r6, #4]
 8006930:	f000 f926 	bl	8006b80 <_Balloc>
 8006934:	4607      	mov	r7, r0
 8006936:	b928      	cbnz	r0, 8006944 <_dtoa_r+0x9dc>
 8006938:	4602      	mov	r2, r0
 800693a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800693e:	4b7e      	ldr	r3, [pc, #504]	; (8006b38 <_dtoa_r+0xbd0>)
 8006940:	f7ff bb26 	b.w	8005f90 <_dtoa_r+0x28>
 8006944:	6932      	ldr	r2, [r6, #16]
 8006946:	f106 010c 	add.w	r1, r6, #12
 800694a:	3202      	adds	r2, #2
 800694c:	0092      	lsls	r2, r2, #2
 800694e:	300c      	adds	r0, #12
 8006950:	f7fe fd14 	bl	800537c <memcpy>
 8006954:	2201      	movs	r2, #1
 8006956:	4639      	mov	r1, r7
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fb1f 	bl	8006f9c <__lshift>
 800695e:	46b0      	mov	r8, r6
 8006960:	4606      	mov	r6, r0
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	3301      	adds	r3, #1
 8006966:	9302      	str	r3, [sp, #8]
 8006968:	9b08      	ldr	r3, [sp, #32]
 800696a:	445b      	add	r3, fp
 800696c:	930a      	str	r3, [sp, #40]	; 0x28
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	9b02      	ldr	r3, [sp, #8]
 8006978:	4621      	mov	r1, r4
 800697a:	4650      	mov	r0, sl
 800697c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006980:	f7ff fa62 	bl	8005e48 <quorem>
 8006984:	4603      	mov	r3, r0
 8006986:	4641      	mov	r1, r8
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	9004      	str	r0, [sp, #16]
 800698c:	4650      	mov	r0, sl
 800698e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006990:	f000 fb70 	bl	8007074 <__mcmp>
 8006994:	4632      	mov	r2, r6
 8006996:	9006      	str	r0, [sp, #24]
 8006998:	4621      	mov	r1, r4
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fb86 	bl	80070ac <__mdiff>
 80069a0:	68c2      	ldr	r2, [r0, #12]
 80069a2:	4607      	mov	r7, r0
 80069a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a6:	bb02      	cbnz	r2, 80069ea <_dtoa_r+0xa82>
 80069a8:	4601      	mov	r1, r0
 80069aa:	4650      	mov	r0, sl
 80069ac:	f000 fb62 	bl	8007074 <__mcmp>
 80069b0:	4602      	mov	r2, r0
 80069b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b4:	4639      	mov	r1, r7
 80069b6:	4628      	mov	r0, r5
 80069b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80069bc:	f000 f920 	bl	8006c00 <_Bfree>
 80069c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069c4:	9f02      	ldr	r7, [sp, #8]
 80069c6:	ea43 0102 	orr.w	r1, r3, r2
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	430b      	orrs	r3, r1
 80069ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d0:	d10d      	bne.n	80069ee <_dtoa_r+0xa86>
 80069d2:	2b39      	cmp	r3, #57	; 0x39
 80069d4:	d027      	beq.n	8006a26 <_dtoa_r+0xabe>
 80069d6:	9a06      	ldr	r2, [sp, #24]
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd01      	ble.n	80069e0 <_dtoa_r+0xa78>
 80069dc:	9b04      	ldr	r3, [sp, #16]
 80069de:	3331      	adds	r3, #49	; 0x31
 80069e0:	f88b 3000 	strb.w	r3, [fp]
 80069e4:	e776      	b.n	80068d4 <_dtoa_r+0x96c>
 80069e6:	4630      	mov	r0, r6
 80069e8:	e7b9      	b.n	800695e <_dtoa_r+0x9f6>
 80069ea:	2201      	movs	r2, #1
 80069ec:	e7e2      	b.n	80069b4 <_dtoa_r+0xa4c>
 80069ee:	9906      	ldr	r1, [sp, #24]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	db04      	blt.n	80069fe <_dtoa_r+0xa96>
 80069f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80069f6:	4301      	orrs	r1, r0
 80069f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fa:	4301      	orrs	r1, r0
 80069fc:	d120      	bne.n	8006a40 <_dtoa_r+0xad8>
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	ddee      	ble.n	80069e0 <_dtoa_r+0xa78>
 8006a02:	4651      	mov	r1, sl
 8006a04:	2201      	movs	r2, #1
 8006a06:	4628      	mov	r0, r5
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	f000 fac7 	bl	8006f9c <__lshift>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4682      	mov	sl, r0
 8006a12:	f000 fb2f 	bl	8007074 <__mcmp>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	dc02      	bgt.n	8006a22 <_dtoa_r+0xaba>
 8006a1c:	d1e0      	bne.n	80069e0 <_dtoa_r+0xa78>
 8006a1e:	07da      	lsls	r2, r3, #31
 8006a20:	d5de      	bpl.n	80069e0 <_dtoa_r+0xa78>
 8006a22:	2b39      	cmp	r3, #57	; 0x39
 8006a24:	d1da      	bne.n	80069dc <_dtoa_r+0xa74>
 8006a26:	2339      	movs	r3, #57	; 0x39
 8006a28:	f88b 3000 	strb.w	r3, [fp]
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	461f      	mov	r7, r3
 8006a30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	2a39      	cmp	r2, #57	; 0x39
 8006a38:	d050      	beq.n	8006adc <_dtoa_r+0xb74>
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	e749      	b.n	80068d4 <_dtoa_r+0x96c>
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	dd03      	ble.n	8006a4c <_dtoa_r+0xae4>
 8006a44:	2b39      	cmp	r3, #57	; 0x39
 8006a46:	d0ee      	beq.n	8006a26 <_dtoa_r+0xabe>
 8006a48:	3301      	adds	r3, #1
 8006a4a:	e7c9      	b.n	80069e0 <_dtoa_r+0xa78>
 8006a4c:	9a02      	ldr	r2, [sp, #8]
 8006a4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d02a      	beq.n	8006aae <_dtoa_r+0xb46>
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f8f0 	bl	8006c44 <__multadd>
 8006a64:	45b0      	cmp	r8, r6
 8006a66:	4682      	mov	sl, r0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	f04f 020a 	mov.w	r2, #10
 8006a70:	4641      	mov	r1, r8
 8006a72:	4628      	mov	r0, r5
 8006a74:	d107      	bne.n	8006a86 <_dtoa_r+0xb1e>
 8006a76:	f000 f8e5 	bl	8006c44 <__multadd>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	9b02      	ldr	r3, [sp, #8]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	e777      	b.n	8006976 <_dtoa_r+0xa0e>
 8006a86:	f000 f8dd 	bl	8006c44 <__multadd>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	220a      	movs	r2, #10
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f8d6 	bl	8006c44 <__multadd>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	e7f0      	b.n	8006a7e <_dtoa_r+0xb16>
 8006a9c:	f1bb 0f00 	cmp.w	fp, #0
 8006aa0:	bfcc      	ite	gt
 8006aa2:	465f      	movgt	r7, fp
 8006aa4:	2701      	movle	r7, #1
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	9a08      	ldr	r2, [sp, #32]
 8006aac:	4417      	add	r7, r2
 8006aae:	4651      	mov	r1, sl
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	f000 fa71 	bl	8006f9c <__lshift>
 8006aba:	4621      	mov	r1, r4
 8006abc:	4682      	mov	sl, r0
 8006abe:	f000 fad9 	bl	8007074 <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	dcb2      	bgt.n	8006a2c <_dtoa_r+0xac4>
 8006ac6:	d102      	bne.n	8006ace <_dtoa_r+0xb66>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	07db      	lsls	r3, r3, #31
 8006acc:	d4ae      	bmi.n	8006a2c <_dtoa_r+0xac4>
 8006ace:	463b      	mov	r3, r7
 8006ad0:	461f      	mov	r7, r3
 8006ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ad6:	2a30      	cmp	r2, #48	; 0x30
 8006ad8:	d0fa      	beq.n	8006ad0 <_dtoa_r+0xb68>
 8006ada:	e6fb      	b.n	80068d4 <_dtoa_r+0x96c>
 8006adc:	9a08      	ldr	r2, [sp, #32]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d1a5      	bne.n	8006a2e <_dtoa_r+0xac6>
 8006ae2:	2331      	movs	r3, #49	; 0x31
 8006ae4:	f109 0901 	add.w	r9, r9, #1
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	e6f3      	b.n	80068d4 <_dtoa_r+0x96c>
 8006aec:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <_dtoa_r+0xbd4>)
 8006aee:	f7ff baa7 	b.w	8006040 <_dtoa_r+0xd8>
 8006af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f aa80 	bne.w	8005ffa <_dtoa_r+0x92>
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <_dtoa_r+0xbd8>)
 8006afc:	f7ff baa0 	b.w	8006040 <_dtoa_r+0xd8>
 8006b00:	f1bb 0f00 	cmp.w	fp, #0
 8006b04:	dc03      	bgt.n	8006b0e <_dtoa_r+0xba6>
 8006b06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	f73f aecc 	bgt.w	80068a6 <_dtoa_r+0x93e>
 8006b0e:	9f08      	ldr	r7, [sp, #32]
 8006b10:	4621      	mov	r1, r4
 8006b12:	4650      	mov	r0, sl
 8006b14:	f7ff f998 	bl	8005e48 <quorem>
 8006b18:	9a08      	ldr	r2, [sp, #32]
 8006b1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b1e:	f807 3b01 	strb.w	r3, [r7], #1
 8006b22:	1aba      	subs	r2, r7, r2
 8006b24:	4593      	cmp	fp, r2
 8006b26:	ddb9      	ble.n	8006a9c <_dtoa_r+0xb34>
 8006b28:	4651      	mov	r1, sl
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f888 	bl	8006c44 <__multadd>
 8006b34:	4682      	mov	sl, r0
 8006b36:	e7eb      	b.n	8006b10 <_dtoa_r+0xba8>
 8006b38:	080084af 	.word	0x080084af
 8006b3c:	08008408 	.word	0x08008408
 8006b40:	0800842c 	.word	0x0800842c

08006b44 <_localeconv_r>:
 8006b44:	4800      	ldr	r0, [pc, #0]	; (8006b48 <_localeconv_r+0x4>)
 8006b46:	4770      	bx	lr
 8006b48:	2000021c 	.word	0x2000021c

08006b4c <memchr>:
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	b2c9      	uxtb	r1, r1
 8006b52:	4402      	add	r2, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	d101      	bne.n	8006b5e <memchr+0x12>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e003      	b.n	8006b66 <memchr+0x1a>
 8006b5e:	7804      	ldrb	r4, [r0, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	428c      	cmp	r4, r1
 8006b64:	d1f6      	bne.n	8006b54 <memchr+0x8>
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <__malloc_lock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_lock+0x8>)
 8006b6a:	f000 bd26 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000720 	.word	0x20000720

08006b74 <__malloc_unlock>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__malloc_unlock+0x8>)
 8006b76:	f000 bd21 	b.w	80075bc <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20000720 	.word	0x20000720

08006b80 <_Balloc>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b84:	4604      	mov	r4, r0
 8006b86:	460d      	mov	r5, r1
 8006b88:	b976      	cbnz	r6, 8006ba8 <_Balloc+0x28>
 8006b8a:	2010      	movs	r0, #16
 8006b8c:	f7fe fbee 	bl	800536c <malloc>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6260      	str	r0, [r4, #36]	; 0x24
 8006b94:	b920      	cbnz	r0, 8006ba0 <_Balloc+0x20>
 8006b96:	2166      	movs	r1, #102	; 0x66
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <_Balloc+0x78>)
 8006b9a:	4818      	ldr	r0, [pc, #96]	; (8006bfc <_Balloc+0x7c>)
 8006b9c:	f000 fcdc 	bl	8007558 <__assert_func>
 8006ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ba4:	6006      	str	r6, [r0, #0]
 8006ba6:	60c6      	str	r6, [r0, #12]
 8006ba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006baa:	68f3      	ldr	r3, [r6, #12]
 8006bac:	b183      	cbz	r3, 8006bd0 <_Balloc+0x50>
 8006bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bb6:	b9b8      	cbnz	r0, 8006be8 <_Balloc+0x68>
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f605 	lsl.w	r6, r1, r5
 8006bbe:	1d72      	adds	r2, r6, #5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	0092      	lsls	r2, r2, #2
 8006bc4:	f000 fb5e 	bl	8007284 <_calloc_r>
 8006bc8:	b160      	cbz	r0, 8006be4 <_Balloc+0x64>
 8006bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bce:	e00e      	b.n	8006bee <_Balloc+0x6e>
 8006bd0:	2221      	movs	r2, #33	; 0x21
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 fb55 	bl	8007284 <_calloc_r>
 8006bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bdc:	60f0      	str	r0, [r6, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e4      	bne.n	8006bae <_Balloc+0x2e>
 8006be4:	2000      	movs	r0, #0
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	6802      	ldr	r2, [r0, #0]
 8006bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bf4:	e7f7      	b.n	8006be6 <_Balloc+0x66>
 8006bf6:	bf00      	nop
 8006bf8:	08008439 	.word	0x08008439
 8006bfc:	080084c0 	.word	0x080084c0

08006c00 <_Bfree>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c04:	4605      	mov	r5, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b976      	cbnz	r6, 8006c28 <_Bfree+0x28>
 8006c0a:	2010      	movs	r0, #16
 8006c0c:	f7fe fbae 	bl	800536c <malloc>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6268      	str	r0, [r5, #36]	; 0x24
 8006c14:	b920      	cbnz	r0, 8006c20 <_Bfree+0x20>
 8006c16:	218a      	movs	r1, #138	; 0x8a
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <_Bfree+0x3c>)
 8006c1a:	4809      	ldr	r0, [pc, #36]	; (8006c40 <_Bfree+0x40>)
 8006c1c:	f000 fc9c 	bl	8007558 <__assert_func>
 8006c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c24:	6006      	str	r6, [r0, #0]
 8006c26:	60c6      	str	r6, [r0, #12]
 8006c28:	b13c      	cbz	r4, 8006c3a <_Bfree+0x3a>
 8006c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c2c:	6862      	ldr	r2, [r4, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c34:	6021      	str	r1, [r4, #0]
 8006c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	08008439 	.word	0x08008439
 8006c40:	080084c0 	.word	0x080084c0

08006c44 <__multadd>:
 8006c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	4698      	mov	r8, r3
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	690e      	ldr	r6, [r1, #16]
 8006c50:	4607      	mov	r7, r0
 8006c52:	f101 0014 	add.w	r0, r1, #20
 8006c56:	6805      	ldr	r5, [r0, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	b2a9      	uxth	r1, r5
 8006c5c:	fb02 8101 	mla	r1, r2, r1, r8
 8006c60:	0c2d      	lsrs	r5, r5, #16
 8006c62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006c66:	fb02 c505 	mla	r5, r2, r5, ip
 8006c6a:	b289      	uxth	r1, r1
 8006c6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006c70:	429e      	cmp	r6, r3
 8006c72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006c76:	f840 1b04 	str.w	r1, [r0], #4
 8006c7a:	dcec      	bgt.n	8006c56 <__multadd+0x12>
 8006c7c:	f1b8 0f00 	cmp.w	r8, #0
 8006c80:	d022      	beq.n	8006cc8 <__multadd+0x84>
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	42b3      	cmp	r3, r6
 8006c86:	dc19      	bgt.n	8006cbc <__multadd+0x78>
 8006c88:	6861      	ldr	r1, [r4, #4]
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	3101      	adds	r1, #1
 8006c8e:	f7ff ff77 	bl	8006b80 <_Balloc>
 8006c92:	4605      	mov	r5, r0
 8006c94:	b928      	cbnz	r0, 8006ca2 <__multadd+0x5e>
 8006c96:	4602      	mov	r2, r0
 8006c98:	21b5      	movs	r1, #181	; 0xb5
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <__multadd+0x8c>)
 8006c9c:	480d      	ldr	r0, [pc, #52]	; (8006cd4 <__multadd+0x90>)
 8006c9e:	f000 fc5b 	bl	8007558 <__assert_func>
 8006ca2:	6922      	ldr	r2, [r4, #16]
 8006ca4:	f104 010c 	add.w	r1, r4, #12
 8006ca8:	3202      	adds	r2, #2
 8006caa:	0092      	lsls	r2, r2, #2
 8006cac:	300c      	adds	r0, #12
 8006cae:	f7fe fb65 	bl	800537c <memcpy>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ffa3 	bl	8006c00 <_Bfree>
 8006cba:	462c      	mov	r4, r5
 8006cbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006cc6:	6126      	str	r6, [r4, #16]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cce:	bf00      	nop
 8006cd0:	080084af 	.word	0x080084af
 8006cd4:	080084c0 	.word	0x080084c0

08006cd8 <__hi0bits>:
 8006cd8:	0c02      	lsrs	r2, r0, #16
 8006cda:	0412      	lsls	r2, r2, #16
 8006cdc:	4603      	mov	r3, r0
 8006cde:	b9ca      	cbnz	r2, 8006d14 <__hi0bits+0x3c>
 8006ce0:	0403      	lsls	r3, r0, #16
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ce8:	bf04      	itt	eq
 8006cea:	021b      	lsleq	r3, r3, #8
 8006cec:	3008      	addeq	r0, #8
 8006cee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cf2:	bf04      	itt	eq
 8006cf4:	011b      	lsleq	r3, r3, #4
 8006cf6:	3004      	addeq	r0, #4
 8006cf8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cfc:	bf04      	itt	eq
 8006cfe:	009b      	lsleq	r3, r3, #2
 8006d00:	3002      	addeq	r0, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db05      	blt.n	8006d12 <__hi0bits+0x3a>
 8006d06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d0a:	f100 0001 	add.w	r0, r0, #1
 8006d0e:	bf08      	it	eq
 8006d10:	2020      	moveq	r0, #32
 8006d12:	4770      	bx	lr
 8006d14:	2000      	movs	r0, #0
 8006d16:	e7e5      	b.n	8006ce4 <__hi0bits+0xc>

08006d18 <__lo0bits>:
 8006d18:	6803      	ldr	r3, [r0, #0]
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f013 0007 	ands.w	r0, r3, #7
 8006d20:	d00b      	beq.n	8006d3a <__lo0bits+0x22>
 8006d22:	07d9      	lsls	r1, r3, #31
 8006d24:	d422      	bmi.n	8006d6c <__lo0bits+0x54>
 8006d26:	0798      	lsls	r0, r3, #30
 8006d28:	bf49      	itett	mi
 8006d2a:	085b      	lsrmi	r3, r3, #1
 8006d2c:	089b      	lsrpl	r3, r3, #2
 8006d2e:	2001      	movmi	r0, #1
 8006d30:	6013      	strmi	r3, [r2, #0]
 8006d32:	bf5c      	itt	pl
 8006d34:	2002      	movpl	r0, #2
 8006d36:	6013      	strpl	r3, [r2, #0]
 8006d38:	4770      	bx	lr
 8006d3a:	b299      	uxth	r1, r3
 8006d3c:	b909      	cbnz	r1, 8006d42 <__lo0bits+0x2a>
 8006d3e:	2010      	movs	r0, #16
 8006d40:	0c1b      	lsrs	r3, r3, #16
 8006d42:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d46:	bf04      	itt	eq
 8006d48:	0a1b      	lsreq	r3, r3, #8
 8006d4a:	3008      	addeq	r0, #8
 8006d4c:	0719      	lsls	r1, r3, #28
 8006d4e:	bf04      	itt	eq
 8006d50:	091b      	lsreq	r3, r3, #4
 8006d52:	3004      	addeq	r0, #4
 8006d54:	0799      	lsls	r1, r3, #30
 8006d56:	bf04      	itt	eq
 8006d58:	089b      	lsreq	r3, r3, #2
 8006d5a:	3002      	addeq	r0, #2
 8006d5c:	07d9      	lsls	r1, r3, #31
 8006d5e:	d403      	bmi.n	8006d68 <__lo0bits+0x50>
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	f100 0001 	add.w	r0, r0, #1
 8006d66:	d003      	beq.n	8006d70 <__lo0bits+0x58>
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4770      	bx	lr
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4770      	bx	lr
 8006d70:	2020      	movs	r0, #32
 8006d72:	4770      	bx	lr

08006d74 <__i2b>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	460c      	mov	r4, r1
 8006d78:	2101      	movs	r1, #1
 8006d7a:	f7ff ff01 	bl	8006b80 <_Balloc>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	b928      	cbnz	r0, 8006d8e <__i2b+0x1a>
 8006d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d86:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <__i2b+0x24>)
 8006d88:	4804      	ldr	r0, [pc, #16]	; (8006d9c <__i2b+0x28>)
 8006d8a:	f000 fbe5 	bl	8007558 <__assert_func>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	6144      	str	r4, [r0, #20]
 8006d92:	6103      	str	r3, [r0, #16]
 8006d94:	bd10      	pop	{r4, pc}
 8006d96:	bf00      	nop
 8006d98:	080084af 	.word	0x080084af
 8006d9c:	080084c0 	.word	0x080084c0

08006da0 <__multiply>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4614      	mov	r4, r2
 8006da6:	690a      	ldr	r2, [r1, #16]
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	460d      	mov	r5, r1
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bfbe      	ittt	lt
 8006db0:	460b      	movlt	r3, r1
 8006db2:	4625      	movlt	r5, r4
 8006db4:	461c      	movlt	r4, r3
 8006db6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006dba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006dbe:	68ab      	ldr	r3, [r5, #8]
 8006dc0:	6869      	ldr	r1, [r5, #4]
 8006dc2:	eb0a 0709 	add.w	r7, sl, r9
 8006dc6:	42bb      	cmp	r3, r7
 8006dc8:	b085      	sub	sp, #20
 8006dca:	bfb8      	it	lt
 8006dcc:	3101      	addlt	r1, #1
 8006dce:	f7ff fed7 	bl	8006b80 <_Balloc>
 8006dd2:	b930      	cbnz	r0, 8006de2 <__multiply+0x42>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	f240 115d 	movw	r1, #349	; 0x15d
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <__multiply+0x140>)
 8006ddc:	4841      	ldr	r0, [pc, #260]	; (8006ee4 <__multiply+0x144>)
 8006dde:	f000 fbbb 	bl	8007558 <__assert_func>
 8006de2:	f100 0614 	add.w	r6, r0, #20
 8006de6:	4633      	mov	r3, r6
 8006de8:	2200      	movs	r2, #0
 8006dea:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006dee:	4543      	cmp	r3, r8
 8006df0:	d31e      	bcc.n	8006e30 <__multiply+0x90>
 8006df2:	f105 0c14 	add.w	ip, r5, #20
 8006df6:	f104 0314 	add.w	r3, r4, #20
 8006dfa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006dfe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e02:	9202      	str	r2, [sp, #8]
 8006e04:	ebac 0205 	sub.w	r2, ip, r5
 8006e08:	3a15      	subs	r2, #21
 8006e0a:	f022 0203 	bic.w	r2, r2, #3
 8006e0e:	3204      	adds	r2, #4
 8006e10:	f105 0115 	add.w	r1, r5, #21
 8006e14:	458c      	cmp	ip, r1
 8006e16:	bf38      	it	cc
 8006e18:	2204      	movcc	r2, #4
 8006e1a:	9201      	str	r2, [sp, #4]
 8006e1c:	9a02      	ldr	r2, [sp, #8]
 8006e1e:	9303      	str	r3, [sp, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d808      	bhi.n	8006e36 <__multiply+0x96>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	dc55      	bgt.n	8006ed4 <__multiply+0x134>
 8006e28:	6107      	str	r7, [r0, #16]
 8006e2a:	b005      	add	sp, #20
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	f843 2b04 	str.w	r2, [r3], #4
 8006e34:	e7db      	b.n	8006dee <__multiply+0x4e>
 8006e36:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d020      	beq.n	8006e82 <__multiply+0xe2>
 8006e40:	46b1      	mov	r9, r6
 8006e42:	2200      	movs	r2, #0
 8006e44:	f105 0e14 	add.w	lr, r5, #20
 8006e48:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006e4c:	f8d9 b000 	ldr.w	fp, [r9]
 8006e50:	b2a1      	uxth	r1, r4
 8006e52:	fa1f fb8b 	uxth.w	fp, fp
 8006e56:	fb0a b101 	mla	r1, sl, r1, fp
 8006e5a:	4411      	add	r1, r2
 8006e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e60:	0c24      	lsrs	r4, r4, #16
 8006e62:	0c12      	lsrs	r2, r2, #16
 8006e64:	fb0a 2404 	mla	r4, sl, r4, r2
 8006e68:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006e6c:	b289      	uxth	r1, r1
 8006e6e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e72:	45f4      	cmp	ip, lr
 8006e74:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006e78:	f849 1b04 	str.w	r1, [r9], #4
 8006e7c:	d8e4      	bhi.n	8006e48 <__multiply+0xa8>
 8006e7e:	9901      	ldr	r1, [sp, #4]
 8006e80:	5072      	str	r2, [r6, r1]
 8006e82:	9a03      	ldr	r2, [sp, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d01f      	beq.n	8006ed0 <__multiply+0x130>
 8006e90:	46b6      	mov	lr, r6
 8006e92:	f04f 0a00 	mov.w	sl, #0
 8006e96:	6834      	ldr	r4, [r6, #0]
 8006e98:	f105 0114 	add.w	r1, r5, #20
 8006e9c:	880a      	ldrh	r2, [r1, #0]
 8006e9e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006ea2:	b2a4      	uxth	r4, r4
 8006ea4:	fb09 b202 	mla	r2, r9, r2, fp
 8006ea8:	4492      	add	sl, r2
 8006eaa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006eae:	f84e 4b04 	str.w	r4, [lr], #4
 8006eb2:	f851 4b04 	ldr.w	r4, [r1], #4
 8006eb6:	f8be 2000 	ldrh.w	r2, [lr]
 8006eba:	0c24      	lsrs	r4, r4, #16
 8006ebc:	fb09 2404 	mla	r4, r9, r4, r2
 8006ec0:	458c      	cmp	ip, r1
 8006ec2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ec6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006eca:	d8e7      	bhi.n	8006e9c <__multiply+0xfc>
 8006ecc:	9a01      	ldr	r2, [sp, #4]
 8006ece:	50b4      	str	r4, [r6, r2]
 8006ed0:	3604      	adds	r6, #4
 8006ed2:	e7a3      	b.n	8006e1c <__multiply+0x7c>
 8006ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1a5      	bne.n	8006e28 <__multiply+0x88>
 8006edc:	3f01      	subs	r7, #1
 8006ede:	e7a1      	b.n	8006e24 <__multiply+0x84>
 8006ee0:	080084af 	.word	0x080084af
 8006ee4:	080084c0 	.word	0x080084c0

08006ee8 <__pow5mult>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4615      	mov	r5, r2
 8006eee:	f012 0203 	ands.w	r2, r2, #3
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460f      	mov	r7, r1
 8006ef6:	d007      	beq.n	8006f08 <__pow5mult+0x20>
 8006ef8:	4c25      	ldr	r4, [pc, #148]	; (8006f90 <__pow5mult+0xa8>)
 8006efa:	3a01      	subs	r2, #1
 8006efc:	2300      	movs	r3, #0
 8006efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f02:	f7ff fe9f 	bl	8006c44 <__multadd>
 8006f06:	4607      	mov	r7, r0
 8006f08:	10ad      	asrs	r5, r5, #2
 8006f0a:	d03d      	beq.n	8006f88 <__pow5mult+0xa0>
 8006f0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f0e:	b97c      	cbnz	r4, 8006f30 <__pow5mult+0x48>
 8006f10:	2010      	movs	r0, #16
 8006f12:	f7fe fa2b 	bl	800536c <malloc>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6270      	str	r0, [r6, #36]	; 0x24
 8006f1a:	b928      	cbnz	r0, 8006f28 <__pow5mult+0x40>
 8006f1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f20:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <__pow5mult+0xac>)
 8006f22:	481d      	ldr	r0, [pc, #116]	; (8006f98 <__pow5mult+0xb0>)
 8006f24:	f000 fb18 	bl	8007558 <__assert_func>
 8006f28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f2c:	6004      	str	r4, [r0, #0]
 8006f2e:	60c4      	str	r4, [r0, #12]
 8006f30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f38:	b94c      	cbnz	r4, 8006f4e <__pow5mult+0x66>
 8006f3a:	f240 2171 	movw	r1, #625	; 0x271
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f7ff ff18 	bl	8006d74 <__i2b>
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f4c:	6003      	str	r3, [r0, #0]
 8006f4e:	f04f 0900 	mov.w	r9, #0
 8006f52:	07eb      	lsls	r3, r5, #31
 8006f54:	d50a      	bpl.n	8006f6c <__pow5mult+0x84>
 8006f56:	4639      	mov	r1, r7
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ff20 	bl	8006da0 <__multiply>
 8006f60:	4680      	mov	r8, r0
 8006f62:	4639      	mov	r1, r7
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff fe4b 	bl	8006c00 <_Bfree>
 8006f6a:	4647      	mov	r7, r8
 8006f6c:	106d      	asrs	r5, r5, #1
 8006f6e:	d00b      	beq.n	8006f88 <__pow5mult+0xa0>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	b938      	cbnz	r0, 8006f84 <__pow5mult+0x9c>
 8006f74:	4622      	mov	r2, r4
 8006f76:	4621      	mov	r1, r4
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7ff ff11 	bl	8006da0 <__multiply>
 8006f7e:	6020      	str	r0, [r4, #0]
 8006f80:	f8c0 9000 	str.w	r9, [r0]
 8006f84:	4604      	mov	r4, r0
 8006f86:	e7e4      	b.n	8006f52 <__pow5mult+0x6a>
 8006f88:	4638      	mov	r0, r7
 8006f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8e:	bf00      	nop
 8006f90:	08008610 	.word	0x08008610
 8006f94:	08008439 	.word	0x08008439
 8006f98:	080084c0 	.word	0x080084c0

08006f9c <__lshift>:
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	4691      	mov	r9, r2
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	6849      	ldr	r1, [r1, #4]
 8006faa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fb4:	f108 0601 	add.w	r6, r8, #1
 8006fb8:	42b3      	cmp	r3, r6
 8006fba:	db0b      	blt.n	8006fd4 <__lshift+0x38>
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7ff fddf 	bl	8006b80 <_Balloc>
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	b948      	cbnz	r0, 8006fda <__lshift+0x3e>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <__lshift+0xd0>)
 8006fce:	4828      	ldr	r0, [pc, #160]	; (8007070 <__lshift+0xd4>)
 8006fd0:	f000 fac2 	bl	8007558 <__assert_func>
 8006fd4:	3101      	adds	r1, #1
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	e7ee      	b.n	8006fb8 <__lshift+0x1c>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f100 0114 	add.w	r1, r0, #20
 8006fe0:	f100 0210 	add.w	r2, r0, #16
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	4553      	cmp	r3, sl
 8006fe8:	db33      	blt.n	8007052 <__lshift+0xb6>
 8006fea:	6920      	ldr	r0, [r4, #16]
 8006fec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ff0:	f104 0314 	add.w	r3, r4, #20
 8006ff4:	f019 091f 	ands.w	r9, r9, #31
 8006ff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007000:	d02b      	beq.n	800705a <__lshift+0xbe>
 8007002:	468a      	mov	sl, r1
 8007004:	2200      	movs	r2, #0
 8007006:	f1c9 0e20 	rsb	lr, r9, #32
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	fa00 f009 	lsl.w	r0, r0, r9
 8007010:	4302      	orrs	r2, r0
 8007012:	f84a 2b04 	str.w	r2, [sl], #4
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	459c      	cmp	ip, r3
 800701c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007020:	d8f3      	bhi.n	800700a <__lshift+0x6e>
 8007022:	ebac 0304 	sub.w	r3, ip, r4
 8007026:	3b15      	subs	r3, #21
 8007028:	f023 0303 	bic.w	r3, r3, #3
 800702c:	3304      	adds	r3, #4
 800702e:	f104 0015 	add.w	r0, r4, #21
 8007032:	4584      	cmp	ip, r0
 8007034:	bf38      	it	cc
 8007036:	2304      	movcc	r3, #4
 8007038:	50ca      	str	r2, [r1, r3]
 800703a:	b10a      	cbz	r2, 8007040 <__lshift+0xa4>
 800703c:	f108 0602 	add.w	r6, r8, #2
 8007040:	3e01      	subs	r6, #1
 8007042:	4638      	mov	r0, r7
 8007044:	4621      	mov	r1, r4
 8007046:	612e      	str	r6, [r5, #16]
 8007048:	f7ff fdda 	bl	8006c00 <_Bfree>
 800704c:	4628      	mov	r0, r5
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007052:	f842 0f04 	str.w	r0, [r2, #4]!
 8007056:	3301      	adds	r3, #1
 8007058:	e7c5      	b.n	8006fe6 <__lshift+0x4a>
 800705a:	3904      	subs	r1, #4
 800705c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007060:	459c      	cmp	ip, r3
 8007062:	f841 2f04 	str.w	r2, [r1, #4]!
 8007066:	d8f9      	bhi.n	800705c <__lshift+0xc0>
 8007068:	e7ea      	b.n	8007040 <__lshift+0xa4>
 800706a:	bf00      	nop
 800706c:	080084af 	.word	0x080084af
 8007070:	080084c0 	.word	0x080084c0

08007074 <__mcmp>:
 8007074:	4603      	mov	r3, r0
 8007076:	690a      	ldr	r2, [r1, #16]
 8007078:	6900      	ldr	r0, [r0, #16]
 800707a:	b530      	push	{r4, r5, lr}
 800707c:	1a80      	subs	r0, r0, r2
 800707e:	d10d      	bne.n	800709c <__mcmp+0x28>
 8007080:	3314      	adds	r3, #20
 8007082:	3114      	adds	r1, #20
 8007084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800708c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007094:	4295      	cmp	r5, r2
 8007096:	d002      	beq.n	800709e <__mcmp+0x2a>
 8007098:	d304      	bcc.n	80070a4 <__mcmp+0x30>
 800709a:	2001      	movs	r0, #1
 800709c:	bd30      	pop	{r4, r5, pc}
 800709e:	42a3      	cmp	r3, r4
 80070a0:	d3f4      	bcc.n	800708c <__mcmp+0x18>
 80070a2:	e7fb      	b.n	800709c <__mcmp+0x28>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e7f8      	b.n	800709c <__mcmp+0x28>
	...

080070ac <__mdiff>:
 80070ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	460c      	mov	r4, r1
 80070b2:	4606      	mov	r6, r0
 80070b4:	4611      	mov	r1, r2
 80070b6:	4620      	mov	r0, r4
 80070b8:	4692      	mov	sl, r2
 80070ba:	f7ff ffdb 	bl	8007074 <__mcmp>
 80070be:	1e05      	subs	r5, r0, #0
 80070c0:	d111      	bne.n	80070e6 <__mdiff+0x3a>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4630      	mov	r0, r6
 80070c6:	f7ff fd5b 	bl	8006b80 <_Balloc>
 80070ca:	4602      	mov	r2, r0
 80070cc:	b928      	cbnz	r0, 80070da <__mdiff+0x2e>
 80070ce:	f240 2132 	movw	r1, #562	; 0x232
 80070d2:	4b3c      	ldr	r3, [pc, #240]	; (80071c4 <__mdiff+0x118>)
 80070d4:	483c      	ldr	r0, [pc, #240]	; (80071c8 <__mdiff+0x11c>)
 80070d6:	f000 fa3f 	bl	8007558 <__assert_func>
 80070da:	2301      	movs	r3, #1
 80070dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070e0:	4610      	mov	r0, r2
 80070e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	bfa4      	itt	ge
 80070e8:	4653      	movge	r3, sl
 80070ea:	46a2      	movge	sl, r4
 80070ec:	4630      	mov	r0, r6
 80070ee:	f8da 1004 	ldr.w	r1, [sl, #4]
 80070f2:	bfa6      	itte	ge
 80070f4:	461c      	movge	r4, r3
 80070f6:	2500      	movge	r5, #0
 80070f8:	2501      	movlt	r5, #1
 80070fa:	f7ff fd41 	bl	8006b80 <_Balloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	b918      	cbnz	r0, 800710a <__mdiff+0x5e>
 8007102:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007106:	4b2f      	ldr	r3, [pc, #188]	; (80071c4 <__mdiff+0x118>)
 8007108:	e7e4      	b.n	80070d4 <__mdiff+0x28>
 800710a:	f100 0814 	add.w	r8, r0, #20
 800710e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007112:	60c5      	str	r5, [r0, #12]
 8007114:	f04f 0c00 	mov.w	ip, #0
 8007118:	f10a 0514 	add.w	r5, sl, #20
 800711c:	f10a 0010 	add.w	r0, sl, #16
 8007120:	46c2      	mov	sl, r8
 8007122:	6926      	ldr	r6, [r4, #16]
 8007124:	f104 0914 	add.w	r9, r4, #20
 8007128:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800712c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007130:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007134:	f859 3b04 	ldr.w	r3, [r9], #4
 8007138:	fa1f f18b 	uxth.w	r1, fp
 800713c:	4461      	add	r1, ip
 800713e:	fa1f fc83 	uxth.w	ip, r3
 8007142:	0c1b      	lsrs	r3, r3, #16
 8007144:	eba1 010c 	sub.w	r1, r1, ip
 8007148:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800714c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007150:	b289      	uxth	r1, r1
 8007152:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007156:	454e      	cmp	r6, r9
 8007158:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800715c:	f84a 3b04 	str.w	r3, [sl], #4
 8007160:	d8e6      	bhi.n	8007130 <__mdiff+0x84>
 8007162:	1b33      	subs	r3, r6, r4
 8007164:	3b15      	subs	r3, #21
 8007166:	f023 0303 	bic.w	r3, r3, #3
 800716a:	3415      	adds	r4, #21
 800716c:	3304      	adds	r3, #4
 800716e:	42a6      	cmp	r6, r4
 8007170:	bf38      	it	cc
 8007172:	2304      	movcc	r3, #4
 8007174:	441d      	add	r5, r3
 8007176:	4443      	add	r3, r8
 8007178:	461e      	mov	r6, r3
 800717a:	462c      	mov	r4, r5
 800717c:	4574      	cmp	r4, lr
 800717e:	d30e      	bcc.n	800719e <__mdiff+0xf2>
 8007180:	f10e 0103 	add.w	r1, lr, #3
 8007184:	1b49      	subs	r1, r1, r5
 8007186:	f021 0103 	bic.w	r1, r1, #3
 800718a:	3d03      	subs	r5, #3
 800718c:	45ae      	cmp	lr, r5
 800718e:	bf38      	it	cc
 8007190:	2100      	movcc	r1, #0
 8007192:	4419      	add	r1, r3
 8007194:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007198:	b18b      	cbz	r3, 80071be <__mdiff+0x112>
 800719a:	6117      	str	r7, [r2, #16]
 800719c:	e7a0      	b.n	80070e0 <__mdiff+0x34>
 800719e:	f854 8b04 	ldr.w	r8, [r4], #4
 80071a2:	fa1f f188 	uxth.w	r1, r8
 80071a6:	4461      	add	r1, ip
 80071a8:	1408      	asrs	r0, r1, #16
 80071aa:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80071ae:	b289      	uxth	r1, r1
 80071b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071b8:	f846 1b04 	str.w	r1, [r6], #4
 80071bc:	e7de      	b.n	800717c <__mdiff+0xd0>
 80071be:	3f01      	subs	r7, #1
 80071c0:	e7e8      	b.n	8007194 <__mdiff+0xe8>
 80071c2:	bf00      	nop
 80071c4:	080084af 	.word	0x080084af
 80071c8:	080084c0 	.word	0x080084c0

080071cc <__d2b>:
 80071cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80071d0:	2101      	movs	r1, #1
 80071d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80071d6:	4690      	mov	r8, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	f7ff fcd1 	bl	8006b80 <_Balloc>
 80071de:	4604      	mov	r4, r0
 80071e0:	b930      	cbnz	r0, 80071f0 <__d2b+0x24>
 80071e2:	4602      	mov	r2, r0
 80071e4:	f240 310a 	movw	r1, #778	; 0x30a
 80071e8:	4b24      	ldr	r3, [pc, #144]	; (800727c <__d2b+0xb0>)
 80071ea:	4825      	ldr	r0, [pc, #148]	; (8007280 <__d2b+0xb4>)
 80071ec:	f000 f9b4 	bl	8007558 <__assert_func>
 80071f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80071f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80071f8:	bb2d      	cbnz	r5, 8007246 <__d2b+0x7a>
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	f1b8 0300 	subs.w	r3, r8, #0
 8007200:	d026      	beq.n	8007250 <__d2b+0x84>
 8007202:	4668      	mov	r0, sp
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	f7ff fd87 	bl	8006d18 <__lo0bits>
 800720a:	9900      	ldr	r1, [sp, #0]
 800720c:	b1f0      	cbz	r0, 800724c <__d2b+0x80>
 800720e:	9a01      	ldr	r2, [sp, #4]
 8007210:	f1c0 0320 	rsb	r3, r0, #32
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	430b      	orrs	r3, r1
 800721a:	40c2      	lsrs	r2, r0
 800721c:	6163      	str	r3, [r4, #20]
 800721e:	9201      	str	r2, [sp, #4]
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2102      	movne	r1, #2
 8007228:	2101      	moveq	r1, #1
 800722a:	61a3      	str	r3, [r4, #24]
 800722c:	6121      	str	r1, [r4, #16]
 800722e:	b1c5      	cbz	r5, 8007262 <__d2b+0x96>
 8007230:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007234:	4405      	add	r5, r0
 8007236:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800723a:	603d      	str	r5, [r7, #0]
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	4620      	mov	r0, r4
 8007240:	b002      	add	sp, #8
 8007242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800724a:	e7d6      	b.n	80071fa <__d2b+0x2e>
 800724c:	6161      	str	r1, [r4, #20]
 800724e:	e7e7      	b.n	8007220 <__d2b+0x54>
 8007250:	a801      	add	r0, sp, #4
 8007252:	f7ff fd61 	bl	8006d18 <__lo0bits>
 8007256:	2101      	movs	r1, #1
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	6121      	str	r1, [r4, #16]
 800725c:	6163      	str	r3, [r4, #20]
 800725e:	3020      	adds	r0, #32
 8007260:	e7e5      	b.n	800722e <__d2b+0x62>
 8007262:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007266:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800726a:	6038      	str	r0, [r7, #0]
 800726c:	6918      	ldr	r0, [r3, #16]
 800726e:	f7ff fd33 	bl	8006cd8 <__hi0bits>
 8007272:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007276:	6031      	str	r1, [r6, #0]
 8007278:	e7e1      	b.n	800723e <__d2b+0x72>
 800727a:	bf00      	nop
 800727c:	080084af 	.word	0x080084af
 8007280:	080084c0 	.word	0x080084c0

08007284 <_calloc_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	fb02 f501 	mul.w	r5, r2, r1
 800728a:	4629      	mov	r1, r5
 800728c:	f7fe f8f2 	bl	8005474 <_malloc_r>
 8007290:	4604      	mov	r4, r0
 8007292:	b118      	cbz	r0, 800729c <_calloc_r+0x18>
 8007294:	462a      	mov	r2, r5
 8007296:	2100      	movs	r1, #0
 8007298:	f7fe f898 	bl	80053cc <memset>
 800729c:	4620      	mov	r0, r4
 800729e:	bd38      	pop	{r3, r4, r5, pc}

080072a0 <__ssputs_r>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	688e      	ldr	r6, [r1, #8]
 80072a6:	4682      	mov	sl, r0
 80072a8:	429e      	cmp	r6, r3
 80072aa:	460c      	mov	r4, r1
 80072ac:	4690      	mov	r8, r2
 80072ae:	461f      	mov	r7, r3
 80072b0:	d838      	bhi.n	8007324 <__ssputs_r+0x84>
 80072b2:	898a      	ldrh	r2, [r1, #12]
 80072b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b8:	d032      	beq.n	8007320 <__ssputs_r+0x80>
 80072ba:	6825      	ldr	r5, [r4, #0]
 80072bc:	6909      	ldr	r1, [r1, #16]
 80072be:	3301      	adds	r3, #1
 80072c0:	eba5 0901 	sub.w	r9, r5, r1
 80072c4:	6965      	ldr	r5, [r4, #20]
 80072c6:	444b      	add	r3, r9
 80072c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d0:	106d      	asrs	r5, r5, #1
 80072d2:	429d      	cmp	r5, r3
 80072d4:	bf38      	it	cc
 80072d6:	461d      	movcc	r5, r3
 80072d8:	0553      	lsls	r3, r2, #21
 80072da:	d531      	bpl.n	8007340 <__ssputs_r+0xa0>
 80072dc:	4629      	mov	r1, r5
 80072de:	f7fe f8c9 	bl	8005474 <_malloc_r>
 80072e2:	4606      	mov	r6, r0
 80072e4:	b950      	cbnz	r0, 80072fc <__ssputs_r+0x5c>
 80072e6:	230c      	movs	r3, #12
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	f8ca 3000 	str.w	r3, [sl]
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f6:	81a3      	strh	r3, [r4, #12]
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	464a      	mov	r2, r9
 80072fe:	6921      	ldr	r1, [r4, #16]
 8007300:	f7fe f83c 	bl	800537c <memcpy>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800730a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	6126      	str	r6, [r4, #16]
 8007312:	444e      	add	r6, r9
 8007314:	6026      	str	r6, [r4, #0]
 8007316:	463e      	mov	r6, r7
 8007318:	6165      	str	r5, [r4, #20]
 800731a:	eba5 0509 	sub.w	r5, r5, r9
 800731e:	60a5      	str	r5, [r4, #8]
 8007320:	42be      	cmp	r6, r7
 8007322:	d900      	bls.n	8007326 <__ssputs_r+0x86>
 8007324:	463e      	mov	r6, r7
 8007326:	4632      	mov	r2, r6
 8007328:	4641      	mov	r1, r8
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	f7fe f834 	bl	8005398 <memmove>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	4432      	add	r2, r6
 8007338:	2000      	movs	r0, #0
 800733a:	60a3      	str	r3, [r4, #8]
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	e7db      	b.n	80072f8 <__ssputs_r+0x58>
 8007340:	462a      	mov	r2, r5
 8007342:	f000 f94e 	bl	80075e2 <_realloc_r>
 8007346:	4606      	mov	r6, r0
 8007348:	2800      	cmp	r0, #0
 800734a:	d1e1      	bne.n	8007310 <__ssputs_r+0x70>
 800734c:	4650      	mov	r0, sl
 800734e:	6921      	ldr	r1, [r4, #16]
 8007350:	f7fe f844 	bl	80053dc <_free_r>
 8007354:	e7c7      	b.n	80072e6 <__ssputs_r+0x46>
	...

08007358 <_svfiprintf_r>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	4698      	mov	r8, r3
 800735e:	898b      	ldrh	r3, [r1, #12]
 8007360:	4607      	mov	r7, r0
 8007362:	061b      	lsls	r3, r3, #24
 8007364:	460d      	mov	r5, r1
 8007366:	4614      	mov	r4, r2
 8007368:	b09d      	sub	sp, #116	; 0x74
 800736a:	d50e      	bpl.n	800738a <_svfiprintf_r+0x32>
 800736c:	690b      	ldr	r3, [r1, #16]
 800736e:	b963      	cbnz	r3, 800738a <_svfiprintf_r+0x32>
 8007370:	2140      	movs	r1, #64	; 0x40
 8007372:	f7fe f87f 	bl	8005474 <_malloc_r>
 8007376:	6028      	str	r0, [r5, #0]
 8007378:	6128      	str	r0, [r5, #16]
 800737a:	b920      	cbnz	r0, 8007386 <_svfiprintf_r+0x2e>
 800737c:	230c      	movs	r3, #12
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e0d1      	b.n	800752a <_svfiprintf_r+0x1d2>
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	616b      	str	r3, [r5, #20]
 800738a:	2300      	movs	r3, #0
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	2320      	movs	r3, #32
 8007390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	f04f 0901 	mov.w	r9, #1
 800739a:	f8cd 800c 	str.w	r8, [sp, #12]
 800739e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007544 <_svfiprintf_r+0x1ec>
 80073a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a6:	4623      	mov	r3, r4
 80073a8:	469a      	mov	sl, r3
 80073aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ae:	b10a      	cbz	r2, 80073b4 <_svfiprintf_r+0x5c>
 80073b0:	2a25      	cmp	r2, #37	; 0x25
 80073b2:	d1f9      	bne.n	80073a8 <_svfiprintf_r+0x50>
 80073b4:	ebba 0b04 	subs.w	fp, sl, r4
 80073b8:	d00b      	beq.n	80073d2 <_svfiprintf_r+0x7a>
 80073ba:	465b      	mov	r3, fp
 80073bc:	4622      	mov	r2, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ff6d 	bl	80072a0 <__ssputs_r>
 80073c6:	3001      	adds	r0, #1
 80073c8:	f000 80aa 	beq.w	8007520 <_svfiprintf_r+0x1c8>
 80073cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ce:	445a      	add	r2, fp
 80073d0:	9209      	str	r2, [sp, #36]	; 0x24
 80073d2:	f89a 3000 	ldrb.w	r3, [sl]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80a2 	beq.w	8007520 <_svfiprintf_r+0x1c8>
 80073dc:	2300      	movs	r3, #0
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e6:	f10a 0a01 	add.w	sl, sl, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f2:	931a      	str	r3, [sp, #104]	; 0x68
 80073f4:	4654      	mov	r4, sl
 80073f6:	2205      	movs	r2, #5
 80073f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fc:	4851      	ldr	r0, [pc, #324]	; (8007544 <_svfiprintf_r+0x1ec>)
 80073fe:	f7ff fba5 	bl	8006b4c <memchr>
 8007402:	9a04      	ldr	r2, [sp, #16]
 8007404:	b9d8      	cbnz	r0, 800743e <_svfiprintf_r+0xe6>
 8007406:	06d0      	lsls	r0, r2, #27
 8007408:	bf44      	itt	mi
 800740a:	2320      	movmi	r3, #32
 800740c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007410:	0711      	lsls	r1, r2, #28
 8007412:	bf44      	itt	mi
 8007414:	232b      	movmi	r3, #43	; 0x2b
 8007416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741a:	f89a 3000 	ldrb.w	r3, [sl]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d015      	beq.n	800744e <_svfiprintf_r+0xf6>
 8007422:	4654      	mov	r4, sl
 8007424:	2000      	movs	r0, #0
 8007426:	f04f 0c0a 	mov.w	ip, #10
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	4621      	mov	r1, r4
 800742e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	2b09      	cmp	r3, #9
 8007436:	d94e      	bls.n	80074d6 <_svfiprintf_r+0x17e>
 8007438:	b1b0      	cbz	r0, 8007468 <_svfiprintf_r+0x110>
 800743a:	9207      	str	r2, [sp, #28]
 800743c:	e014      	b.n	8007468 <_svfiprintf_r+0x110>
 800743e:	eba0 0308 	sub.w	r3, r0, r8
 8007442:	fa09 f303 	lsl.w	r3, r9, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	46a2      	mov	sl, r4
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	e7d2      	b.n	80073f4 <_svfiprintf_r+0x9c>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	1d19      	adds	r1, r3, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	9103      	str	r1, [sp, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfbb      	ittet	lt
 800745a:	425b      	neglt	r3, r3
 800745c:	f042 0202 	orrlt.w	r2, r2, #2
 8007460:	9307      	strge	r3, [sp, #28]
 8007462:	9307      	strlt	r3, [sp, #28]
 8007464:	bfb8      	it	lt
 8007466:	9204      	strlt	r2, [sp, #16]
 8007468:	7823      	ldrb	r3, [r4, #0]
 800746a:	2b2e      	cmp	r3, #46	; 0x2e
 800746c:	d10c      	bne.n	8007488 <_svfiprintf_r+0x130>
 800746e:	7863      	ldrb	r3, [r4, #1]
 8007470:	2b2a      	cmp	r3, #42	; 0x2a
 8007472:	d135      	bne.n	80074e0 <_svfiprintf_r+0x188>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	3402      	adds	r4, #2
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	9203      	str	r2, [sp, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	f04f 33ff 	movlt.w	r3, #4294967295
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007554 <_svfiprintf_r+0x1fc>
 800748c:	2203      	movs	r2, #3
 800748e:	4650      	mov	r0, sl
 8007490:	7821      	ldrb	r1, [r4, #0]
 8007492:	f7ff fb5b 	bl	8006b4c <memchr>
 8007496:	b140      	cbz	r0, 80074aa <_svfiprintf_r+0x152>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	eba0 000a 	sub.w	r0, r0, sl
 800749e:	fa03 f000 	lsl.w	r0, r3, r0
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	3401      	adds	r4, #1
 80074a6:	4303      	orrs	r3, r0
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ae:	2206      	movs	r2, #6
 80074b0:	4825      	ldr	r0, [pc, #148]	; (8007548 <_svfiprintf_r+0x1f0>)
 80074b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b6:	f7ff fb49 	bl	8006b4c <memchr>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d038      	beq.n	8007530 <_svfiprintf_r+0x1d8>
 80074be:	4b23      	ldr	r3, [pc, #140]	; (800754c <_svfiprintf_r+0x1f4>)
 80074c0:	bb1b      	cbnz	r3, 800750a <_svfiprintf_r+0x1b2>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	3307      	adds	r3, #7
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	3308      	adds	r3, #8
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	4433      	add	r3, r6
 80074d2:	9309      	str	r3, [sp, #36]	; 0x24
 80074d4:	e767      	b.n	80073a6 <_svfiprintf_r+0x4e>
 80074d6:	460c      	mov	r4, r1
 80074d8:	2001      	movs	r0, #1
 80074da:	fb0c 3202 	mla	r2, ip, r2, r3
 80074de:	e7a5      	b.n	800742c <_svfiprintf_r+0xd4>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f04f 0c0a 	mov.w	ip, #10
 80074e6:	4619      	mov	r1, r3
 80074e8:	3401      	adds	r4, #1
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	4620      	mov	r0, r4
 80074ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f2:	3a30      	subs	r2, #48	; 0x30
 80074f4:	2a09      	cmp	r2, #9
 80074f6:	d903      	bls.n	8007500 <_svfiprintf_r+0x1a8>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0c5      	beq.n	8007488 <_svfiprintf_r+0x130>
 80074fc:	9105      	str	r1, [sp, #20]
 80074fe:	e7c3      	b.n	8007488 <_svfiprintf_r+0x130>
 8007500:	4604      	mov	r4, r0
 8007502:	2301      	movs	r3, #1
 8007504:	fb0c 2101 	mla	r1, ip, r1, r2
 8007508:	e7f0      	b.n	80074ec <_svfiprintf_r+0x194>
 800750a:	ab03      	add	r3, sp, #12
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	462a      	mov	r2, r5
 8007510:	4638      	mov	r0, r7
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <_svfiprintf_r+0x1f8>)
 8007514:	a904      	add	r1, sp, #16
 8007516:	f7fe f8a5 	bl	8005664 <_printf_float>
 800751a:	1c42      	adds	r2, r0, #1
 800751c:	4606      	mov	r6, r0
 800751e:	d1d6      	bne.n	80074ce <_svfiprintf_r+0x176>
 8007520:	89ab      	ldrh	r3, [r5, #12]
 8007522:	065b      	lsls	r3, r3, #25
 8007524:	f53f af2c 	bmi.w	8007380 <_svfiprintf_r+0x28>
 8007528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800752a:	b01d      	add	sp, #116	; 0x74
 800752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	462a      	mov	r2, r5
 8007536:	4638      	mov	r0, r7
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <_svfiprintf_r+0x1f8>)
 800753a:	a904      	add	r1, sp, #16
 800753c:	f7fe fb2e 	bl	8005b9c <_printf_i>
 8007540:	e7eb      	b.n	800751a <_svfiprintf_r+0x1c2>
 8007542:	bf00      	nop
 8007544:	0800861c 	.word	0x0800861c
 8007548:	08008626 	.word	0x08008626
 800754c:	08005665 	.word	0x08005665
 8007550:	080072a1 	.word	0x080072a1
 8007554:	08008622 	.word	0x08008622

08007558 <__assert_func>:
 8007558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755a:	4614      	mov	r4, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <__assert_func+0x2c>)
 8007560:	4605      	mov	r5, r0
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68d8      	ldr	r0, [r3, #12]
 8007566:	b14c      	cbz	r4, 800757c <__assert_func+0x24>
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <__assert_func+0x30>)
 800756a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800756e:	9100      	str	r1, [sp, #0]
 8007570:	462b      	mov	r3, r5
 8007572:	4906      	ldr	r1, [pc, #24]	; (800758c <__assert_func+0x34>)
 8007574:	f000 f80e 	bl	8007594 <fiprintf>
 8007578:	f000 fa7e 	bl	8007a78 <abort>
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <__assert_func+0x38>)
 800757e:	461c      	mov	r4, r3
 8007580:	e7f3      	b.n	800756a <__assert_func+0x12>
 8007582:	bf00      	nop
 8007584:	200000c8 	.word	0x200000c8
 8007588:	0800862d 	.word	0x0800862d
 800758c:	0800863a 	.word	0x0800863a
 8007590:	08008668 	.word	0x08008668

08007594 <fiprintf>:
 8007594:	b40e      	push	{r1, r2, r3}
 8007596:	b503      	push	{r0, r1, lr}
 8007598:	4601      	mov	r1, r0
 800759a:	ab03      	add	r3, sp, #12
 800759c:	4805      	ldr	r0, [pc, #20]	; (80075b4 <fiprintf+0x20>)
 800759e:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a2:	6800      	ldr	r0, [r0, #0]
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	f000 f869 	bl	800767c <_vfiprintf_r>
 80075aa:	b002      	add	sp, #8
 80075ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b0:	b003      	add	sp, #12
 80075b2:	4770      	bx	lr
 80075b4:	200000c8 	.word	0x200000c8

080075b8 <__retarget_lock_init_recursive>:
 80075b8:	4770      	bx	lr

080075ba <__retarget_lock_acquire_recursive>:
 80075ba:	4770      	bx	lr

080075bc <__retarget_lock_release_recursive>:
 80075bc:	4770      	bx	lr

080075be <__ascii_mbtowc>:
 80075be:	b082      	sub	sp, #8
 80075c0:	b901      	cbnz	r1, 80075c4 <__ascii_mbtowc+0x6>
 80075c2:	a901      	add	r1, sp, #4
 80075c4:	b142      	cbz	r2, 80075d8 <__ascii_mbtowc+0x1a>
 80075c6:	b14b      	cbz	r3, 80075dc <__ascii_mbtowc+0x1e>
 80075c8:	7813      	ldrb	r3, [r2, #0]
 80075ca:	600b      	str	r3, [r1, #0]
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	1e10      	subs	r0, r2, #0
 80075d0:	bf18      	it	ne
 80075d2:	2001      	movne	r0, #1
 80075d4:	b002      	add	sp, #8
 80075d6:	4770      	bx	lr
 80075d8:	4610      	mov	r0, r2
 80075da:	e7fb      	b.n	80075d4 <__ascii_mbtowc+0x16>
 80075dc:	f06f 0001 	mvn.w	r0, #1
 80075e0:	e7f8      	b.n	80075d4 <__ascii_mbtowc+0x16>

080075e2 <_realloc_r>:
 80075e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e4:	4607      	mov	r7, r0
 80075e6:	4614      	mov	r4, r2
 80075e8:	460e      	mov	r6, r1
 80075ea:	b921      	cbnz	r1, 80075f6 <_realloc_r+0x14>
 80075ec:	4611      	mov	r1, r2
 80075ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075f2:	f7fd bf3f 	b.w	8005474 <_malloc_r>
 80075f6:	b922      	cbnz	r2, 8007602 <_realloc_r+0x20>
 80075f8:	f7fd fef0 	bl	80053dc <_free_r>
 80075fc:	4625      	mov	r5, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007602:	f000 fc5d 	bl	8007ec0 <_malloc_usable_size_r>
 8007606:	42a0      	cmp	r0, r4
 8007608:	d20f      	bcs.n	800762a <_realloc_r+0x48>
 800760a:	4621      	mov	r1, r4
 800760c:	4638      	mov	r0, r7
 800760e:	f7fd ff31 	bl	8005474 <_malloc_r>
 8007612:	4605      	mov	r5, r0
 8007614:	2800      	cmp	r0, #0
 8007616:	d0f2      	beq.n	80075fe <_realloc_r+0x1c>
 8007618:	4631      	mov	r1, r6
 800761a:	4622      	mov	r2, r4
 800761c:	f7fd feae 	bl	800537c <memcpy>
 8007620:	4631      	mov	r1, r6
 8007622:	4638      	mov	r0, r7
 8007624:	f7fd feda 	bl	80053dc <_free_r>
 8007628:	e7e9      	b.n	80075fe <_realloc_r+0x1c>
 800762a:	4635      	mov	r5, r6
 800762c:	e7e7      	b.n	80075fe <_realloc_r+0x1c>

0800762e <__sfputc_r>:
 800762e:	6893      	ldr	r3, [r2, #8]
 8007630:	b410      	push	{r4}
 8007632:	3b01      	subs	r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	6093      	str	r3, [r2, #8]
 8007638:	da07      	bge.n	800764a <__sfputc_r+0x1c>
 800763a:	6994      	ldr	r4, [r2, #24]
 800763c:	42a3      	cmp	r3, r4
 800763e:	db01      	blt.n	8007644 <__sfputc_r+0x16>
 8007640:	290a      	cmp	r1, #10
 8007642:	d102      	bne.n	800764a <__sfputc_r+0x1c>
 8007644:	bc10      	pop	{r4}
 8007646:	f000 b949 	b.w	80078dc <__swbuf_r>
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	1c58      	adds	r0, r3, #1
 800764e:	6010      	str	r0, [r2, #0]
 8007650:	7019      	strb	r1, [r3, #0]
 8007652:	4608      	mov	r0, r1
 8007654:	bc10      	pop	{r4}
 8007656:	4770      	bx	lr

08007658 <__sfputs_r>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	4606      	mov	r6, r0
 800765c:	460f      	mov	r7, r1
 800765e:	4614      	mov	r4, r2
 8007660:	18d5      	adds	r5, r2, r3
 8007662:	42ac      	cmp	r4, r5
 8007664:	d101      	bne.n	800766a <__sfputs_r+0x12>
 8007666:	2000      	movs	r0, #0
 8007668:	e007      	b.n	800767a <__sfputs_r+0x22>
 800766a:	463a      	mov	r2, r7
 800766c:	4630      	mov	r0, r6
 800766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007672:	f7ff ffdc 	bl	800762e <__sfputc_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d1f3      	bne.n	8007662 <__sfputs_r+0xa>
 800767a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800767c <_vfiprintf_r>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	460d      	mov	r5, r1
 8007682:	4614      	mov	r4, r2
 8007684:	4698      	mov	r8, r3
 8007686:	4606      	mov	r6, r0
 8007688:	b09d      	sub	sp, #116	; 0x74
 800768a:	b118      	cbz	r0, 8007694 <_vfiprintf_r+0x18>
 800768c:	6983      	ldr	r3, [r0, #24]
 800768e:	b90b      	cbnz	r3, 8007694 <_vfiprintf_r+0x18>
 8007690:	f000 fb14 	bl	8007cbc <__sinit>
 8007694:	4b89      	ldr	r3, [pc, #548]	; (80078bc <_vfiprintf_r+0x240>)
 8007696:	429d      	cmp	r5, r3
 8007698:	d11b      	bne.n	80076d2 <_vfiprintf_r+0x56>
 800769a:	6875      	ldr	r5, [r6, #4]
 800769c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800769e:	07d9      	lsls	r1, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_vfiprintf_r+0x32>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	059a      	lsls	r2, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_vfiprintf_r+0x32>
 80076a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076aa:	f7ff ff86 	bl	80075ba <__retarget_lock_acquire_recursive>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	071b      	lsls	r3, r3, #28
 80076b2:	d501      	bpl.n	80076b8 <_vfiprintf_r+0x3c>
 80076b4:	692b      	ldr	r3, [r5, #16]
 80076b6:	b9eb      	cbnz	r3, 80076f4 <_vfiprintf_r+0x78>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 f96e 	bl	800799c <__swsetup_r>
 80076c0:	b1c0      	cbz	r0, 80076f4 <_vfiprintf_r+0x78>
 80076c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c4:	07dc      	lsls	r4, r3, #31
 80076c6:	d50e      	bpl.n	80076e6 <_vfiprintf_r+0x6a>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b01d      	add	sp, #116	; 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	4b7b      	ldr	r3, [pc, #492]	; (80078c0 <_vfiprintf_r+0x244>)
 80076d4:	429d      	cmp	r5, r3
 80076d6:	d101      	bne.n	80076dc <_vfiprintf_r+0x60>
 80076d8:	68b5      	ldr	r5, [r6, #8]
 80076da:	e7df      	b.n	800769c <_vfiprintf_r+0x20>
 80076dc:	4b79      	ldr	r3, [pc, #484]	; (80078c4 <_vfiprintf_r+0x248>)
 80076de:	429d      	cmp	r5, r3
 80076e0:	bf08      	it	eq
 80076e2:	68f5      	ldreq	r5, [r6, #12]
 80076e4:	e7da      	b.n	800769c <_vfiprintf_r+0x20>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	0598      	lsls	r0, r3, #22
 80076ea:	d4ed      	bmi.n	80076c8 <_vfiprintf_r+0x4c>
 80076ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ee:	f7ff ff65 	bl	80075bc <__retarget_lock_release_recursive>
 80076f2:	e7e9      	b.n	80076c8 <_vfiprintf_r+0x4c>
 80076f4:	2300      	movs	r3, #0
 80076f6:	9309      	str	r3, [sp, #36]	; 0x24
 80076f8:	2320      	movs	r3, #32
 80076fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076fe:	2330      	movs	r3, #48	; 0x30
 8007700:	f04f 0901 	mov.w	r9, #1
 8007704:	f8cd 800c 	str.w	r8, [sp, #12]
 8007708:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80078c8 <_vfiprintf_r+0x24c>
 800770c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007710:	4623      	mov	r3, r4
 8007712:	469a      	mov	sl, r3
 8007714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007718:	b10a      	cbz	r2, 800771e <_vfiprintf_r+0xa2>
 800771a:	2a25      	cmp	r2, #37	; 0x25
 800771c:	d1f9      	bne.n	8007712 <_vfiprintf_r+0x96>
 800771e:	ebba 0b04 	subs.w	fp, sl, r4
 8007722:	d00b      	beq.n	800773c <_vfiprintf_r+0xc0>
 8007724:	465b      	mov	r3, fp
 8007726:	4622      	mov	r2, r4
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ff94 	bl	8007658 <__sfputs_r>
 8007730:	3001      	adds	r0, #1
 8007732:	f000 80aa 	beq.w	800788a <_vfiprintf_r+0x20e>
 8007736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007738:	445a      	add	r2, fp
 800773a:	9209      	str	r2, [sp, #36]	; 0x24
 800773c:	f89a 3000 	ldrb.w	r3, [sl]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80a2 	beq.w	800788a <_vfiprintf_r+0x20e>
 8007746:	2300      	movs	r3, #0
 8007748:	f04f 32ff 	mov.w	r2, #4294967295
 800774c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007750:	f10a 0a01 	add.w	sl, sl, #1
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	9307      	str	r3, [sp, #28]
 8007758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800775c:	931a      	str	r3, [sp, #104]	; 0x68
 800775e:	4654      	mov	r4, sl
 8007760:	2205      	movs	r2, #5
 8007762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007766:	4858      	ldr	r0, [pc, #352]	; (80078c8 <_vfiprintf_r+0x24c>)
 8007768:	f7ff f9f0 	bl	8006b4c <memchr>
 800776c:	9a04      	ldr	r2, [sp, #16]
 800776e:	b9d8      	cbnz	r0, 80077a8 <_vfiprintf_r+0x12c>
 8007770:	06d1      	lsls	r1, r2, #27
 8007772:	bf44      	itt	mi
 8007774:	2320      	movmi	r3, #32
 8007776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800777a:	0713      	lsls	r3, r2, #28
 800777c:	bf44      	itt	mi
 800777e:	232b      	movmi	r3, #43	; 0x2b
 8007780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007784:	f89a 3000 	ldrb.w	r3, [sl]
 8007788:	2b2a      	cmp	r3, #42	; 0x2a
 800778a:	d015      	beq.n	80077b8 <_vfiprintf_r+0x13c>
 800778c:	4654      	mov	r4, sl
 800778e:	2000      	movs	r0, #0
 8007790:	f04f 0c0a 	mov.w	ip, #10
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	4621      	mov	r1, r4
 8007798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800779c:	3b30      	subs	r3, #48	; 0x30
 800779e:	2b09      	cmp	r3, #9
 80077a0:	d94e      	bls.n	8007840 <_vfiprintf_r+0x1c4>
 80077a2:	b1b0      	cbz	r0, 80077d2 <_vfiprintf_r+0x156>
 80077a4:	9207      	str	r2, [sp, #28]
 80077a6:	e014      	b.n	80077d2 <_vfiprintf_r+0x156>
 80077a8:	eba0 0308 	sub.w	r3, r0, r8
 80077ac:	fa09 f303 	lsl.w	r3, r9, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	46a2      	mov	sl, r4
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	e7d2      	b.n	800775e <_vfiprintf_r+0xe2>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	1d19      	adds	r1, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	9103      	str	r1, [sp, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bfbb      	ittet	lt
 80077c4:	425b      	neglt	r3, r3
 80077c6:	f042 0202 	orrlt.w	r2, r2, #2
 80077ca:	9307      	strge	r3, [sp, #28]
 80077cc:	9307      	strlt	r3, [sp, #28]
 80077ce:	bfb8      	it	lt
 80077d0:	9204      	strlt	r2, [sp, #16]
 80077d2:	7823      	ldrb	r3, [r4, #0]
 80077d4:	2b2e      	cmp	r3, #46	; 0x2e
 80077d6:	d10c      	bne.n	80077f2 <_vfiprintf_r+0x176>
 80077d8:	7863      	ldrb	r3, [r4, #1]
 80077da:	2b2a      	cmp	r3, #42	; 0x2a
 80077dc:	d135      	bne.n	800784a <_vfiprintf_r+0x1ce>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	3402      	adds	r4, #2
 80077e2:	1d1a      	adds	r2, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9203      	str	r2, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfb8      	it	lt
 80077ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80077f0:	9305      	str	r3, [sp, #20]
 80077f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078d8 <_vfiprintf_r+0x25c>
 80077f6:	2203      	movs	r2, #3
 80077f8:	4650      	mov	r0, sl
 80077fa:	7821      	ldrb	r1, [r4, #0]
 80077fc:	f7ff f9a6 	bl	8006b4c <memchr>
 8007800:	b140      	cbz	r0, 8007814 <_vfiprintf_r+0x198>
 8007802:	2340      	movs	r3, #64	; 0x40
 8007804:	eba0 000a 	sub.w	r0, r0, sl
 8007808:	fa03 f000 	lsl.w	r0, r3, r0
 800780c:	9b04      	ldr	r3, [sp, #16]
 800780e:	3401      	adds	r4, #1
 8007810:	4303      	orrs	r3, r0
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007818:	2206      	movs	r2, #6
 800781a:	482c      	ldr	r0, [pc, #176]	; (80078cc <_vfiprintf_r+0x250>)
 800781c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007820:	f7ff f994 	bl	8006b4c <memchr>
 8007824:	2800      	cmp	r0, #0
 8007826:	d03f      	beq.n	80078a8 <_vfiprintf_r+0x22c>
 8007828:	4b29      	ldr	r3, [pc, #164]	; (80078d0 <_vfiprintf_r+0x254>)
 800782a:	bb1b      	cbnz	r3, 8007874 <_vfiprintf_r+0x1f8>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	3307      	adds	r3, #7
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	3308      	adds	r3, #8
 8007836:	9303      	str	r3, [sp, #12]
 8007838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783a:	443b      	add	r3, r7
 800783c:	9309      	str	r3, [sp, #36]	; 0x24
 800783e:	e767      	b.n	8007710 <_vfiprintf_r+0x94>
 8007840:	460c      	mov	r4, r1
 8007842:	2001      	movs	r0, #1
 8007844:	fb0c 3202 	mla	r2, ip, r2, r3
 8007848:	e7a5      	b.n	8007796 <_vfiprintf_r+0x11a>
 800784a:	2300      	movs	r3, #0
 800784c:	f04f 0c0a 	mov.w	ip, #10
 8007850:	4619      	mov	r1, r3
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4620      	mov	r0, r4
 8007858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800785c:	3a30      	subs	r2, #48	; 0x30
 800785e:	2a09      	cmp	r2, #9
 8007860:	d903      	bls.n	800786a <_vfiprintf_r+0x1ee>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0c5      	beq.n	80077f2 <_vfiprintf_r+0x176>
 8007866:	9105      	str	r1, [sp, #20]
 8007868:	e7c3      	b.n	80077f2 <_vfiprintf_r+0x176>
 800786a:	4604      	mov	r4, r0
 800786c:	2301      	movs	r3, #1
 800786e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007872:	e7f0      	b.n	8007856 <_vfiprintf_r+0x1da>
 8007874:	ab03      	add	r3, sp, #12
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462a      	mov	r2, r5
 800787a:	4630      	mov	r0, r6
 800787c:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <_vfiprintf_r+0x258>)
 800787e:	a904      	add	r1, sp, #16
 8007880:	f7fd fef0 	bl	8005664 <_printf_float>
 8007884:	4607      	mov	r7, r0
 8007886:	1c78      	adds	r0, r7, #1
 8007888:	d1d6      	bne.n	8007838 <_vfiprintf_r+0x1bc>
 800788a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800788c:	07d9      	lsls	r1, r3, #31
 800788e:	d405      	bmi.n	800789c <_vfiprintf_r+0x220>
 8007890:	89ab      	ldrh	r3, [r5, #12]
 8007892:	059a      	lsls	r2, r3, #22
 8007894:	d402      	bmi.n	800789c <_vfiprintf_r+0x220>
 8007896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007898:	f7ff fe90 	bl	80075bc <__retarget_lock_release_recursive>
 800789c:	89ab      	ldrh	r3, [r5, #12]
 800789e:	065b      	lsls	r3, r3, #25
 80078a0:	f53f af12 	bmi.w	80076c8 <_vfiprintf_r+0x4c>
 80078a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078a6:	e711      	b.n	80076cc <_vfiprintf_r+0x50>
 80078a8:	ab03      	add	r3, sp, #12
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	462a      	mov	r2, r5
 80078ae:	4630      	mov	r0, r6
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <_vfiprintf_r+0x258>)
 80078b2:	a904      	add	r1, sp, #16
 80078b4:	f7fe f972 	bl	8005b9c <_printf_i>
 80078b8:	e7e4      	b.n	8007884 <_vfiprintf_r+0x208>
 80078ba:	bf00      	nop
 80078bc:	08008794 	.word	0x08008794
 80078c0:	080087b4 	.word	0x080087b4
 80078c4:	08008774 	.word	0x08008774
 80078c8:	0800861c 	.word	0x0800861c
 80078cc:	08008626 	.word	0x08008626
 80078d0:	08005665 	.word	0x08005665
 80078d4:	08007659 	.word	0x08007659
 80078d8:	08008622 	.word	0x08008622

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6983      	ldr	r3, [r0, #24]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f000 f9e7 	bl	8007cbc <__sinit>
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <__swbuf_r+0x98>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	d12b      	bne.n	800794c <__swbuf_r+0x70>
 80078f4:	686c      	ldr	r4, [r5, #4]
 80078f6:	69a3      	ldr	r3, [r4, #24]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	071a      	lsls	r2, r3, #28
 80078fe:	d52f      	bpl.n	8007960 <__swbuf_r+0x84>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	b36b      	cbz	r3, 8007960 <__swbuf_r+0x84>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	b2f6      	uxtb	r6, r6
 800790a:	1ac0      	subs	r0, r0, r3
 800790c:	6963      	ldr	r3, [r4, #20]
 800790e:	4637      	mov	r7, r6
 8007910:	4283      	cmp	r3, r0
 8007912:	dc04      	bgt.n	800791e <__swbuf_r+0x42>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f93c 	bl	8007b94 <_fflush_r>
 800791c:	bb30      	cbnz	r0, 800796c <__swbuf_r+0x90>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	3001      	adds	r0, #1
 8007922:	3b01      	subs	r3, #1
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	701e      	strb	r6, [r3, #0]
 800792e:	6963      	ldr	r3, [r4, #20]
 8007930:	4283      	cmp	r3, r0
 8007932:	d004      	beq.n	800793e <__swbuf_r+0x62>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	07db      	lsls	r3, r3, #31
 8007938:	d506      	bpl.n	8007948 <__swbuf_r+0x6c>
 800793a:	2e0a      	cmp	r6, #10
 800793c:	d104      	bne.n	8007948 <__swbuf_r+0x6c>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f927 	bl	8007b94 <_fflush_r>
 8007946:	b988      	cbnz	r0, 800796c <__swbuf_r+0x90>
 8007948:	4638      	mov	r0, r7
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <__swbuf_r+0x9c>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d101      	bne.n	8007956 <__swbuf_r+0x7a>
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	e7cf      	b.n	80078f6 <__swbuf_r+0x1a>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__swbuf_r+0xa0>)
 8007958:	429c      	cmp	r4, r3
 800795a:	bf08      	it	eq
 800795c:	68ec      	ldreq	r4, [r5, #12]
 800795e:	e7ca      	b.n	80078f6 <__swbuf_r+0x1a>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f81a 	bl	800799c <__swsetup_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0cb      	beq.n	8007904 <__swbuf_r+0x28>
 800796c:	f04f 37ff 	mov.w	r7, #4294967295
 8007970:	e7ea      	b.n	8007948 <__swbuf_r+0x6c>
 8007972:	bf00      	nop
 8007974:	08008794 	.word	0x08008794
 8007978:	080087b4 	.word	0x080087b4
 800797c:	08008774 	.word	0x08008774

08007980 <__ascii_wctomb>:
 8007980:	4603      	mov	r3, r0
 8007982:	4608      	mov	r0, r1
 8007984:	b141      	cbz	r1, 8007998 <__ascii_wctomb+0x18>
 8007986:	2aff      	cmp	r2, #255	; 0xff
 8007988:	d904      	bls.n	8007994 <__ascii_wctomb+0x14>
 800798a:	228a      	movs	r2, #138	; 0x8a
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	4770      	bx	lr
 8007994:	2001      	movs	r0, #1
 8007996:	700a      	strb	r2, [r1, #0]
 8007998:	4770      	bx	lr
	...

0800799c <__swsetup_r>:
 800799c:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <__swsetup_r+0xcc>)
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	4606      	mov	r6, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	b125      	cbz	r5, 80079b2 <__swsetup_r+0x16>
 80079a8:	69ab      	ldr	r3, [r5, #24]
 80079aa:	b913      	cbnz	r3, 80079b2 <__swsetup_r+0x16>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f985 	bl	8007cbc <__sinit>
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <__swsetup_r+0xd0>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d10f      	bne.n	80079d8 <__swsetup_r+0x3c>
 80079b8:	686c      	ldr	r4, [r5, #4]
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079c0:	0719      	lsls	r1, r3, #28
 80079c2:	d42c      	bmi.n	8007a1e <__swsetup_r+0x82>
 80079c4:	06dd      	lsls	r5, r3, #27
 80079c6:	d411      	bmi.n	80079ec <__swsetup_r+0x50>
 80079c8:	2309      	movs	r3, #9
 80079ca:	6033      	str	r3, [r6, #0]
 80079cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	e03e      	b.n	8007a56 <__swsetup_r+0xba>
 80079d8:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <__swsetup_r+0xd4>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <__swsetup_r+0x46>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7eb      	b.n	80079ba <__swsetup_r+0x1e>
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <__swsetup_r+0xd8>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7e6      	b.n	80079ba <__swsetup_r+0x1e>
 80079ec:	0758      	lsls	r0, r3, #29
 80079ee:	d512      	bpl.n	8007a16 <__swsetup_r+0x7a>
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	b141      	cbz	r1, 8007a06 <__swsetup_r+0x6a>
 80079f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d002      	beq.n	8007a02 <__swsetup_r+0x66>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7fd fced 	bl	80053dc <_free_r>
 8007a02:	2300      	movs	r3, #0
 8007a04:	6363      	str	r3, [r4, #52]	; 0x34
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	b94b      	cbnz	r3, 8007a36 <__swsetup_r+0x9a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d003      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 fa05 	bl	8007e40 <__smakebuf_r>
 8007a36:	89a0      	ldrh	r0, [r4, #12]
 8007a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a3c:	f010 0301 	ands.w	r3, r0, #1
 8007a40:	d00a      	beq.n	8007a58 <__swsetup_r+0xbc>
 8007a42:	2300      	movs	r3, #0
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6963      	ldr	r3, [r4, #20]
 8007a48:	425b      	negs	r3, r3
 8007a4a:	61a3      	str	r3, [r4, #24]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	b943      	cbnz	r3, 8007a62 <__swsetup_r+0xc6>
 8007a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a54:	d1ba      	bne.n	80079cc <__swsetup_r+0x30>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	0781      	lsls	r1, r0, #30
 8007a5a:	bf58      	it	pl
 8007a5c:	6963      	ldrpl	r3, [r4, #20]
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	e7f4      	b.n	8007a4c <__swsetup_r+0xb0>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7f7      	b.n	8007a56 <__swsetup_r+0xba>
 8007a66:	bf00      	nop
 8007a68:	200000c8 	.word	0x200000c8
 8007a6c:	08008794 	.word	0x08008794
 8007a70:	080087b4 	.word	0x080087b4
 8007a74:	08008774 	.word	0x08008774

08007a78 <abort>:
 8007a78:	2006      	movs	r0, #6
 8007a7a:	b508      	push	{r3, lr}
 8007a7c:	f000 fa50 	bl	8007f20 <raise>
 8007a80:	2001      	movs	r0, #1
 8007a82:	f7fa fec4 	bl	800280e <_exit>
	...

08007a88 <__sflush_r>:
 8007a88:	898a      	ldrh	r2, [r1, #12]
 8007a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	4605      	mov	r5, r0
 8007a90:	0710      	lsls	r0, r2, #28
 8007a92:	460c      	mov	r4, r1
 8007a94:	d458      	bmi.n	8007b48 <__sflush_r+0xc0>
 8007a96:	684b      	ldr	r3, [r1, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc05      	bgt.n	8007aa8 <__sflush_r+0x20>
 8007a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dc02      	bgt.n	8007aa8 <__sflush_r+0x20>
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	d0f9      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ab4:	682f      	ldr	r7, [r5, #0]
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	d032      	beq.n	8007b20 <__sflush_r+0x98>
 8007aba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	075a      	lsls	r2, r3, #29
 8007ac0:	d505      	bpl.n	8007ace <__sflush_r+0x46>
 8007ac2:	6863      	ldr	r3, [r4, #4]
 8007ac4:	1ac0      	subs	r0, r0, r3
 8007ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac8:	b10b      	cbz	r3, 8007ace <__sflush_r+0x46>
 8007aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007acc:	1ac0      	subs	r0, r0, r3
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	6a21      	ldr	r1, [r4, #32]
 8007ad8:	47b0      	blx	r6
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	d106      	bne.n	8007aee <__sflush_r+0x66>
 8007ae0:	6829      	ldr	r1, [r5, #0]
 8007ae2:	291d      	cmp	r1, #29
 8007ae4:	d82c      	bhi.n	8007b40 <__sflush_r+0xb8>
 8007ae6:	4a2a      	ldr	r2, [pc, #168]	; (8007b90 <__sflush_r+0x108>)
 8007ae8:	40ca      	lsrs	r2, r1
 8007aea:	07d6      	lsls	r6, r2, #31
 8007aec:	d528      	bpl.n	8007b40 <__sflush_r+0xb8>
 8007aee:	2200      	movs	r2, #0
 8007af0:	6062      	str	r2, [r4, #4]
 8007af2:	6922      	ldr	r2, [r4, #16]
 8007af4:	04d9      	lsls	r1, r3, #19
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	d504      	bpl.n	8007b04 <__sflush_r+0x7c>
 8007afa:	1c42      	adds	r2, r0, #1
 8007afc:	d101      	bne.n	8007b02 <__sflush_r+0x7a>
 8007afe:	682b      	ldr	r3, [r5, #0]
 8007b00:	b903      	cbnz	r3, 8007b04 <__sflush_r+0x7c>
 8007b02:	6560      	str	r0, [r4, #84]	; 0x54
 8007b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b06:	602f      	str	r7, [r5, #0]
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	d0ca      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b10:	4299      	cmp	r1, r3
 8007b12:	d002      	beq.n	8007b1a <__sflush_r+0x92>
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7fd fc61 	bl	80053dc <_free_r>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8007b1e:	e7c1      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b20:	6a21      	ldr	r1, [r4, #32]
 8007b22:	2301      	movs	r3, #1
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b0      	blx	r6
 8007b28:	1c41      	adds	r1, r0, #1
 8007b2a:	d1c7      	bne.n	8007abc <__sflush_r+0x34>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0c4      	beq.n	8007abc <__sflush_r+0x34>
 8007b32:	2b1d      	cmp	r3, #29
 8007b34:	d001      	beq.n	8007b3a <__sflush_r+0xb2>
 8007b36:	2b16      	cmp	r3, #22
 8007b38:	d101      	bne.n	8007b3e <__sflush_r+0xb6>
 8007b3a:	602f      	str	r7, [r5, #0]
 8007b3c:	e7b1      	b.n	8007aa2 <__sflush_r+0x1a>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	e7ad      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b48:	690f      	ldr	r7, [r1, #16]
 8007b4a:	2f00      	cmp	r7, #0
 8007b4c:	d0a9      	beq.n	8007aa2 <__sflush_r+0x1a>
 8007b4e:	0793      	lsls	r3, r2, #30
 8007b50:	bf18      	it	ne
 8007b52:	2300      	movne	r3, #0
 8007b54:	680e      	ldr	r6, [r1, #0]
 8007b56:	bf08      	it	eq
 8007b58:	694b      	ldreq	r3, [r1, #20]
 8007b5a:	eba6 0807 	sub.w	r8, r6, r7
 8007b5e:	600f      	str	r7, [r1, #0]
 8007b60:	608b      	str	r3, [r1, #8]
 8007b62:	f1b8 0f00 	cmp.w	r8, #0
 8007b66:	dd9c      	ble.n	8007aa2 <__sflush_r+0x1a>
 8007b68:	4643      	mov	r3, r8
 8007b6a:	463a      	mov	r2, r7
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	6a21      	ldr	r1, [r4, #32]
 8007b70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b72:	47b0      	blx	r6
 8007b74:	2800      	cmp	r0, #0
 8007b76:	dc06      	bgt.n	8007b86 <__sflush_r+0xfe>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	e78e      	b.n	8007aa4 <__sflush_r+0x1c>
 8007b86:	4407      	add	r7, r0
 8007b88:	eba8 0800 	sub.w	r8, r8, r0
 8007b8c:	e7e9      	b.n	8007b62 <__sflush_r+0xda>
 8007b8e:	bf00      	nop
 8007b90:	20400001 	.word	0x20400001

08007b94 <_fflush_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b913      	cbnz	r3, 8007ba4 <_fflush_r+0x10>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	b118      	cbz	r0, 8007bae <_fflush_r+0x1a>
 8007ba6:	6983      	ldr	r3, [r0, #24]
 8007ba8:	b90b      	cbnz	r3, 8007bae <_fflush_r+0x1a>
 8007baa:	f000 f887 	bl	8007cbc <__sinit>
 8007bae:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <_fflush_r+0x6c>)
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	d11b      	bne.n	8007bec <_fflush_r+0x58>
 8007bb4:	686c      	ldr	r4, [r5, #4]
 8007bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0ef      	beq.n	8007b9e <_fflush_r+0xa>
 8007bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bc0:	07d0      	lsls	r0, r2, #31
 8007bc2:	d404      	bmi.n	8007bce <_fflush_r+0x3a>
 8007bc4:	0599      	lsls	r1, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_fflush_r+0x3a>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f7ff fcf6 	bl	80075ba <__retarget_lock_acquire_recursive>
 8007bce:	4628      	mov	r0, r5
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f7ff ff59 	bl	8007a88 <__sflush_r>
 8007bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd8:	4605      	mov	r5, r0
 8007bda:	07da      	lsls	r2, r3, #31
 8007bdc:	d4e0      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	059b      	lsls	r3, r3, #22
 8007be2:	d4dd      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be6:	f7ff fce9 	bl	80075bc <__retarget_lock_release_recursive>
 8007bea:	e7d9      	b.n	8007ba0 <_fflush_r+0xc>
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <_fflush_r+0x70>)
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d101      	bne.n	8007bf6 <_fflush_r+0x62>
 8007bf2:	68ac      	ldr	r4, [r5, #8]
 8007bf4:	e7df      	b.n	8007bb6 <_fflush_r+0x22>
 8007bf6:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <_fflush_r+0x74>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	bf08      	it	eq
 8007bfc:	68ec      	ldreq	r4, [r5, #12]
 8007bfe:	e7da      	b.n	8007bb6 <_fflush_r+0x22>
 8007c00:	08008794 	.word	0x08008794
 8007c04:	080087b4 	.word	0x080087b4
 8007c08:	08008774 	.word	0x08008774

08007c0c <std>:
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	4604      	mov	r4, r0
 8007c12:	e9c0 3300 	strd	r3, r3, [r0]
 8007c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c1a:	6083      	str	r3, [r0, #8]
 8007c1c:	8181      	strh	r1, [r0, #12]
 8007c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c20:	81c2      	strh	r2, [r0, #14]
 8007c22:	6183      	str	r3, [r0, #24]
 8007c24:	4619      	mov	r1, r3
 8007c26:	2208      	movs	r2, #8
 8007c28:	305c      	adds	r0, #92	; 0x5c
 8007c2a:	f7fd fbcf 	bl	80053cc <memset>
 8007c2e:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <std+0x38>)
 8007c30:	6224      	str	r4, [r4, #32]
 8007c32:	6263      	str	r3, [r4, #36]	; 0x24
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <std+0x3c>)
 8007c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c38:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <std+0x40>)
 8007c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c3c:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <std+0x44>)
 8007c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	bf00      	nop
 8007c44:	08007f59 	.word	0x08007f59
 8007c48:	08007f7b 	.word	0x08007f7b
 8007c4c:	08007fb3 	.word	0x08007fb3
 8007c50:	08007fd7 	.word	0x08007fd7

08007c54 <_cleanup_r>:
 8007c54:	4901      	ldr	r1, [pc, #4]	; (8007c5c <_cleanup_r+0x8>)
 8007c56:	f000 b8af 	b.w	8007db8 <_fwalk_reent>
 8007c5a:	bf00      	nop
 8007c5c:	08007b95 	.word	0x08007b95

08007c60 <__sfmoreglue>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	2568      	movs	r5, #104	; 0x68
 8007c64:	1e4a      	subs	r2, r1, #1
 8007c66:	4355      	muls	r5, r2
 8007c68:	460e      	mov	r6, r1
 8007c6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c6e:	f7fd fc01 	bl	8005474 <_malloc_r>
 8007c72:	4604      	mov	r4, r0
 8007c74:	b140      	cbz	r0, 8007c88 <__sfmoreglue+0x28>
 8007c76:	2100      	movs	r1, #0
 8007c78:	e9c0 1600 	strd	r1, r6, [r0]
 8007c7c:	300c      	adds	r0, #12
 8007c7e:	60a0      	str	r0, [r4, #8]
 8007c80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c84:	f7fd fba2 	bl	80053cc <memset>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <__sfp_lock_acquire>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	; (8007c94 <__sfp_lock_acquire+0x8>)
 8007c8e:	f7ff bc94 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8007c92:	bf00      	nop
 8007c94:	20000724 	.word	0x20000724

08007c98 <__sfp_lock_release>:
 8007c98:	4801      	ldr	r0, [pc, #4]	; (8007ca0 <__sfp_lock_release+0x8>)
 8007c9a:	f7ff bc8f 	b.w	80075bc <__retarget_lock_release_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	20000724 	.word	0x20000724

08007ca4 <__sinit_lock_acquire>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__sinit_lock_acquire+0x8>)
 8007ca6:	f7ff bc88 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8007caa:	bf00      	nop
 8007cac:	2000071f 	.word	0x2000071f

08007cb0 <__sinit_lock_release>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__sinit_lock_release+0x8>)
 8007cb2:	f7ff bc83 	b.w	80075bc <__retarget_lock_release_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	2000071f 	.word	0x2000071f

08007cbc <__sinit>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	f7ff fff0 	bl	8007ca4 <__sinit_lock_acquire>
 8007cc4:	69a3      	ldr	r3, [r4, #24]
 8007cc6:	b11b      	cbz	r3, 8007cd0 <__sinit+0x14>
 8007cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ccc:	f7ff bff0 	b.w	8007cb0 <__sinit_lock_release>
 8007cd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cd4:	6523      	str	r3, [r4, #80]	; 0x50
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <__sinit+0x68>)
 8007cd8:	4a13      	ldr	r2, [pc, #76]	; (8007d28 <__sinit+0x6c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	bf08      	it	eq
 8007ce2:	2301      	moveq	r3, #1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	bf08      	it	eq
 8007ce8:	61a3      	streq	r3, [r4, #24]
 8007cea:	f000 f81f 	bl	8007d2c <__sfp>
 8007cee:	6060      	str	r0, [r4, #4]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 f81b 	bl	8007d2c <__sfp>
 8007cf6:	60a0      	str	r0, [r4, #8]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 f817 	bl	8007d2c <__sfp>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2104      	movs	r1, #4
 8007d02:	60e0      	str	r0, [r4, #12]
 8007d04:	6860      	ldr	r0, [r4, #4]
 8007d06:	f7ff ff81 	bl	8007c0c <std>
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	2109      	movs	r1, #9
 8007d0e:	68a0      	ldr	r0, [r4, #8]
 8007d10:	f7ff ff7c 	bl	8007c0c <std>
 8007d14:	2202      	movs	r2, #2
 8007d16:	2112      	movs	r1, #18
 8007d18:	68e0      	ldr	r0, [r4, #12]
 8007d1a:	f7ff ff77 	bl	8007c0c <std>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	61a3      	str	r3, [r4, #24]
 8007d22:	e7d1      	b.n	8007cc8 <__sinit+0xc>
 8007d24:	080083f4 	.word	0x080083f4
 8007d28:	08007c55 	.word	0x08007c55

08007d2c <__sfp>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	4607      	mov	r7, r0
 8007d30:	f7ff ffac 	bl	8007c8c <__sfp_lock_acquire>
 8007d34:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <__sfp+0x84>)
 8007d36:	681e      	ldr	r6, [r3, #0]
 8007d38:	69b3      	ldr	r3, [r6, #24]
 8007d3a:	b913      	cbnz	r3, 8007d42 <__sfp+0x16>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff ffbd 	bl	8007cbc <__sinit>
 8007d42:	3648      	adds	r6, #72	; 0x48
 8007d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	d503      	bpl.n	8007d54 <__sfp+0x28>
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	b30b      	cbz	r3, 8007d94 <__sfp+0x68>
 8007d50:	6836      	ldr	r6, [r6, #0]
 8007d52:	e7f7      	b.n	8007d44 <__sfp+0x18>
 8007d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d58:	b9d5      	cbnz	r5, 8007d90 <__sfp+0x64>
 8007d5a:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <__sfp+0x88>)
 8007d5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d60:	60e3      	str	r3, [r4, #12]
 8007d62:	6665      	str	r5, [r4, #100]	; 0x64
 8007d64:	f7ff fc28 	bl	80075b8 <__retarget_lock_init_recursive>
 8007d68:	f7ff ff96 	bl	8007c98 <__sfp_lock_release>
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	4629      	mov	r1, r5
 8007d70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d78:	6025      	str	r5, [r4, #0]
 8007d7a:	61a5      	str	r5, [r4, #24]
 8007d7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d80:	f7fd fb24 	bl	80053cc <memset>
 8007d84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d90:	3468      	adds	r4, #104	; 0x68
 8007d92:	e7d9      	b.n	8007d48 <__sfp+0x1c>
 8007d94:	2104      	movs	r1, #4
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7ff ff62 	bl	8007c60 <__sfmoreglue>
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	6030      	str	r0, [r6, #0]
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d1d5      	bne.n	8007d50 <__sfp+0x24>
 8007da4:	f7ff ff78 	bl	8007c98 <__sfp_lock_release>
 8007da8:	230c      	movs	r3, #12
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	e7ee      	b.n	8007d8c <__sfp+0x60>
 8007dae:	bf00      	nop
 8007db0:	080083f4 	.word	0x080083f4
 8007db4:	ffff0001 	.word	0xffff0001

08007db8 <_fwalk_reent>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	4688      	mov	r8, r1
 8007dc0:	2700      	movs	r7, #0
 8007dc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dca:	f1b9 0901 	subs.w	r9, r9, #1
 8007dce:	d505      	bpl.n	8007ddc <_fwalk_reent+0x24>
 8007dd0:	6824      	ldr	r4, [r4, #0]
 8007dd2:	2c00      	cmp	r4, #0
 8007dd4:	d1f7      	bne.n	8007dc6 <_fwalk_reent+0xe>
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ddc:	89ab      	ldrh	r3, [r5, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d907      	bls.n	8007df2 <_fwalk_reent+0x3a>
 8007de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007de6:	3301      	adds	r3, #1
 8007de8:	d003      	beq.n	8007df2 <_fwalk_reent+0x3a>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4630      	mov	r0, r6
 8007dee:	47c0      	blx	r8
 8007df0:	4307      	orrs	r7, r0
 8007df2:	3568      	adds	r5, #104	; 0x68
 8007df4:	e7e9      	b.n	8007dca <_fwalk_reent+0x12>

08007df6 <__swhatbuf_r>:
 8007df6:	b570      	push	{r4, r5, r6, lr}
 8007df8:	460e      	mov	r6, r1
 8007dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfe:	4614      	mov	r4, r2
 8007e00:	2900      	cmp	r1, #0
 8007e02:	461d      	mov	r5, r3
 8007e04:	b096      	sub	sp, #88	; 0x58
 8007e06:	da07      	bge.n	8007e18 <__swhatbuf_r+0x22>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	89b3      	ldrh	r3, [r6, #12]
 8007e0e:	061a      	lsls	r2, r3, #24
 8007e10:	d410      	bmi.n	8007e34 <__swhatbuf_r+0x3e>
 8007e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e16:	e00e      	b.n	8007e36 <__swhatbuf_r+0x40>
 8007e18:	466a      	mov	r2, sp
 8007e1a:	f000 f903 	bl	8008024 <_fstat_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	dbf2      	blt.n	8007e08 <__swhatbuf_r+0x12>
 8007e22:	9a01      	ldr	r2, [sp, #4]
 8007e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e2c:	425a      	negs	r2, r3
 8007e2e:	415a      	adcs	r2, r3
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	e7ee      	b.n	8007e12 <__swhatbuf_r+0x1c>
 8007e34:	2340      	movs	r3, #64	; 0x40
 8007e36:	2000      	movs	r0, #0
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	b016      	add	sp, #88	; 0x58
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e40 <__smakebuf_r>:
 8007e40:	898b      	ldrh	r3, [r1, #12]
 8007e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e44:	079d      	lsls	r5, r3, #30
 8007e46:	4606      	mov	r6, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	d507      	bpl.n	8007e5c <__smakebuf_r+0x1c>
 8007e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	2301      	movs	r3, #1
 8007e56:	6163      	str	r3, [r4, #20]
 8007e58:	b002      	add	sp, #8
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	466a      	mov	r2, sp
 8007e5e:	ab01      	add	r3, sp, #4
 8007e60:	f7ff ffc9 	bl	8007df6 <__swhatbuf_r>
 8007e64:	9900      	ldr	r1, [sp, #0]
 8007e66:	4605      	mov	r5, r0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f7fd fb03 	bl	8005474 <_malloc_r>
 8007e6e:	b948      	cbnz	r0, 8007e84 <__smakebuf_r+0x44>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	059a      	lsls	r2, r3, #22
 8007e76:	d4ef      	bmi.n	8007e58 <__smakebuf_r+0x18>
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	f043 0302 	orr.w	r3, r3, #2
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	e7e3      	b.n	8007e4c <__smakebuf_r+0xc>
 8007e84:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <__smakebuf_r+0x7c>)
 8007e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	6120      	str	r0, [r4, #16]
 8007e96:	6163      	str	r3, [r4, #20]
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	b15b      	cbz	r3, 8007eb4 <__smakebuf_r+0x74>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea2:	f000 f8d1 	bl	8008048 <_isatty_r>
 8007ea6:	b128      	cbz	r0, 8007eb4 <__smakebuf_r+0x74>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	89a0      	ldrh	r0, [r4, #12]
 8007eb6:	4305      	orrs	r5, r0
 8007eb8:	81a5      	strh	r5, [r4, #12]
 8007eba:	e7cd      	b.n	8007e58 <__smakebuf_r+0x18>
 8007ebc:	08007c55 	.word	0x08007c55

08007ec0 <_malloc_usable_size_r>:
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f18      	subs	r0, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbc      	itt	lt
 8007eca:	580b      	ldrlt	r3, [r1, r0]
 8007ecc:	18c0      	addlt	r0, r0, r3
 8007ece:	4770      	bx	lr

08007ed0 <_raise_r>:
 8007ed0:	291f      	cmp	r1, #31
 8007ed2:	b538      	push	{r3, r4, r5, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	d904      	bls.n	8007ee4 <_raise_r+0x14>
 8007eda:	2316      	movs	r3, #22
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ee6:	b112      	cbz	r2, 8007eee <_raise_r+0x1e>
 8007ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eec:	b94b      	cbnz	r3, 8007f02 <_raise_r+0x32>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f830 	bl	8007f54 <_getpid_r>
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007efe:	f000 b817 	b.w	8007f30 <_kill_r>
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d00a      	beq.n	8007f1c <_raise_r+0x4c>
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	d103      	bne.n	8007f12 <_raise_r+0x42>
 8007f0a:	2316      	movs	r3, #22
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7e7      	b.n	8007ee2 <_raise_r+0x12>
 8007f12:	2400      	movs	r4, #0
 8007f14:	4628      	mov	r0, r5
 8007f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f1a:	4798      	blx	r3
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e7e0      	b.n	8007ee2 <_raise_r+0x12>

08007f20 <raise>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <raise+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f7ff bfd3 	b.w	8007ed0 <_raise_r>
 8007f2a:	bf00      	nop
 8007f2c:	200000c8 	.word	0x200000c8

08007f30 <_kill_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	2300      	movs	r3, #0
 8007f34:	4d06      	ldr	r5, [pc, #24]	; (8007f50 <_kill_r+0x20>)
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f7fa fc56 	bl	80027ee <_kill>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d102      	bne.n	8007f4c <_kill_r+0x1c>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	b103      	cbz	r3, 8007f4c <_kill_r+0x1c>
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000718 	.word	0x20000718

08007f54 <_getpid_r>:
 8007f54:	f7fa bc44 	b.w	80027e0 <_getpid>

08007f58 <__sread>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f60:	f000 f894 	bl	800808c <_read_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	bfab      	itete	ge
 8007f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f6c:	181b      	addge	r3, r3, r0
 8007f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f72:	bfac      	ite	ge
 8007f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f76:	81a3      	strhlt	r3, [r4, #12]
 8007f78:	bd10      	pop	{r4, pc}

08007f7a <__swrite>:
 8007f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7e:	461f      	mov	r7, r3
 8007f80:	898b      	ldrh	r3, [r1, #12]
 8007f82:	4605      	mov	r5, r0
 8007f84:	05db      	lsls	r3, r3, #23
 8007f86:	460c      	mov	r4, r1
 8007f88:	4616      	mov	r6, r2
 8007f8a:	d505      	bpl.n	8007f98 <__swrite+0x1e>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f94:	f000 f868 	bl	8008068 <_lseek_r>
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa0:	81a3      	strh	r3, [r4, #12]
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	f000 b817 	b.w	8007fe0 <_write_r>

08007fb2 <__sseek>:
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fba:	f000 f855 	bl	8008068 <_lseek_r>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	bf15      	itete	ne
 8007fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fce:	81a3      	strheq	r3, [r4, #12]
 8007fd0:	bf18      	it	ne
 8007fd2:	81a3      	strhne	r3, [r4, #12]
 8007fd4:	bd10      	pop	{r4, pc}

08007fd6 <__sclose>:
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 b813 	b.w	8008004 <_close_r>
	...

08007fe0 <_write_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4d05      	ldr	r5, [pc, #20]	; (8008000 <_write_r+0x20>)
 8007fec:	602a      	str	r2, [r5, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f7fa fc34 	bl	800285c <_write>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_write_r+0x1e>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_write_r+0x1e>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	20000718 	.word	0x20000718

08008004 <_close_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	2300      	movs	r3, #0
 8008008:	4d05      	ldr	r5, [pc, #20]	; (8008020 <_close_r+0x1c>)
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	602b      	str	r3, [r5, #0]
 8008010:	f7fa fc40 	bl	8002894 <_close>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_close_r+0x1a>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_close_r+0x1a>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	20000718 	.word	0x20000718

08008024 <_fstat_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	2300      	movs	r3, #0
 8008028:	4d06      	ldr	r5, [pc, #24]	; (8008044 <_fstat_r+0x20>)
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	602b      	str	r3, [r5, #0]
 8008032:	f7fa fc3a 	bl	80028aa <_fstat>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d102      	bne.n	8008040 <_fstat_r+0x1c>
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	b103      	cbz	r3, 8008040 <_fstat_r+0x1c>
 800803e:	6023      	str	r3, [r4, #0]
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	bf00      	nop
 8008044:	20000718 	.word	0x20000718

08008048 <_isatty_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	2300      	movs	r3, #0
 800804c:	4d05      	ldr	r5, [pc, #20]	; (8008064 <_isatty_r+0x1c>)
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7fa fc38 	bl	80028c8 <_isatty>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_isatty_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_isatty_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20000718 	.word	0x20000718

08008068 <_lseek_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	2200      	movs	r2, #0
 8008072:	4d05      	ldr	r5, [pc, #20]	; (8008088 <_lseek_r+0x20>)
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	f7fa fc30 	bl	80028dc <_lseek>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_lseek_r+0x1e>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_lseek_r+0x1e>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	20000718 	.word	0x20000718

0800808c <_read_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	2200      	movs	r2, #0
 8008096:	4d05      	ldr	r5, [pc, #20]	; (80080ac <_read_r+0x20>)
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	f7fa fbc1 	bl	8002822 <_read>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_read_r+0x1e>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_read_r+0x1e>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20000718 	.word	0x20000718

080080b0 <_init>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr

080080bc <_fini>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr
